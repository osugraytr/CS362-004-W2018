TESTING isGameOver():
TEST# 1 : Player = 0 | zero_or_more = 0 | how_many_zeros = 0 |  Expected 1: Result:  1
TEST# 2 : Player = 0 | zero_or_more = 0 | how_many_zeros = 1 |  Expected 1: Result:  1
TEST# 3 : Player = 0 | zero_or_more = 0 | how_many_zeros = 2 |  Expected 1: Result:  1
TEST# 4 : Player = 0 | zero_or_more = 0 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 5 : Player = 0 | zero_or_more = 0 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 6 : Player = 0 | zero_or_more = 1 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 7 : Player = 0 | zero_or_more = 1 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 8 : Player = 0 | zero_or_more = 1 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 9 : Player = 0 | zero_or_more = 1 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 10 : Player = 0 | zero_or_more = 1 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 11 : Player = 0 | zero_or_more = 2 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 12 : Player = 0 | zero_or_more = 2 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 13 : Player = 0 | zero_or_more = 2 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 14 : Player = 0 | zero_or_more = 2 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 15 : Player = 0 | zero_or_more = 2 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 16 : Player = 0 | zero_or_more = 3 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 17 : Player = 0 | zero_or_more = 3 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 18 : Player = 0 | zero_or_more = 3 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 19 : Player = 0 | zero_or_more = 3 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 20 : Player = 0 | zero_or_more = 3 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 21 : Player = 0 | zero_or_more = 4 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 22 : Player = 0 | zero_or_more = 4 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 23 : Player = 0 | zero_or_more = 4 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 24 : Player = 0 | zero_or_more = 4 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 25 : Player = 0 | zero_or_more = 4 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 26 : Player = 0 | zero_or_more = 5 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 27 : Player = 0 | zero_or_more = 5 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 28 : Player = 0 | zero_or_more = 5 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 29 : Player = 0 | zero_or_more = 5 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 30 : Player = 0 | zero_or_more = 5 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 31 : Player = 0 | zero_or_more = 6 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 32 : Player = 0 | zero_or_more = 6 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 33 : Player = 0 | zero_or_more = 6 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 34 : Player = 0 | zero_or_more = 6 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 35 : Player = 0 | zero_or_more = 6 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 36 : Player = 0 | zero_or_more = 7 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 37 : Player = 0 | zero_or_more = 7 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 38 : Player = 0 | zero_or_more = 7 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 39 : Player = 0 | zero_or_more = 7 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 40 : Player = 0 | zero_or_more = 7 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 41 : Player = 0 | zero_or_more = 8 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 42 : Player = 0 | zero_or_more = 8 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 43 : Player = 0 | zero_or_more = 8 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 44 : Player = 0 | zero_or_more = 8 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 45 : Player = 0 | zero_or_more = 8 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 46 : Player = 1 | zero_or_more = 0 | how_many_zeros = 0 |  Expected 1: Result:  1
TEST# 47 : Player = 1 | zero_or_more = 0 | how_many_zeros = 1 |  Expected 1: Result:  1
TEST# 48 : Player = 1 | zero_or_more = 0 | how_many_zeros = 2 |  Expected 1: Result:  1
TEST# 49 : Player = 1 | zero_or_more = 0 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 50 : Player = 1 | zero_or_more = 0 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 51 : Player = 1 | zero_or_more = 1 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 52 : Player = 1 | zero_or_more = 1 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 53 : Player = 1 | zero_or_more = 1 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 54 : Player = 1 | zero_or_more = 1 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 55 : Player = 1 | zero_or_more = 1 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 56 : Player = 1 | zero_or_more = 2 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 57 : Player = 1 | zero_or_more = 2 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 58 : Player = 1 | zero_or_more = 2 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 59 : Player = 1 | zero_or_more = 2 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 60 : Player = 1 | zero_or_more = 2 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 61 : Player = 1 | zero_or_more = 3 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 62 : Player = 1 | zero_or_more = 3 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 63 : Player = 1 | zero_or_more = 3 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 64 : Player = 1 | zero_or_more = 3 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 65 : Player = 1 | zero_or_more = 3 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 66 : Player = 1 | zero_or_more = 4 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 67 : Player = 1 | zero_or_more = 4 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 68 : Player = 1 | zero_or_more = 4 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 69 : Player = 1 | zero_or_more = 4 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 70 : Player = 1 | zero_or_more = 4 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 71 : Player = 1 | zero_or_more = 5 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 72 : Player = 1 | zero_or_more = 5 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 73 : Player = 1 | zero_or_more = 5 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 74 : Player = 1 | zero_or_more = 5 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 75 : Player = 1 | zero_or_more = 5 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 76 : Player = 1 | zero_or_more = 6 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 77 : Player = 1 | zero_or_more = 6 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 78 : Player = 1 | zero_or_more = 6 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 79 : Player = 1 | zero_or_more = 6 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 80 : Player = 1 | zero_or_more = 6 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 81 : Player = 1 | zero_or_more = 7 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 82 : Player = 1 | zero_or_more = 7 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 83 : Player = 1 | zero_or_more = 7 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 84 : Player = 1 | zero_or_more = 7 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 85 : Player = 1 | zero_or_more = 7 | how_many_zeros = 4 |  Expected 1: Result:  1
TEST# 86 : Player = 1 | zero_or_more = 8 | how_many_zeros = 0 |  Expected 0: Result:  0
TEST# 87 : Player = 1 | zero_or_more = 8 | how_many_zeros = 1 |  Expected 0: Result:  0
TEST# 88 : Player = 1 | zero_or_more = 8 | how_many_zeros = 2 |  Expected 0: Result:  0
TEST# 89 : Player = 1 | zero_or_more = 8 | how_many_zeros = 3 |  Expected 1: Result:  1
TEST# 90 : Player = 1 | zero_or_more = 8 | how_many_zeros = 4 |  Expected 1: Result:  1
Tests For:
	Players: 2
	G.supplyCount[province] from 0-8
	Between 0-4 Zero's in G.supplyCount array

Times ran: 90 | Tests Failed: 0
All tests Done!
File 'dominion.c'
Lines executed:17.68% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/***** Refactored cards - now with bugs!*****/
        -:    9:
        -:   10:/* Smithy */
        -:   11:/* Card Test 1 */
        -:   12:/* Random tester card1 */
    #####:   13:int play_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:   14:{
        -:   15:	int i;
        -:   16:
        -:   17:      //+3 Cards
    #####:   18:        for (i = 1; i < 3; i++) /* BUG: i = 1 instead of i = 0 */
        -:   19:	{
    #####:   20:	  drawCard(currentPlayer, state);
        -:   21:	}
        -:   22:			
        -:   23:      //discard card from hand
    #####:   24:      discardCard(handPos, currentPlayer, state, 0);
    #####:   25:      return 0;
        -:   26:}
        -:   27:
        -:   28:/* Adventurer */
        -:   29:/* Card Test 2 */
        -:   30:/* Random tester */
    #####:   31:int play_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:   32:{
        -:   33:	int cardDrawn;
        -:   34:
    #####:   35:	while(drawntreasure<2){
    #####:   36:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   37:		  shuffle(currentPlayer, state);
        -:   38:		}
    #####:   39:		drawCard(currentPlayer, state);
    #####:   40:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   41:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   42:		  drawntreasure++;
        -:   43:		else{
    #####:   44:		  temphand[z]=cardDrawn;
    #####:   45:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   46:		  z++;
        -:   47:		}
        -:   48:	      }
    #####:   49:	      while(z-1>0){ /* BUG: '>' instead of '>=' */
    #####:   50:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   51:		z=z-1;
        -:   52:	      }
    #####:   53:	      return 0;
        -:   54:}
        -:   55:
        -:   56:/* Council Room */
        -:   57:/* Card Test 3 */
    #####:   58:int play_council_room(int currentPlayer, struct gameState *state, int handPos)
        -:   59:{
        -:   60:	int i;
        -:   61:
        -:   62:      //+4 Cards
    #####:   63:      for (i = 0; i < 3; i++) /* BUG: draw 3 cards instead of 4 */
        -:   64:	{
    #####:   65:	  drawCard(currentPlayer, state);
        -:   66:	}
        -:   67:			
        -:   68:      //+1 Buy
    #####:   69:      state->numBuys++;
        -:   70:			
        -:   71:      //Each other player draws a card
    #####:   72:      for (i = 0; i < state->numPlayers; i++)
        -:   73:	{
    #####:   74:	  if ( i != currentPlayer )
        -:   75:	    {
    #####:   76:	      drawCard(i, state);
        -:   77:	    }
        -:   78:	}
        -:   79:			
        -:   80:      //put played card in played card pile
    #####:   81:      discardCard(handPos, currentPlayer, state, 0);
        -:   82:			
    #####:   83:      return 0;
        -:   84:}
        -:   85:
        -:   86:/* Mine */
    #####:   87:int play_mine(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:   88:{
        -:   89:	int i;
        -:   90:	int j;
        -:   91:
    #####:   92:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:   93:
    #####:   94:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:   95:	  {
    #####:   96:	    return -1;
        -:   97:	  }
        -:   98:		  
    #####:   99:	if (choice2 > treasure_map || choice2 < curse)
        -:  100:	  {
    #####:  101:	    return -1;
        -:  102:	  }
        -:  103:
    #####:  104:	if ( (getCost(state->hand[currentPlayer][choice1]) + 4) > getCost(choice2) ) /* BUG: Gain treasure costing up to 4 more instead of 3 */
        -:  105:	  {
    #####:  106:	    return -1;
        -:  107:	  }
        -:  108:
    #####:  109:	gainCard(choice2, state, 2, currentPlayer);
        -:  110:
        -:  111:	//discard card from hand
    #####:  112:	discardCard(handPos, currentPlayer, state, 0);
        -:  113:
        -:  114:	//discard trashed card
    #####:  115:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  116:	  {
    #####:  117:	    if (state->hand[currentPlayer][i] == j)
        -:  118:	      {
    #####:  119:		discardCard(i, currentPlayer, state, 0);			
    #####:  120:		break;
        -:  121:	      }
        -:  122:	  }
        -:  123:			  
    #####:  124:	return 0;
        -:  125:}
        -:  126:
        -:  127:/* Remodel */
    #####:  128:int play_remodel(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  129:{
        -:  130:	int i;
        -:  131:	int j;
        -:  132:
    #####:  133:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  134:
    #####:  135:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  136:	{
    #####:  137:	  return -1;
        -:  138:	}
        -:  139:
    #####:  140:      gainCard(choice2, state, 0, currentPlayer);
        -:  141:
        -:  142:      //discard card from hand
    #####:  143:      discardCard(handPos, currentPlayer, state, 0);
        -:  144:
        -:  145:      //discard trashed card
    #####:  146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  147:	{
    #####:  148:	  if (state->hand[currentPlayer][i] == j)
        -:  149:	    {
    #####:  150:	      discardCard(i, currentPlayer, state, 0);			
    #####:  151:	      break;
        -:  152:	    }
        -:  153:	}
        -:  154:
        -:  155:
    #####:  156:      return 0;
        -:  157:}
        -:  158:
        -:  159:/* Village */
        -:  160:/* Card Test 4 */
        -:  161:/* Random tester card 2 */
    #####:  162:int play_village(int currentPlayer, struct gameState *state, int handPos)
        -:  163:{
        -:  164:      //+1 Card
    #####:  165:      drawCard(currentPlayer, state);
        -:  166:			
        -:  167:      //+2 Actions
    #####:  168:      state->numActions = state->numActions + 2;
        -:  169:			
        -:  170:      //discard played card from hand
    #####:  171:      discardCard(handPos, currentPlayer, state, 0);
    #####:  172:      return 0;
        -:  173:}
        -:  174:
        -:  175:/***** End refactoring *****/
        -:  176:
        -:  177:
     2700:  178:int compare(const void* a, const void* b) {
     2700:  179:  if (*(int*)a > *(int*)b)
    #####:  180:    return 1;
     2700:  181:  if (*(int*)a < *(int*)b)
      720:  182:    return -1;
     1980:  183:  return 0;
        -:  184:}
        -:  185:
    #####:  186:struct gameState* newGame() {
    #####:  187:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  188:  return g;
        -:  189:}
        -:  190:
    #####:  191:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  192:		  int k8, int k9, int k10) {
    #####:  193:  int* k = malloc(10 * sizeof(int));
    #####:  194:  k[0] = k1;
    #####:  195:  k[1] = k2;
    #####:  196:  k[2] = k3;
    #####:  197:  k[3] = k4;
    #####:  198:  k[4] = k5;
    #####:  199:  k[5] = k6;
    #####:  200:  k[6] = k7;
    #####:  201:  k[7] = k8;
    #####:  202:  k[8] = k9;
    #####:  203:  k[9] = k10;
    #####:  204:  return k;
        -:  205:}
        -:  206:
       90:  207:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  208:		   struct gameState *state) {
        -:  209:
        -:  210:  int i;
        -:  211:  int j;
        -:  212:  int it;			
        -:  213:  //set up random number generator
       90:  214:  SelectStream(1);
       90:  215:  PutSeed((long)randomSeed);
        -:  216:  
        -:  217:  //check number of players
       90:  218:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  219:    {
    #####:  220:      return -1;
        -:  221:    }
        -:  222:
        -:  223:  //set number of players
       90:  224:  state->numPlayers = numPlayers;
        -:  225:
        -:  226:  //check selected kingdom cards are different
      990:  227:  for (i = 0; i < 10; i++)
        -:  228:    {
     9900:  229:      for (j = 0; j < 10; j++)
        -:  230:        {
     9000:  231:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  232:	    {
    #####:  233:	      return -1;
        -:  234:	    }
        -:  235:        }
        -:  236:    }
        -:  237:
        -:  238:
        -:  239:  //initialize supply
        -:  240:  ///////////////////////////////
        -:  241:
        -:  242:  //set number of Curse cards
       90:  243:  if (numPlayers == 2)
        -:  244:    {
       90:  245:      state->supplyCount[curse] = 10;
        -:  246:    }
    #####:  247:  else if (numPlayers == 3)
        -:  248:    {
    #####:  249:      state->supplyCount[curse] = 20;
        -:  250:    }
        -:  251:  else
        -:  252:    {
    #####:  253:      state->supplyCount[curse] = 30;
        -:  254:    }
        -:  255:
        -:  256:  //set number of Victory cards
       90:  257:  if (numPlayers == 2)
        -:  258:    {
       90:  259:      state->supplyCount[estate] = 8;
       90:  260:      state->supplyCount[duchy] = 8;
       90:  261:      state->supplyCount[province] = 8;
        -:  262:    }
        -:  263:  else
        -:  264:    {
    #####:  265:      state->supplyCount[estate] = 12;
    #####:  266:      state->supplyCount[duchy] = 12;
    #####:  267:      state->supplyCount[province] = 12;
        -:  268:    }
        -:  269:
        -:  270:  //set number of Treasure cards
       90:  271:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       90:  272:  state->supplyCount[silver] = 40;
       90:  273:  state->supplyCount[gold] = 30;
        -:  274:
        -:  275:  //set number of Kingdom cards
     1890:  276:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  277:    {
    14850:  278:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  279:	{
    13950:  280:	  if (kingdomCards[j] == i)
        -:  281:	    {
        -:  282:	      //check if card is a 'Victory' Kingdom card
      900:  283:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  284:		{
      360:  285:		  if (numPlayers == 2){ 
      180:  286:		    state->supplyCount[i] = 8; 
        -:  287:		  }
    #####:  288:		  else{ state->supplyCount[i] = 12; }
        -:  289:		}
        -:  290:	      else
        -:  291:		{
      720:  292:		  state->supplyCount[i] = 10;
        -:  293:		}
      900:  294:	      break;
        -:  295:	    }
        -:  296:	  else    //card is not in the set choosen for the game
        -:  297:	    {
    13050:  298:	      state->supplyCount[i] = -1;
        -:  299:	    }
        -:  300:	}
        -:  301:
        -:  302:    }
        -:  303:
        -:  304:  ////////////////////////
        -:  305:  //supply intilization complete
        -:  306:
        -:  307:  //set player decks
      270:  308:  for (i = 0; i < numPlayers; i++)
        -:  309:    {
      180:  310:      state->deckCount[i] = 0;
      720:  311:      for (j = 0; j < 3; j++)
        -:  312:	{
      540:  313:	  state->deck[i][j] = estate;
      540:  314:	  state->deckCount[i]++;
        -:  315:	}
     1440:  316:      for (j = 3; j < 10; j++)
        -:  317:	{
     1260:  318:	  state->deck[i][j] = copper;
     1260:  319:	  state->deckCount[i]++;		
        -:  320:	}
        -:  321:    }
        -:  322:
        -:  323:  //shuffle player decks
      270:  324:  for (i = 0; i < numPlayers; i++)
        -:  325:    {
      180:  326:      if ( shuffle(i, state) < 0 )
        -:  327:	{
    #####:  328:	  return -1;
        -:  329:	}
        -:  330:    }
        -:  331:
        -:  332:  //draw player hands
      270:  333:  for (i = 0; i < numPlayers; i++)
        -:  334:    {  
        -:  335:      //initialize hand size to zero
      180:  336:      state->handCount[i] = 0;
      180:  337:      state->discardCount[i] = 0;
        -:  338:      //draw 5 cards
        -:  339:      // for (j = 0; j < 5; j++)
        -:  340:      //	{
        -:  341:      //	  drawCard(i, state);
        -:  342:      //	}
        -:  343:    }
        -:  344:  
        -:  345:  //set embargo tokens to 0 for all supply piles
     2520:  346:  for (i = 0; i <= treasure_map; i++)
        -:  347:    {
     2430:  348:      state->embargoTokens[i] = 0;
        -:  349:    }
        -:  350:
        -:  351:  //initialize first player's turn
       90:  352:  state->outpostPlayed = 0;
       90:  353:  state->phase = 0;
       90:  354:  state->numActions = 1;
       90:  355:  state->numBuys = 1;
       90:  356:  state->playedCardCount = 0;
       90:  357:  state->whoseTurn = 0;
       90:  358:  state->handCount[state->whoseTurn] = 0;
        -:  359:  //int it; move to top
        -:  360:
        -:  361:  //Moved draw cards to here, only drawing at the start of a turn
      540:  362:  for (it = 0; it < 5; it++){
      450:  363:    drawCard(state->whoseTurn, state);
        -:  364:  }
        -:  365:
       90:  366:  updateCoins(state->whoseTurn, state, 0);
        -:  367:
       90:  368:  return 0;
        -:  369:}
        -:  370:
      180:  371:int shuffle(int player, struct gameState *state) {
        -:  372: 
        -:  373:
        -:  374:  int newDeck[MAX_DECK];
      180:  375:  int newDeckPos = 0;
        -:  376:  int card;
        -:  377:  int i;
        -:  378:
      180:  379:  if (state->deckCount[player] < 1)
    #####:  380:    return -1;
      180:  381:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  382:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  383:
     2160:  384:  while (state->deckCount[player] > 0) {
     1800:  385:    card = floor(Random() * state->deckCount[player]);
     1800:  386:    newDeck[newDeckPos] = state->deck[player][card];
     1800:  387:    newDeckPos++;
     6300:  388:    for (i = card; i < state->deckCount[player]-1; i++) {
     4500:  389:      state->deck[player][i] = state->deck[player][i+1];
        -:  390:    }
     1800:  391:    state->deckCount[player]--;
        -:  392:  }
     1980:  393:  for (i = 0; i < newDeckPos; i++) {
     1800:  394:    state->deck[player][i] = newDeck[i];
     1800:  395:    state->deckCount[player]++;
        -:  396:  }
        -:  397:
      180:  398:  return 0;
        -:  399:}
        -:  400:
    #####:  401:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  402:{	
        -:  403:  int card;
    #####:  404:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  405:
        -:  406:  //check if it is the right phase
    #####:  407:  if (state->phase != 0)
        -:  408:    {
    #####:  409:      return -1;
        -:  410:    }
        -:  411:	
        -:  412:  //check if player has enough actions
    #####:  413:  if ( state->numActions < 1 )
        -:  414:    {
    #####:  415:      return -1;
        -:  416:    }
        -:  417:	
        -:  418:  //get card played
    #####:  419:  card = handCard(handPos, state);
        -:  420:	
        -:  421:  //check if selected card is an action
    #####:  422:  if ( card < adventurer || card > treasure_map )
        -:  423:    {
    #####:  424:      return -1;
        -:  425:    }
        -:  426:	
        -:  427:  //play card
    #####:  428:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  429:    {
    #####:  430:      return -1;
        -:  431:    }
        -:  432:	
        -:  433:  //reduce number of actions
    #####:  434:  state->numActions--;
        -:  435:
        -:  436:  //update coins (Treasure cards may be added with card draws)
    #####:  437:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  438:	
    #####:  439:  return 0;
        -:  440:}
        -:  441:
    #####:  442:int buyCard(int supplyPos, struct gameState *state) {
        -:  443:  int who;
        -:  444:  if (DEBUG){
        -:  445:    printf("Entering buyCard...\n");
        -:  446:  }
        -:  447:
        -:  448:  // I don't know what to do about the phase thing.
        -:  449:
    #####:  450:  who = state->whoseTurn;
        -:  451:
    #####:  452:  if (state->numBuys < 1){
        -:  453:    if (DEBUG)
        -:  454:      printf("You do not have any buys left\n");
    #####:  455:    return -1;
    #####:  456:  } else if (supplyCount(supplyPos, state) <1){
        -:  457:    if (DEBUG)
        -:  458:      printf("There are not any of that type of card left\n");
    #####:  459:    return -1;
    #####:  460:  } else if (state->coins < getCost(supplyPos)){
        -:  461:    if (DEBUG) 
        -:  462:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  463:    return -1;
        -:  464:  } else {
    #####:  465:    state->phase=1;
        -:  466:    //state->supplyCount[supplyPos]--;
    #####:  467:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  468:  
    #####:  469:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  470:    state->numBuys--;
        -:  471:    if (DEBUG)
        -:  472:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  473:  }
        -:  474:
        -:  475:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  476:  //state->discardCount[who]++;
        -:  477:    
    #####:  478:  return 0;
        -:  479:}
        -:  480:
        -:  481:/***** Use this function for Unit test 4 *****/
    #####:  482:int numHandCards(struct gameState *state) {
    #####:  483:  return state->handCount[ whoseTurn(state) ];
        -:  484:}
        -:  485:
    #####:  486:int handCard(int handPos, struct gameState *state) {
    #####:  487:  int currentPlayer = whoseTurn(state);
    #####:  488:  return state->hand[currentPlayer][handPos];
        -:  489:}
        -:  490:
        -:  491:/***** Use this function for Unit test 3 *****/
    #####:  492:int supplyCount(int card, struct gameState *state) {
    #####:  493:  return state->supplyCount[card];
        -:  494:}
        -:  495:
    #####:  496:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  497:  int i;
    #####:  498:  int count = 0;
        -:  499:
    #####:  500:  for (i = 0; i < state->deckCount[player]; i++)
        -:  501:    {
    #####:  502:      if (state->deck[player][i] == card) count++;
        -:  503:    }
        -:  504:
    #####:  505:  for (i = 0; i < state->handCount[player]; i++)
        -:  506:    {
    #####:  507:      if (state->hand[player][i] == card) count++;
        -:  508:    }
        -:  509:
    #####:  510:  for (i = 0; i < state->discardCount[player]; i++)
        -:  511:    {
    #####:  512:      if (state->discard[player][i] == card) count++;
        -:  513:    }
        -:  514:
    #####:  515:  return count;
        -:  516:}
        -:  517:
    #####:  518:int whoseTurn(struct gameState *state) {
    #####:  519:  return state->whoseTurn;
        -:  520:}
        -:  521:
    #####:  522:int endTurn(struct gameState *state) {
        -:  523:  int k;
        -:  524:  int i;
    #####:  525:  int currentPlayer = whoseTurn(state);
        -:  526:  
        -:  527:  //Discard hand
    #####:  528:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  529:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  530:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  531:  }
    #####:  532:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  533:    
        -:  534:  //Code for determining the player
    #####:  535:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  536:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  537:  }
        -:  538:  else{
    #####:  539:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  540:  }
        -:  541:
    #####:  542:  state->outpostPlayed = 0;
    #####:  543:  state->phase = 0;
    #####:  544:  state->numActions = 1;
    #####:  545:  state->coins = 0;
    #####:  546:  state->numBuys = 1;
    #####:  547:  state->playedCardCount = 0;
    #####:  548:  state->handCount[state->whoseTurn] = 0;
        -:  549:
        -:  550:  //int k; move to top
        -:  551:  //Next player draws hand
    #####:  552:  for (k = 0; k < 5; k++){
    #####:  553:    drawCard(state->whoseTurn, state);//Draw a card
        -:  554:  }
        -:  555:
        -:  556:  //Update money
    #####:  557:  updateCoins(state->whoseTurn, state , 0);
        -:  558:
    #####:  559:  return 0;
        -:  560:}
        -:  561:
        -:  562:/***** Use this function for Unit test 1 *****/
       90:  563:int isGameOver(struct gameState *state) {
        -:  564:  int i;
        -:  565:  int j;
        -:  566:	
        -:  567:  //if stack of Province cards is empty, the game ends
       90:  568:  if (state->supplyCount[province] == 0)
        -:  569:    {
       26:  570:      return 1;
        -:  571:    }
        -:  572:
        -:  573:  //if three supply pile are at 0, the game ends
       64:  574:  j = 0;
     1664:  575:  for (i = 0; i < 25; i++)
        -:  576:    {
     1600:  577:      if (state->supplyCount[i] == 0)
        -:  578:	{
       96:  579:	  j++;
        -:  580:	}
        -:  581:    }
       64:  582:  if ( j >= 3)
        -:  583:    {
       16:  584:      return 1;
        -:  585:    }
        -:  586:
       48:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int scoreFor (int player, struct gameState *state) {
        -:  591:
        -:  592:  int i;
    #####:  593:  int score = 0;
        -:  594:  //score from hand
    #####:  595:  for (i = 0; i < state->handCount[player]; i++)
        -:  596:    {
    #####:  597:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  598:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  599:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  600:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  601:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  602:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  603:    }
        -:  604:
        -:  605:  //score from discard
    #####:  606:  for (i = 0; i < state->discardCount[player]; i++)
        -:  607:    {
    #####:  608:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  609:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  610:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  611:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  612:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  613:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  614:    }
        -:  615:
        -:  616:  //score from deck
    #####:  617:  for (i = 0; i < state->discardCount[player]; i++)
        -:  618:    {
    #####:  619:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  620:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  621:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  622:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  623:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  624:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  625:    }
        -:  626:
    #####:  627:  return score;
        -:  628:}
        -:  629:
    #####:  630:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  631:  int i;	
        -:  632:  int j;
        -:  633:  int highScore;
        -:  634:  int currentPlayer;
        -:  635:
        -:  636:  //get score for each player
    #####:  637:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  638:    {
        -:  639:      //set unused player scores to -9999
    #####:  640:      if (i >= state->numPlayers)
        -:  641:	{
    #####:  642:	  players[i] = -9999;
        -:  643:	}
        -:  644:      else
        -:  645:	{
    #####:  646:	  players[i] = scoreFor (i, state);
        -:  647:	}
        -:  648:    }
        -:  649:
        -:  650:  //find highest score
    #####:  651:  j = 0;
    #####:  652:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  653:    {
    #####:  654:      if (players[i] > players[j])
        -:  655:	{
    #####:  656:	  j = i;
        -:  657:	}
        -:  658:    }
    #####:  659:  highScore = players[j];
        -:  660:
        -:  661:  //add 1 to players who had less turns
    #####:  662:  currentPlayer = whoseTurn(state);
    #####:  663:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  664:    {
    #####:  665:      if ( players[i] == highScore && i > currentPlayer )
        -:  666:	{
    #####:  667:	  players[i]++;
        -:  668:	}
        -:  669:    }
        -:  670:
        -:  671:  //find new highest score
    #####:  672:  j = 0;
    #####:  673:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  674:    {
    #####:  675:      if ( players[i] > players[j] )
        -:  676:	{
    #####:  677:	  j = i;
        -:  678:	}
        -:  679:    }
    #####:  680:  highScore = players[j];
        -:  681:
        -:  682:  //set winners in array to 1 and rest to 0
    #####:  683:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  684:    {
    #####:  685:      if ( players[i] == highScore )
        -:  686:	{
    #####:  687:	  players[i] = 1;
        -:  688:	}
        -:  689:      else
        -:  690:	{
    #####:  691:	  players[i] = 0;
        -:  692:	}
        -:  693:    }
        -:  694:
    #####:  695:  return 0;
        -:  696:}
        -:  697:
      450:  698:int drawCard(int player, struct gameState *state)
        -:  699:{	int count;
        -:  700:  int deckCounter;
      450:  701:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  702:    
        -:  703:    //Step 1 Shuffle the discard pile back into a deck
        -:  704:    int i;
        -:  705:    //Move discard to deck
    #####:  706:    for (i = 0; i < state->discardCount[player];i++){
    #####:  707:      state->deck[player][i] = state->discard[player][i];
    #####:  708:      state->discard[player][i] = -1;
        -:  709:    }
        -:  710:
    #####:  711:    state->deckCount[player] = state->discardCount[player];
    #####:  712:    state->discardCount[player] = 0;//Reset discard
        -:  713:
        -:  714:    //Shufffle the deck
    #####:  715:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  716:   
        -:  717:    if (DEBUG){//Debug statements
        -:  718:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  719:    }
        -:  720:    
    #####:  721:    state->discardCount[player] = 0;
        -:  722:
        -:  723:    //Step 2 Draw Card
    #####:  724:    count = state->handCount[player];//Get current player's hand count
        -:  725:    
        -:  726:    if (DEBUG){//Debug statements
        -:  727:      printf("Current hand count: %d\n", count);
        -:  728:    }
        -:  729:    
    #####:  730:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  731:
    #####:  732:    if (deckCounter == 0)
    #####:  733:      return -1;
        -:  734:
    #####:  735:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  736:    state->deckCount[player]--;
    #####:  737:    state->handCount[player]++;//Increment hand count
        -:  738:  }
        -:  739:
        -:  740:  else{
      450:  741:    int count = state->handCount[player];//Get current hand count for player
        -:  742:    int deckCounter;
        -:  743:    if (DEBUG){//Debug statements
        -:  744:      printf("Current hand count: %d\n", count);
        -:  745:    }
        -:  746:
      450:  747:    deckCounter = state->deckCount[player];//Create holder for the deck count
      450:  748:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      450:  749:    state->deckCount[player]--;
      450:  750:    state->handCount[player]++;//Increment hand count
        -:  751:  }
        -:  752:
      450:  753:  return 0;
        -:  754:}
        -:  755:
    #####:  756:int getCost(int cardNumber)
        -:  757:{
    #####:  758:  switch( cardNumber ) 
        -:  759:    {
        -:  760:    case curse:
    #####:  761:      return 0;
        -:  762:    case estate:
    #####:  763:      return 2;
        -:  764:    case duchy:
    #####:  765:      return 5;
        -:  766:    case province:
    #####:  767:      return 8;
        -:  768:    case copper:
    #####:  769:      return 0;
        -:  770:    case silver:
    #####:  771:      return 3;
        -:  772:    case gold:
    #####:  773:      return 6;
        -:  774:    case adventurer:
    #####:  775:      return 6;
        -:  776:    case council_room:
    #####:  777:      return 5;
        -:  778:    case feast:
    #####:  779:      return 4;
        -:  780:    case gardens:
    #####:  781:      return 4;
        -:  782:    case mine:
    #####:  783:      return 5;
        -:  784:    case remodel:
    #####:  785:      return 4;
        -:  786:    case smithy:
    #####:  787:      return 4;
        -:  788:    case village:
    #####:  789:      return 3;
        -:  790:    case baron:
    #####:  791:      return 4;
        -:  792:    case great_hall:
    #####:  793:      return 3;
        -:  794:    case minion:
    #####:  795:      return 5;
        -:  796:    case steward:
    #####:  797:      return 3;
        -:  798:    case tribute:
    #####:  799:      return 5;
        -:  800:    case ambassador:
    #####:  801:      return 3;
        -:  802:    case cutpurse:
    #####:  803:      return 4;
        -:  804:    case embargo: 
    #####:  805:      return 2;
        -:  806:    case outpost:
    #####:  807:      return 5;
        -:  808:    case salvager:
    #####:  809:      return 4;
        -:  810:    case sea_hag:
    #####:  811:      return 4;
        -:  812:    case treasure_map:
    #####:  813:      return 4;
        -:  814:    }
        -:  815:	
    #####:  816:  return -1;
        -:  817:}
        -:  818:
        -:  819:/********** BEGINNING of cardEffct **********/
        -:  820:/* This is where the refactor and bug additions will be done for assignment-2 */
    #####:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
    #####:  828:  int currentPlayer = whoseTurn(state);
    #####:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
    #####:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND];// moved above the if statement
    #####:  833:  int drawntreasure=0;
        -:  834:  int cardDrawn;
    #####:  835:  int z = 0;// this is the counter for the temp hand
    #####:  836:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  837:    nextPlayer = 0;
        -:  838:  }
        -:  839:  
        -:  840:  /* Refactoring switch statement so cards are implemented in their own functions */
        -:  841:  //uses switch to select card and perform actions
    #####:  842:  switch( card ) 
        -:  843:    {
        -:  844:
        -:  845:    /***** Refactor adventurer *****/
        -:  846:    case adventurer:
    #####:  847:	    return play_adventurer(drawntreasure, state, currentPlayer, temphand, z);
        -:  848:      /*
        -:  849:      while(drawntreasure<2){
        -:  850:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  851:	  shuffle(currentPlayer, state);
        -:  852:	}
        -:  853:	drawCard(currentPlayer, state);
        -:  854:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  855:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  856:	  drawntreasure++;
        -:  857:	else{
        -:  858:	  temphand[z]=cardDrawn;
        -:  859:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  860:	  z++;
        -:  861:	}
        -:  862:      }
        -:  863:      while(z-1>=0){
        -:  864:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  865:	z=z-1;
        -:  866:      }
        -:  867:      return 0;
        -:  868:      */
        -:  869:			
        -:  870:    /***** Refactor council room*****/
        -:  871:    case council_room:
    #####:  872:       	return play_council_room(currentPlayer, state, handPos);
        -:  873:      /*
        -:  874:      //+4 Cards
        -:  875:      for (i = 0; i < 4; i++)
        -:  876:	{
        -:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
        -:  879:			
        -:  880:      //+1 Buy
        -:  881:      state->numBuys++;
        -:  882:			
        -:  883:      //Each other player draws a card
        -:  884:      for (i = 0; i < state->numPlayers; i++)
        -:  885:	{
        -:  886:	  if ( i != currentPlayer )
        -:  887:	    {
        -:  888:	      drawCard(i, state);
        -:  889:	    }
        -:  890:	}
        -:  891:			
        -:  892:      //put played card in played card pile
        -:  893:      discardCard(handPos, currentPlayer, state, 0);
        -:  894:			
        -:  895:      return 0;
        -:  896:      */
        -:  897:			
        -:  898:    case feast:
        -:  899:      //gain card with cost up to 5
        -:  900:      //Backup hand
    #####:  901:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  902:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  903:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  904:      }
        -:  905:      //Backup hand
        -:  906:
        -:  907:      //Update Coins for Buy
    #####:  908:      updateCoins(currentPlayer, state, 5);
    #####:  909:      x = 1;//Condition to loop on
    #####:  910:      while( x == 1) {//Buy one card
    #####:  911:	if (supplyCount(choice1, state) <= 0){
        -:  912:	  if (DEBUG)
        -:  913:	    printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:	  if (DEBUG){
        -:  916:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  917:	  }
        -:  918:	}
    #####:  919:	else if (state->coins < getCost(choice1)){
    #####:  920:	  printf("That card is too expensive!\n");
        -:  921:
        -:  922:	  if (DEBUG){
        -:  923:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  924:	  }
        -:  925:	}
        -:  926:	else{
        -:  927:
        -:  928:	  if (DEBUG){
        -:  929:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:	  }
        -:  931:
    #####:  932:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  933:	  x = 0;//No more buying cards
        -:  934:
        -:  935:	  if (DEBUG){
        -:  936:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:	  }
        -:  938:
        -:  939:	}
        -:  940:      }     
        -:  941:
        -:  942:      //Reset Hand
    #####:  943:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  944:	state->hand[currentPlayer][i] = temphand[i];
    #####:  945:	temphand[i] = -1;
        -:  946:      }
        -:  947:      //Reset Hand
        -:  948:      			
    #####:  949:      return 0;
        -:  950:			
        -:  951:    case gardens:
    #####:  952:      return -1;
        -:  953:			
        -:  954:    /***** Refactor mine*****/
        -:  955:    case mine:
    #####:  956:	return play_mine(state, choice1, choice2, currentPlayer, handPos);
        -:  957:      /*
        -:  958:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
        -:  960:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  961:	{
        -:  962:	  return -1;
        -:  963:	}
        -:  964:		
        -:  965:      if (choice2 > treasure_map || choice2 < curse)
        -:  966:	{
        -:  967:	  return -1;
        -:  968:	}
        -:  969:
        -:  970:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  971:	{
        -:  972:	  return -1;
        -:  973:	}
        -:  974:
        -:  975:      gainCard(choice2, state, 2, currentPlayer);
        -:  976:
        -:  977:      //discard card from hand
        -:  978:      discardCard(handPos, currentPlayer, state, 0);
        -:  979:
        -:  980:      //discard trashed card
        -:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:	{
        -:  983:	  if (state->hand[currentPlayer][i] == j)
        -:  984:	    {
        -:  985:	      discardCard(i, currentPlayer, state, 0);			
        -:  986:	      break;
        -:  987:	    }
        -:  988:	}
        -:  989:			
        -:  990:      return 0;
        -:  991:      */
        -:  992:			
        -:  993:    /***** Refactor remodel*****/
        -:  994:    case remodel:
    #####:  995:      return play_remodel(state, choice1, choice2, currentPlayer, handPos);
        -:  996:      /*
        -:  997:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  998:
        -:  999:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1000:	{
        -: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
        -: 1004:      gainCard(choice2, state, 0, currentPlayer);
        -: 1005:
        -: 1006:      //discard card from hand
        -: 1007:      discardCard(handPos, currentPlayer, state, 0);
        -: 1008:
        -: 1009:      //discard trashed card
        -: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1011:	{
        -: 1012:	  if (state->hand[currentPlayer][i] == j)
        -: 1013:	    {
        -: 1014:	      discardCard(i, currentPlayer, state, 0);			
        -: 1015:	      break;
        -: 1016:	    }
        -: 1017:	}
        -: 1018:
        -: 1019:
        -: 1020:      return 0;
        -: 1021:      */
        -: 1022:		
        -: 1023:    /***** Refactor smithy *****/
        -: 1024:    case smithy:
    #####: 1025:      return play_smithy(currentPlayer, state, handPos);
        -: 1026:      /* 
        -: 1027:      //+3 Cards
        -: 1028:      for (i = 0; i < 3; i++)
        -: 1029:	{
        -: 1030:	  drawCard(currentPlayer, state);
        -: 1031:	}
        -: 1032:			
        -: 1033:      //discard card from hand
        -: 1034:      discardCard(handPos, currentPlayer, state, 0);
        -: 1035:      return 0;
        -: 1036:      */
        -: 1037:		
        -: 1038:
        -: 1039:    /***** Refactored village for assignment-3 (no new bugs introduced) *****/
        -: 1040:    case village:
    #####: 1041:      return play_village(currentPlayer, state, handPos);
        -: 1042:      /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:      */
        -: 1053:		
        -: 1054:    case baron:
    #####: 1055:      state->numBuys++;//Increase buys by 1!
    #####: 1056:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1057:	int p = 0;//Iterator for hand!
    #####: 1058:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1059:	while(card_not_discarded){
    #####: 1060:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1061:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1062:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1063:	    state->discardCount[currentPlayer]++;
    #####: 1064:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1065:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1066:	    }
    #####: 1067:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1068:	    state->handCount[currentPlayer]--;
    #####: 1069:	    card_not_discarded = 0;//Exit the loop
        -: 1070:	  }
    #####: 1071:	  else if (p > state->handCount[currentPlayer]){
        -: 1072:	    if(DEBUG) {
        -: 1073:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1074:	      printf("Must gain an estate if there are any\n");
        -: 1075:	    }
    #####: 1076:	    if (supplyCount(estate, state) > 0){
    #####: 1077:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1078:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1079:	      if (supplyCount(estate, state) == 0){
    #####: 1080:		isGameOver(state);
        -: 1081:	      }
        -: 1082:	    }
    #####: 1083:	    card_not_discarded = 0;//Exit the loop
        -: 1084:	  }
        -: 1085:			    
        -: 1086:	  else{
    #####: 1087:	    p++;//Next card
        -: 1088:	  }
        -: 1089:	}
        -: 1090:      }
        -: 1091:			    
        -: 1092:      else{
    #####: 1093:	if (supplyCount(estate, state) > 0){
    #####: 1094:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1095:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1096:	  if (supplyCount(estate, state) == 0){
    #####: 1097:	    isGameOver(state);
        -: 1098:	  }
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
        -: 1102:      
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case great_hall:
        -: 1106:      //+1 Card
    #####: 1107:      drawCard(currentPlayer, state);
        -: 1108:			
        -: 1109:      //+1 Actions
    #####: 1110:      state->numActions++;
        -: 1111:			
        -: 1112:      //discard card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case minion:
        -: 1117:      //+1 action
    #####: 1118:      state->numActions++;
        -: 1119:			
        -: 1120:      //discard card from hand
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
        -: 1122:			
    #####: 1123:      if (choice1)		//+2 coins
        -: 1124:	{
    #####: 1125:	  state->coins = state->coins + 2;
        -: 1126:	}
        -: 1127:			
    #####: 1128:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1129:	{
        -: 1130:	  //discard hand
    #####: 1131:	  while(numHandCards(state) > 0)
        -: 1132:	    {
    #####: 1133:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //draw 4
    #####: 1137:	  for (i = 0; i < 4; i++)
        -: 1138:	    {
    #####: 1139:	      drawCard(currentPlayer, state);
        -: 1140:	    }
        -: 1141:				
        -: 1142:	  //other players discard hand and redraw if hand size > 4
    #####: 1143:	  for (i = 0; i < state->numPlayers; i++)
        -: 1144:	    {
    #####: 1145:	      if (i != currentPlayer)
        -: 1146:		{
    #####: 1147:		  if ( state->handCount[i] > 4 )
        -: 1148:		    {
        -: 1149:		      //discard hand
    #####: 1150:		      while( state->handCount[i] > 0 )
        -: 1151:			{
    #####: 1152:			  discardCard(handPos, i, state, 0);
        -: 1153:			}
        -: 1154:							
        -: 1155:		      //draw 4
    #####: 1156:		      for (j = 0; j < 4; j++)
        -: 1157:			{
    #####: 1158:			  drawCard(i, state);
        -: 1159:			}
        -: 1160:		    }
        -: 1161:		}
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case steward:
    #####: 1168:      if (choice1 == 1)
        -: 1169:	{
        -: 1170:	  //+2 cards
    #####: 1171:	  drawCard(currentPlayer, state);
    #####: 1172:	  drawCard(currentPlayer, state);
        -: 1173:	}
    #####: 1174:      else if (choice1 == 2)
        -: 1175:	{
        -: 1176:	  //+2 coins
    #####: 1177:	  state->coins = state->coins + 2;
        -: 1178:	}
        -: 1179:      else
        -: 1180:	{
        -: 1181:	  //trash 2 cards in hand
    #####: 1182:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1183:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:			
        -: 1186:      //discard card from hand
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case tribute:
    #####: 1191:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1192:	if (state->deckCount[nextPlayer] > 0){
    #####: 1193:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1194:	  state->deckCount[nextPlayer]--;
        -: 1195:	}
    #####: 1196:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1197:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1198:	  state->discardCount[nextPlayer]--;
        -: 1199:	}
        -: 1200:	else{
        -: 1201:	  //No Card to Reveal
        -: 1202:	  if (DEBUG){
        -: 1203:	    printf("No cards to reveal\n");
        -: 1204:	  }
        -: 1205:	}
        -: 1206:      }
        -: 1207:	    
        -: 1208:      else{
    #####: 1209:	if (state->deckCount[nextPlayer] == 0){
    #####: 1210:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1211:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1212:	    state->deckCount[nextPlayer]++;
    #####: 1213:	    state->discard[nextPlayer][i] = -1;
    #####: 1214:	    state->discardCount[nextPlayer]--;
        -: 1215:	  }
        -: 1216:			    
    #####: 1217:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1218:	} 
    #####: 1219:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1220:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1221:	state->deckCount[nextPlayer]--;
    #####: 1222:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1223:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1224:	state->deckCount[nextPlayer]--;
        -: 1225:      }    
        -: 1226:		       
    #####: 1227:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1228:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1229:	state->playedCardCount++;
    #####: 1230:	tributeRevealedCards[1] = -1;
        -: 1231:      }
        -: 1232:
    #####: 1233:      for (i = 0; i <= 2; i ++){
    #####: 1234:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1235:	  state->coins += 2;
        -: 1236:	}
        -: 1237:		    
    #####: 1238:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1239:	  drawCard(currentPlayer, state);
    #####: 1240:	  drawCard(currentPlayer, state);
        -: 1241:	}
        -: 1242:	else{//Action Card
    #####: 1243:	  state->numActions = state->numActions + 2;
        -: 1244:	}
        -: 1245:      }
        -: 1246:	    
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case ambassador:
    #####: 1250:      j = 0;		//used to check if player has enough cards to discard
        -: 1251:
    #####: 1252:      if (choice2 > 2 || choice2 < 0)
        -: 1253:	{
    #####: 1254:	  return -1;				
        -: 1255:	}
        -: 1256:
    #####: 1257:      if (choice1 == handPos)
        -: 1258:	{
    #####: 1259:	  return -1;
        -: 1260:	}
        -: 1261:
    #####: 1262:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1263:	{
    #####: 1264:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1265:	    {
    #####: 1266:	      j++;
        -: 1267:	    }
        -: 1268:	}
    #####: 1269:      if (j < choice2)
        -: 1270:	{
    #####: 1271:	  return -1;				
        -: 1272:	}
        -: 1273:
        -: 1274:      if (DEBUG) 
        -: 1275:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1276:
        -: 1277:      //increase supply count for choosen card by amount being discarded
    #####: 1278:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1279:			
        -: 1280:      //each other player gains a copy of revealed card
    #####: 1281:      for (i = 0; i < state->numPlayers; i++)
        -: 1282:	{
    #####: 1283:	  if (i != currentPlayer)
        -: 1284:	    {
    #####: 1285:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1286:	    }
        -: 1287:	}
        -: 1288:
        -: 1289:      //discard played card from hand
    #####: 1290:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1291:
        -: 1292:      //trash copies of cards returned to supply
    #####: 1293:      for (j = 0; j < choice2; j++)
        -: 1294:	{
    #####: 1295:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1296:	    {
    #####: 1297:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1298:		{
    #####: 1299:		  discardCard(i, currentPlayer, state, 1);
    #####: 1300:		  break;
        -: 1301:		}
        -: 1302:	    }
        -: 1303:	}			
        -: 1304:
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case cutpurse:
        -: 1308:
    #####: 1309:      updateCoins(currentPlayer, state, 2);
    #####: 1310:      for (i = 0; i < state->numPlayers; i++)
        -: 1311:	{
    #####: 1312:	  if (i != currentPlayer)
        -: 1313:	    {
    #####: 1314:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1315:		{
    #####: 1316:		  if (state->hand[i][j] == copper)
        -: 1317:		    {
    #####: 1318:		      discardCard(j, i, state, 0);
    #####: 1319:		      break;
        -: 1320:		    }
    #####: 1321:		  if (j == state->handCount[i])
        -: 1322:		    {
    #####: 1323:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1324:			{
        -: 1325:			  if (DEBUG)
        -: 1326:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1327:			}	
    #####: 1328:		      break;
        -: 1329:		    }		
        -: 1330:		}
        -: 1331:					
        -: 1332:	    }
        -: 1333:				
        -: 1334:	}				
        -: 1335:
        -: 1336:      //discard played card from hand
    #####: 1337:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1338:
    #####: 1339:      return 0;
        -: 1340:
        -: 1341:		
        -: 1342:    case embargo: 
        -: 1343:      //+2 Coins
    #####: 1344:      state->coins = state->coins + 2;
        -: 1345:			
        -: 1346:      //see if selected pile is in play
    #####: 1347:      if ( state->supplyCount[choice1] == -1 )
        -: 1348:	{
    #####: 1349:	  return -1;
        -: 1350:	}
        -: 1351:			
        -: 1352:      //add embargo token to selected supply pile
    #####: 1353:      state->embargoTokens[choice1]++;
        -: 1354:			
        -: 1355:      //trash card
    #####: 1356:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1357:      return 0;
        -: 1358:		
        -: 1359:    case outpost:
        -: 1360:      //set outpost flag
    #####: 1361:      state->outpostPlayed++;
        -: 1362:			
        -: 1363:      //discard card
    #####: 1364:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:      return 0;
        -: 1366:		
        -: 1367:    case salvager:
        -: 1368:      //+1 buy
    #####: 1369:      state->numBuys++;
        -: 1370:			
    #####: 1371:      if (choice1)
        -: 1372:	{
        -: 1373:	  //gain coins equal to trashed card
    #####: 1374:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1375:	  //trash card
    #####: 1376:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1377:	}
        -: 1378:			
        -: 1379:      //discard card
    #####: 1380:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1381:      return 0;
        -: 1382:		
        -: 1383:    case sea_hag:
    #####: 1384:      for (i = 0; i < state->numPlayers; i++){
    #####: 1385:	if (i != currentPlayer){
    #####: 1386:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1387:	  state->discardCount[i]++;
    #####: 1388:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1389:	}
        -: 1390:      }
    #####: 1391:      return 0;
        -: 1392:		
        -: 1393:    case treasure_map:
        -: 1394:      //search hand for another treasure_map
    #####: 1395:      index = -1;
    #####: 1396:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1397:	{
    #####: 1398:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1399:	    {
    #####: 1400:	      index = i;
    #####: 1401:	      break;
        -: 1402:	    }
        -: 1403:	}
    #####: 1404:      if (index > -1)
        -: 1405:	{
        -: 1406:	  //trash both treasure cards
    #####: 1407:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1408:	  discardCard(index, currentPlayer, state, 1);
        -: 1409:
        -: 1410:	  //gain 4 Gold cards
    #####: 1411:	  for (i = 0; i < 4; i++)
        -: 1412:	    {
    #####: 1413:	      gainCard(gold, state, 1, currentPlayer);
        -: 1414:	    }
        -: 1415:				
        -: 1416:	  //return success
    #####: 1417:	  return 1;
        -: 1418:	}
        -: 1419:			
        -: 1420:      //no second treasure_map found in hand
    #####: 1421:      return -1;
        -: 1422:    }
        -: 1423:	
    #####: 1424:  return -1;
        -: 1425:}
        -: 1426:
        -: 1427:/********** END of cardEffct **********/
        -: 1428:
    #####: 1429:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1430:{
        -: 1431:	
        -: 1432:  //if card is not trashed, added to Played pile 
    #####: 1433:  if (trashFlag < 1)
        -: 1434:    {
        -: 1435:      //add card to played pile
    #####: 1436:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1437:      state->playedCardCount++;
        -: 1438:    }
        -: 1439:	
        -: 1440:  //set played card to -1
    #####: 1441:  state->hand[currentPlayer][handPos] = -1;
        -: 1442:	
        -: 1443:  //remove card from player's hand
    #####: 1444:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1445:    {
        -: 1446:      //reduce number of cards in hand
    #####: 1447:      state->handCount[currentPlayer]--;
        -: 1448:    }
    #####: 1449:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1450:    {
        -: 1451:      //reduce number of cards in hand
    #####: 1452:      state->handCount[currentPlayer]--;
        -: 1453:    }
        -: 1454:  else 	
        -: 1455:    {
        -: 1456:      //replace discarded card with last card in hand
    #####: 1457:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1458:      //set last card to -1
    #####: 1459:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1460:      //reduce number of cards in hand
    #####: 1461:      state->handCount[currentPlayer]--;
        -: 1462:    }
        -: 1463:	
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
    #####: 1467:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1468:{
        -: 1469:  //Note: supplyPos is enum of choosen card
        -: 1470:	
        -: 1471:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1472:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1473:    {
    #####: 1474:      return -1;
        -: 1475:    }
        -: 1476:	
        -: 1477:  //added card for [whoseTurn] current player:
        -: 1478:  // toFlag = 0 : add to discard
        -: 1479:  // toFlag = 1 : add to deck
        -: 1480:  // toFlag = 2 : add to hand
        -: 1481:
    #####: 1482:  if (toFlag == 1)
        -: 1483:    {
    #####: 1484:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1485:      state->deckCount[player]++;
        -: 1486:    }
    #####: 1487:  else if (toFlag == 2)
        -: 1488:    {
    #####: 1489:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1490:      state->handCount[player]++;
        -: 1491:    }
        -: 1492:  else
        -: 1493:    {
    #####: 1494:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1495:      state->discardCount[player]++;
        -: 1496:    }
        -: 1497:	
        -: 1498:  //decrease number in supply pile
    #####: 1499:  state->supplyCount[supplyPos]--;
        -: 1500:	 
    #####: 1501:  return 0;
        -: 1502:}
        -: 1503:
        -: 1504:/***** Use this function for Unit test 2 *****/
       90: 1505:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1506:{
        -: 1507:  int i;
        -: 1508:	
        -: 1509:  //reset coin count
       90: 1510:  state->coins = 0;
        -: 1511:
        -: 1512:  //add coins for each Treasure card in player's hand
      540: 1513:  for (i = 0; i < state->handCount[player]; i++)
        -: 1514:    {
      450: 1515:      if (state->hand[player][i] == copper)
        -: 1516:	{
      360: 1517:	  state->coins += 1;
        -: 1518:	}
       90: 1519:      else if (state->hand[player][i] == silver)
        -: 1520:	{
    #####: 1521:	  state->coins += 2;
        -: 1522:	}
       90: 1523:      else if (state->hand[player][i] == gold)
        -: 1524:	{
    #####: 1525:	  state->coins += 3;
        -: 1526:	}	
        -: 1527:    }	
        -: 1528:
        -: 1529:  //add bonus
       90: 1530:  state->coins += bonus;
        -: 1531:
       90: 1532:  return 0;
        -: 1533:}
        -: 1534:
        -: 1535:
        -: 1536://end of dominion.c
        -: 1537:
TESTING compare():
Test: #1: Passed, Test: #2: Passed, Test: #3: Passed, Test: #4: Passed, Test: #5: Passed, Test: #6: Passed, Test: #7: Passed, Test: #8: Passed, Test: #9: Passed, Test: #10: Passed, 
Test: #11: Passed, Test: #12: Passed, Test: #13: Passed, Test: #14: Passed, Test: #15: Passed, Test: #16: Passed, Test: #17: Passed, Test: #18: Passed, Test: #19: Passed, Test: #20: Passed, 
Test: #21: Passed, Test: #22: Passed, Test: #23: Passed, Test: #24: Passed, Test: #25: Passed, Test: #26: Passed, Test: #27: Passed, Test: #28: Passed, Test: #29: Passed, Test: #30: Passed, 
Test: #31: Passed, Test: #32: Passed, Test: #33: Passed, Test: #34: Passed, Test: #35: Passed, Test: #36: Passed, Test: #37: Passed, Test: #38: Passed, Test: #39: Passed, Test: #40: Passed, 
Test: #41: Passed, Test: #42: Passed, Test: #43: Passed, Test: #44: Passed, Test: #45: Passed, Test: #46: Passed, Test: #47: Passed, Test: #48: Passed, Test: #49: Passed, Test: #50: Passed, 
Test: #51: Passed, Test: #52: Passed, Test: #53: Passed, Test: #54: Passed, Test: #55: Passed, Test: #56: Passed, Test: #57: Passed, Test: #58: Passed, Test: #59: Passed, Test: #60: Passed, 
Test: #61: Passed, Test: #62: Passed, Test: #63: Passed, Test: #64: Passed, Test: #65: Passed, Test: #66: Passed, Test: #67: Passed, Test: #68: Passed, Test: #69: Passed, Test: #70: Passed, 
Test: #71: Passed, Test: #72: Passed, Test: #73: Passed, Test: #74: Passed, Test: #75: Passed, Test: #76: Passed, Test: #77: Passed, Test: #78: Passed, Test: #79: Passed, Test: #80: Passed, 
Test: #81: Passed, Test: #82: Passed, Test: #83: Passed, Test: #84: Passed, Test: #85: Passed, Test: #86: Passed, Test: #87: Passed, Test: #88: Passed, Test: #89: Passed, Test: #90: Passed, 
Test: #91: Passed, Test: #92: Passed, Test: #93: Passed, Test: #94: Passed, Test: #95: Passed, Test: #96: Passed, Test: #97: Passed, Test: #98: Passed, Test: #99: Passed, Test: #100: Passed, 
Test: #101: Passed, Test: #102: Passed, Test: #103: Passed, Test: #104: Passed, Test: #105: Passed, Test: #106: Passed, Test: #107: Passed, Test: #108: Passed, Test: #109: Passed, Test: #110: Passed, 
Test: #111: Passed, Test: #112: Passed, Test: #113: Passed, Test: #114: Passed, Test: #115: Passed, Test: #116: Passed, Test: #117: Passed, Test: #118: Passed, Test: #119: Passed, Test: #120: Passed, 
Test: #121: Passed, Test: #122: Passed, Test: #123: Passed, Test: #124: Passed, Test: #125: Passed, Test: #126: Passed, Test: #127: Passed, Test: #128: Passed, Test: #129: Passed, Test: #130: Passed, 
Test: #131: Passed, Test: #132: Passed, Test: #133: Passed, Test: #134: Passed, Test: #135: Passed, Test: #136: Passed, Test: #137: Passed, Test: #138: Passed, Test: #139: Passed, Test: #140: Passed, 
Test: #141: Passed, Test: #142: Passed, Test: #143: Passed, Test: #144: Passed, Test: #145: Passed, Test: #146: Passed, Test: #147: Passed, Test: #148: Passed, Test: #149: Passed, Test: #150: Passed, 
Test: #151: Passed, Test: #152: Passed, Test: #153: Passed, Test: #154: Passed, Test: #155: Passed, Test: #156: Passed, Test: #157: Passed, Test: #158: Passed, Test: #159: Passed, Test: #160: Passed, 
Test: #161: Passed, Test: #162: Passed, Test: #163: Passed, Test: #164: Passed, Test: #165: Passed, Test: #166: Passed, Test: #167: Passed, Test: #168: Passed, Test: #169: Passed, Test: #170: Passed, 
Test: #171: Passed, Test: #172: Passed, Test: #173: Passed, Test: #174: Passed, Test: #175: Passed, Test: #176: Passed, Test: #177: Passed, Test: #178: Passed, Test: #179: Passed, Test: #180: Passed, 
Test: #181: Passed, Test: #182: Passed, Test: #183: Passed, Test: #184: Passed, Test: #185: Passed, Test: #186: Passed, Test: #187: Passed, Test: #188: Passed, Test: #189: Passed, Test: #190: Passed, 
Test: #191: Passed, Test: #192: Passed, Test: #193: Passed, Test: #194: Passed, Test: #195: Passed, Test: #196: Passed, Test: #197: Passed, Test: #198: Passed, Test: #199: Passed, Test: #200: Passed, 
Test: #201: Passed, Test: #202: Passed, Test: #203: Passed, Test: #204: Passed, Test: #205: Passed, Test: #206: Passed, Test: #207: Passed, Test: #208: Passed, Test: #209: Passed, Test: #210: Passed, 
Test: #211: Passed, Test: #212: Passed, Test: #213: Passed, Test: #214: Passed, Test: #215: Passed, Test: #216: Passed, Test: #217: Passed, Test: #218: Passed, Test: #219: Passed, Test: #220: Passed, 
Test: #221: Passed, Test: #222: Passed, Test: #223: Passed, Test: #224: Passed, Test: #225: Passed, Test: #226: Passed, Test: #227: Passed, Test: #228: Passed, Test: #229: Passed, Test: #230: Passed, 
Test: #231: Passed, Test: #232: Passed, Test: #233: Passed, Test: #234: Passed, Test: #235: Passed, Test: #236: Passed, Test: #237: Passed, Test: #238: Passed, Test: #239: Passed, Test: #240: Passed, 
Test: #241: Passed, Test: #242: Passed, Test: #243: Passed, Test: #244: Passed, Test: #245: Passed, Test: #246: Passed, Test: #247: Passed, Test: #248: Passed, Test: #249: Passed, Test: #250: Passed, 
Test: #251: Passed, Test: #252: Passed, Test: #253: Passed, Test: #254: Passed, Test: #255: Passed, Test: #256: Passed, Test: #257: Passed, Test: #258: Passed, Test: #259: Passed, Test: #260: Passed, 
Test: #261: Passed, Test: #262: Passed, Test: #263: Passed, Test: #264: Passed, Test: #265: Passed, Test: #266: Passed, Test: #267: Passed, Test: #268: Passed, Test: #269: Passed, Test: #270: Passed, 
Test: #271: Passed, Test: #272: Passed, Test: #273: Passed, Test: #274: Passed, Test: #275: Passed, Test: #276: Passed, Test: #277: Passed, Test: #278: Passed, Test: #279: Passed, Test: #280: Passed, 
Test: #281: Passed, Test: #282: Passed, Test: #283: Passed, Test: #284: Passed, Test: #285: Passed, Test: #286: Passed, Test: #287: Passed, Test: #288: Passed, Test: #289: Passed, Test: #290: Passed, 
Test: #291: Passed, Test: #292: Passed, Test: #293: Passed, Test: #294: Passed, Test: #295: Passed, Test: #296: Passed, Test: #297: Passed, Test: #298: Passed, Test: #299: Passed, Test: #300: Passed, 
Test: #301: Passed, Test: #302: Passed, Test: #303: Passed, Test: #304: Passed, Test: #305: Passed, Test: #306: Passed, Test: #307: Passed, Test: #308: Passed, Test: #309: Passed, Test: #310: Passed, 
Test: #311: Passed, Test: #312: Passed, Test: #313: Passed, Test: #314: Passed, Test: #315: Passed, Test: #316: Passed, Test: #317: Passed, Test: #318: Passed, Test: #319: Passed, Test: #320: Passed, 
Test: #321: Passed, Test: #322: Passed, Test: #323: Passed, Test: #324: Passed, Test: #325: Passed, Test: #326: Passed, Test: #327: Passed, Test: #328: Passed, Test: #329: Passed, Test: #330: Passed, 
Test: #331: Passed, Test: #332: Passed, Test: #333: Passed, Test: #334: Passed, Test: #335: Passed, Test: #336: Passed, Test: #337: Passed, Test: #338: Passed, Test: #339: Passed, Test: #340: Passed, 
Test: #341: Passed, Test: #342: Passed, Test: #343: Passed, Test: #344: Passed, Test: #345: Passed, Test: #346: Passed, Test: #347: Passed, Test: #348: Passed, Test: #349: Passed, Test: #350: Passed, 
Test: #351: Passed, Test: #352: Passed, Test: #353: Passed, Test: #354: Passed, Test: #355: Passed, Test: #356: Passed, Test: #357: Passed, Test: #358: Passed, Test: #359: Passed, Test: #360: Passed, 
Test: #361: Passed, Test: #362: Passed, Test: #363: Passed, Test: #364: Passed, Test: #365: Passed, Test: #366: Passed, Test: #367: Passed, Test: #368: Passed, Test: #369: Passed, Test: #370: Passed, 
Test: #371: Passed, Test: #372: Passed, Test: #373: Passed, Test: #374: Passed, Test: #375: Passed, Test: #376: Passed, Test: #377: Passed, Test: #378: Passed, Test: #379: Passed, Test: #380: Passed, 
Test: #381: Passed, Test: #382: Passed, Test: #383: Passed, Test: #384: Passed, Test: #385: Passed, Test: #386: Passed, Test: #387: Passed, Test: #388: Passed, Test: #389: Passed, Test: #390: Passed, 
Test: #391: Passed, Test: #392: Passed, Test: #393: Passed, Test: #394: Passed, Test: #395: Passed, Test: #396: Passed, Test: #397: Passed, Test: #398: Passed, Test: #399: Passed, Test: #400: Passed, 
Test: #401: Passed, Test: #402: Passed, Test: #403: Passed, Test: #404: Passed, Test: #405: Passed, Test: #406: Passed, Test: #407: Passed, Test: #408: Passed, Test: #409: Passed, Test: #410: Passed, 
Test: #411: Passed, Test: #412: Passed, Test: #413: Passed, Test: #414: Passed, Test: #415: Passed, Test: #416: Passed, Test: #417: Passed, Test: #418: Passed, Test: #419: Passed, Test: #420: Passed, 
Test: #421: Passed, Test: #422: Passed, Test: #423: Passed, Test: #424: Passed, Test: #425: Passed, Test: #426: Passed, Test: #427: Passed, Test: #428: Passed, Test: #429: Passed, Test: #430: Passed, 
Test: #431: Passed, Test: #432: Passed, Test: #433: Passed, Test: #434: Passed, Test: #435: Passed, Test: #436: Passed, Test: #437: Passed, Test: #438: Passed, Test: #439: Passed, Test: #440: Passed, 
Test: #441: Passed, Test: #442: Passed, Test: #443: Passed, Test: #444: Passed, Test: #445: Passed, Test: #446: Passed, Test: #447: Passed, Test: #448: Passed, Test: #449: Passed, Test: #450: Passed, 
Test: #451: Passed, Test: #452: Passed, Test: #453: Passed, Test: #454: Passed, Test: #455: Passed, Test: #456: Passed, Test: #457: Passed, Test: #458: Passed, Test: #459: Passed, Test: #460: Passed, 
Test: #461: Passed, Test: #462: Passed, Test: #463: Passed, Test: #464: Passed, Test: #465: Passed, Test: #466: Passed, Test: #467: Passed, Test: #468: Passed, Test: #469: Passed, Test: #470: Passed, 
Test: #471: Passed, Test: #472: Passed, Test: #473: Passed, Test: #474: Passed, Test: #475: Passed, Test: #476: Passed, Test: #477: Passed, Test: #478: Passed, Test: #479: Passed, Test: #480: Passed, 
Test: #481: Passed, Test: #482: Passed, Test: #483: Passed, Test: #484: Passed, Test: #485: Passed, Test: #486: Passed, Test: #487: Passed, Test: #488: Passed, Test: #489: Passed, Test: #490: Passed, 
Test: #491: Passed, Test: #492: Passed, Test: #493: Passed, Test: #494: Passed, Test: #495: Passed, Test: #496: Passed, Test: #497: Passed, Test: #498: Passed, Test: #499: Passed, Test: #500: Passed, 
Test: #501: Passed, Test: #502: Passed, Test: #503: Passed, Test: #504: Passed, Test: #505: Passed, Test: #506: Passed, Test: #507: Passed, Test: #508: Passed, Test: #509: Passed, Test: #510: Passed, 
Test: #511: Passed, Test: #512: Passed, Test: #513: Passed, Test: #514: Passed, Test: #515: Passed, Test: #516: Passed, Test: #517: Passed, Test: #518: Passed, Test: #519: Passed, Test: #520: Passed, 
Test: #521: Passed, Test: #522: Passed, Test: #523: Passed, Test: #524: Passed, Test: #525: Passed, Test: #526: Passed, Test: #527: Passed, Test: #528: Passed, Test: #529: Passed, Test: #530: Passed, 
Test: #531: Passed, Test: #532: Passed, Test: #533: Passed, Test: #534: Passed, Test: #535: Passed, Test: #536: Passed, Test: #537: Passed, Test: #538: Passed, Test: #539: Passed, Test: #540: Passed, 
Test: #541: Passed, Test: #542: Passed, Test: #543: Passed, Test: #544: Passed, Test: #545: Passed, Test: #546: Passed, Test: #547: Passed, Test: #548: Passed, Test: #549: Passed, Test: #550: Passed, 
Test: #551: Passed, Test: #552: Passed, Test: #553: Passed, Test: #554: Passed, Test: #555: Passed, Test: #556: Passed, Test: #557: Passed, Test: #558: Passed, Test: #559: Passed, Test: #560: Passed, 
Test: #561: Passed, Test: #562: Passed, Test: #563: Passed, Test: #564: Passed, Test: #565: Passed, Test: #566: Passed, Test: #567: Passed, Test: #568: Passed, Test: #569: Passed, Test: #570: Passed, 
Test: #571: Passed, Test: #572: Passed, Test: #573: Passed, Test: #574: Passed, Test: #575: Passed, Test: #576: Passed, Test: #577: Passed, Test: #578: Passed, Test: #579: Passed, Test: #580: Passed, 
Test: #581: Passed, Test: #582: Passed, Test: #583: Passed, Test: #584: Passed, Test: #585: Passed, Test: #586: Passed, Test: #587: Passed, Test: #588: Passed, Test: #589: Passed, Test: #590: Passed, 
Test: #591: Passed, Test: #592: Passed, Test: #593: Passed, Test: #594: Passed, Test: #595: Passed, Test: #596: Passed, Test: #597: Passed, Test: #598: Passed, Test: #599: Passed, Test: #600: Passed, 
Test: #601: Passed, Test: #602: Passed, Test: #603: Passed, Test: #604: Passed, Test: #605: Passed, Test: #606: Passed, Test: #607: Passed, Test: #608: Passed, Test: #609: Passed, Test: #610: Passed, 
Test: #611: Passed, Test: #612: Passed, Test: #613: Passed, Test: #614: Passed, Test: #615: Passed, Test: #616: Passed, Test: #617: Passed, Test: #618: Passed, Test: #619: Passed, Test: #620: Passed, 
Test: #621: Passed, Test: #622: Passed, Test: #623: Passed, Test: #624: Passed, Test: #625: Passed, Test: #626: Passed, Test: #627: Passed, Test: #628: Passed, Test: #629: Passed, Test: #630: Passed, 
Test: #631: Passed, Test: #632: Passed, Test: #633: Passed, Test: #634: Passed, Test: #635: Passed, Test: #636: Passed, Test: #637: Passed, Test: #638: Passed, Test: #639: Passed, Test: #640: Passed, 
Test: #641: Passed, Test: #642: Passed, Test: #643: Passed, Test: #644: Passed, Test: #645: Passed, Test: #646: Passed, Test: #647: Passed, Test: #648: Passed, Test: #649: Passed, Test: #650: Passed, 
Test: #651: Passed, Test: #652: Passed, Test: #653: Passed, Test: #654: Passed, Test: #655: Passed, Test: #656: Passed, Test: #657: Passed, Test: #658: Passed, Test: #659: Passed, Test: #660: Passed, 
Test: #661: Passed, Test: #662: Passed, Test: #663: Passed, Test: #664: Passed, Test: #665: Passed, Test: #666: Passed, Test: #667: Passed, Test: #668: Passed, Test: #669: Passed, Test: #670: Passed, 
Test: #671: Passed, Test: #672: Passed, Test: #673: Passed, Test: #674: Passed, Test: #675: Passed, Test: #676: Passed, Test: #677: Passed, Test: #678: Passed, Test: #679: Passed, Test: #680: Passed, 
Test: #681: Passed, Test: #682: Passed, Test: #683: Passed, Test: #684: Passed, Test: #685: Passed, Test: #686: Passed, Test: #687: Passed, Test: #688: Passed, Test: #689: Passed, Test: #690: Passed, 
Test: #691: Passed, Test: #692: Passed, Test: #693: Passed, Test: #694: Passed, Test: #695: Passed, Test: #696: Passed, Test: #697: Passed, Test: #698: Passed, Test: #699: Passed, Test: #700: Passed, 
Test: #701: Passed, Test: #702: Passed, Test: #703: Passed, Test: #704: Passed, Test: #705: Passed, Test: #706: Passed, Test: #707: Passed, Test: #708: Passed, Test: #709: Passed, Test: #710: Passed, 
Test: #711: Passed, Test: #712: Passed, Test: #713: Passed, Test: #714: Passed, Test: #715: Passed, Test: #716: Passed, Test: #717: Passed, Test: #718: Passed, Test: #719: Passed, Test: #720: Passed, 
Test: #721: Passed, Test: #722: Passed, Test: #723: Passed, Test: #724: Passed, Test: #725: Passed, Test: #726: Passed, Test: #727: Passed, Test: #728: Passed, Test: #729: Passed, Test: #730: Passed, 
Test: #731: Passed, Test: #732: Passed, Test: #733: Passed, Test: #734: Passed, Test: #735: Passed, Test: #736: Passed, Test: #737: Passed, Test: #738: Passed, Test: #739: Passed, Test: #740: Passed, 
Test: #741: Passed, Test: #742: Passed, Test: #743: Passed, Test: #744: Passed, Test: #745: Passed, Test: #746: Passed, Test: #747: Passed, Test: #748: Passed, Test: #749: Passed, Test: #750: Passed, 
Test: #751: Passed, Test: #752: Passed, Test: #753: Passed, Test: #754: Passed, Test: #755: Passed, Test: #756: Passed, Test: #757: Passed, Test: #758: Passed, Test: #759: Passed, Test: #760: Passed, 
Test: #761: Passed, Test: #762: Passed, Test: #763: Passed, Test: #764: Passed, Test: #765: Passed, Test: #766: Passed, Test: #767: Passed, Test: #768: Passed, Test: #769: Passed, Test: #770: Passed, 
Test: #771: Passed, Test: #772: Passed, Test: #773: Passed, Test: #774: Passed, Test: #775: Passed, Test: #776: Passed, Test: #777: Passed, Test: #778: Passed, Test: #779: Passed, Test: #780: Passed, 
Test: #781: Passed, Test: #782: Passed, Test: #783: Passed, Test: #784: Passed, Test: #785: Passed, Test: #786: Passed, Test: #787: Passed, Test: #788: Passed, Test: #789: Passed, Test: #790: Passed, 
Test: #791: Passed, Test: #792: Passed, Test: #793: Passed, Test: #794: Passed, Test: #795: Passed, Test: #796: Passed, Test: #797: Passed, Test: #798: Passed, Test: #799: Passed, Test: #800: Passed, 
Test: #801: Passed, Test: #802: Passed, Test: #803: Passed, Test: #804: Passed, Test: #805: Passed, Test: #806: Passed, Test: #807: Passed, Test: #808: Passed, Test: #809: Passed, Test: #810: Passed, 
Test: #811: Passed, Test: #812: Passed, Test: #813: Passed, Test: #814: Passed, Test: #815: Passed, Test: #816: Passed, Test: #817: Passed, Test: #818: Passed, Test: #819: Passed, Test: #820: Passed, 
Test: #821: Passed, Test: #822: Passed, Test: #823: Passed, Test: #824: Passed, Test: #825: Passed, Test: #826: Passed, Test: #827: Passed, Test: #828: Passed, Test: #829: Passed, Test: #830: Passed, 
Test: #831: Passed, Test: #832: Passed, Test: #833: Passed, Test: #834: Passed, Test: #835: Passed, Test: #836: Passed, Test: #837: Passed, Test: #838: Passed, Test: #839: Passed, Test: #840: Passed, 
Test: #841: Passed, Test: #842: Passed, Test: #843: Passed, Test: #844: Passed, Test: #845: Passed, Test: #846: Passed, Test: #847: Passed, Test: #848: Passed, Test: #849: Passed, Test: #850: Passed, 
Test: #851: Passed, Test: #852: Passed, Test: #853: Passed, Test: #854: Passed, Test: #855: Passed, Test: #856: Passed, Test: #857: Passed, Test: #858: Passed, Test: #859: Passed, Test: #860: Passed, 
Test: #861: Passed, Test: #862: Passed, Test: #863: Passed, Test: #864: Passed, Test: #865: Passed, Test: #866: Passed, Test: #867: Passed, Test: #868: Passed, Test: #869: Passed, Test: #870: Passed, 
Test: #871: Passed, Test: #872: Passed, Test: #873: Passed, Test: #874: Passed, Test: #875: Passed, Test: #876: Passed, Test: #877: Passed, Test: #878: Passed, Test: #879: Passed, Test: #880: Passed, 
Test: #881: Passed, Test: #882: Passed, Test: #883: Passed, Test: #884: Passed, Test: #885: Passed, Test: #886: Passed, Test: #887: Passed, Test: #888: Passed, Test: #889: Passed, Test: #890: Passed, 
Test: #891: Passed, Test: #892: Passed, Test: #893: Passed, Test: #894: Passed, Test: #895: Passed, Test: #896: Passed, Test: #897: Passed, Test: #898: Passed, Test: #899: Passed, Test: #900: Passed, 
Test: #901: Passed, Test: #902: Passed, Test: #903: Passed, Test: #904: Passed, Test: #905: Passed, Test: #906: Passed, Test: #907: Passed, Test: #908: Passed, Test: #909: Passed, Test: #910: Passed, 
Test: #911: Passed, Test: #912: Passed, Test: #913: Passed, Test: #914: Passed, Test: #915: Passed, Test: #916: Passed, Test: #917: Passed, Test: #918: Passed, Test: #919: Passed, Test: #920: Passed, 
Test: #921: Passed, Test: #922: Passed, Test: #923: Passed, Test: #924: Passed, Test: #925: Passed, Test: #926: Passed, Test: #927: Passed, Test: #928: Passed, Test: #929: Passed, Test: #930: Passed, 
Test: #931: Passed, Test: #932: Passed, Test: #933: Passed, Test: #934: Passed, Test: #935: Passed, Test: #936: Passed, Test: #937: Passed, Test: #938: Passed, Test: #939: Passed, Test: #940: Passed, 
Test: #941: Passed, Test: #942: Passed, Test: #943: Passed, Test: #944: Passed, Test: #945: Passed, Test: #946: Passed, Test: #947: Passed, Test: #948: Passed, Test: #949: Passed, Test: #950: Passed, 
Test: #951: Passed, Test: #952: Passed, Test: #953: Passed, Test: #954: Passed, Test: #955: Passed, Test: #956: Passed, Test: #957: Passed, Test: #958: Passed, Test: #959: Passed, Test: #960: Passed, 
Test: #961: Passed, Test: #962: Passed, Test: #963: Passed, Test: #964: Passed, Test: #965: Passed, Test: #966: Passed, Test: #967: Passed, Test: #968: Passed, Test: #969: Passed, Test: #970: Passed, 
Test: #971: Passed, Test: #972: Passed, Test: #973: Passed, Test: #974: Passed, Test: #975: Passed, Test: #976: Passed, Test: #977: Passed, Test: #978: Passed, Test: #979: Passed, Test: #980: Passed, 
Test: #981: Passed, Test: #982: Passed, Test: #983: Passed, Test: #984: Passed, Test: #985: Passed, Test: #986: Passed, Test: #987: Passed, Test: #988: Passed, Test: #989: Passed, Test: #990: Passed, 
Test: #991: Passed, Test: #992: Passed, Test: #993: Passed, Test: #994: Passed, Test: #995: Passed, Test: #996: Passed, Test: #997: Passed, Test: #998: Passed, Test: #999: Passed, Test: #1000: Passed, 
Test: #1001: Passed, Test: #1002: Passed, Test: #1003: Passed, Test: #1004: Passed, Test: #1005: Passed, Test: #1006: Passed, Test: #1007: Passed, Test: #1008: Passed, Test: #1009: Passed, Test: #1010: Passed, 
Test: #1011: Passed, Test: #1012: Passed, Test: #1013: Passed, Test: #1014: Passed, Test: #1015: Passed, Test: #1016: Passed, Test: #1017: Passed, Test: #1018: Passed, Test: #1019: Passed, Test: #1020: Passed, 
Test: #1021: Passed, Test: #1022: Passed, Test: #1023: Passed, Test: #1024: Passed, Test: #1025: Passed, Test: #1026: Passed, Test: #1027: Passed, Test: #1028: Passed, Test: #1029: Passed, Test: #1030: Passed, 
Test: #1031: Passed, Test: #1032: Passed, Test: #1033: Passed, Test: #1034: Passed, Test: #1035: Passed, Test: #1036: Passed, Test: #1037: Passed, Test: #1038: Passed, Test: #1039: Passed, Test: #1040: Passed, 
Test: #1041: Passed, Test: #1042: Passed, Test: #1043: Passed, Test: #1044: Passed, Test: #1045: Passed, Test: #1046: Passed, Test: #1047: Passed, Test: #1048: Passed, Test: #1049: Passed, Test: #1050: Passed, 
Test: #1051: Passed, Test: #1052: Passed, Test: #1053: Passed, Test: #1054: Passed, Test: #1055: Passed, Test: #1056: Passed, Test: #1057: Passed, Test: #1058: Passed, Test: #1059: Passed, Test: #1060: Passed, 
Test: #1061: Passed, Test: #1062: Passed, Test: #1063: Passed, Test: #1064: Passed, Test: #1065: Passed, Test: #1066: Passed, Test: #1067: Passed, Test: #1068: Passed, Test: #1069: Passed, Test: #1070: Passed, 
Test: #1071: Passed, Test: #1072: Passed, Test: #1073: Passed, Test: #1074: Passed, Test: #1075: Passed, Test: #1076: Passed, Test: #1077: Passed, Test: #1078: Passed, Test: #1079: Passed, Test: #1080: Passed, 
Test: #1081: Passed, Test: #1082: Passed, Test: #1083: Passed, Test: #1084: Passed, Test: #1085: Passed, Test: #1086: Passed, Test: #1087: Passed, Test: #1088: Passed, Test: #1089: Passed, Test: #1090: Passed, 
Test: #1091: Passed, Test: #1092: Passed, Test: #1093: Passed, Test: #1094: Passed, Test: #1095: Passed, Test: #1096: Passed, Test: #1097: Passed, Test: #1098: Passed, Test: #1099: Passed, Test: #1100: Passed, 
Test: #1101: Passed, Test: #1102: Passed, Test: #1103: Passed, Test: #1104: Passed, Test: #1105: Passed, Test: #1106: Passed, Test: #1107: Passed, Test: #1108: Passed, Test: #1109: Passed, Test: #1110: Passed, 
Test: #1111: Passed, Test: #1112: Passed, Test: #1113: Passed, Test: #1114: Passed, Test: #1115: Passed, Test: #1116: Passed, Test: #1117: Passed, Test: #1118: Passed, Test: #1119: Passed, Test: #1120: Passed, 
Test: #1121: Passed, Test: #1122: Passed, Test: #1123: Passed, Test: #1124: Passed, Test: #1125: Passed, Test: #1126: Passed, Test: #1127: Passed, Test: #1128: Passed, Test: #1129: Passed, Test: #1130: Passed, 
Test: #1131: Passed, Test: #1132: Passed, Test: #1133: Passed, Test: #1134: Passed, Test: #1135: Passed, Test: #1136: Passed, Test: #1137: Passed, Test: #1138: Passed, Test: #1139: Passed, Test: #1140: Passed, 
Test: #1141: Passed, Test: #1142: Passed, Test: #1143: Passed, Test: #1144: Passed, Test: #1145: Passed, Test: #1146: Passed, Test: #1147: Passed, Test: #1148: Passed, Test: #1149: Passed, Test: #1150: Passed, 
Test: #1151: Passed, Test: #1152: Passed, Test: #1153: Passed, Test: #1154: Passed, Test: #1155: Passed, Test: #1156: Passed, Test: #1157: Passed, Test: #1158: Passed, Test: #1159: Passed, Test: #1160: Passed, 
Test: #1161: Passed, Test: #1162: Passed, Test: #1163: Passed, Test: #1164: Passed, Test: #1165: Passed, Test: #1166: Passed, Test: #1167: Passed, Test: #1168: Passed, Test: #1169: Passed, Test: #1170: Passed, 
Test: #1171: Passed, Test: #1172: Passed, Test: #1173: Passed, Test: #1174: Passed, Test: #1175: Passed, Test: #1176: Passed, Test: #1177: Passed, Test: #1178: Passed, Test: #1179: Passed, Test: #1180: Passed, 
Test: #1181: Passed, Test: #1182: Passed, Test: #1183: Passed, Test: #1184: Passed, Test: #1185: Passed, Test: #1186: Passed, Test: #1187: Passed, Test: #1188: Passed, Test: #1189: Passed, Test: #1190: Passed, 
Test: #1191: Passed, Test: #1192: Passed, Test: #1193: Passed, Test: #1194: Passed, Test: #1195: Passed, Test: #1196: Passed, Test: #1197: Passed, Test: #1198: Passed, Test: #1199: Passed, Test: #1200: Passed, 
Test: #1201: Passed, Test: #1202: Passed, Test: #1203: Passed, Test: #1204: Passed, Test: #1205: Passed, Test: #1206: Passed, Test: #1207: Passed, Test: #1208: Passed, Test: #1209: Passed, Test: #1210: Passed, 
Test: #1211: Passed, Test: #1212: Passed, Test: #1213: Passed, Test: #1214: Passed, Test: #1215: Passed, Test: #1216: Passed, Test: #1217: Passed, Test: #1218: Passed, Test: #1219: Passed, Test: #1220: Passed, 
Test: #1221: Passed, Test: #1222: Passed, Test: #1223: Passed, Test: #1224: Passed, Test: #1225: Passed, Test: #1226: Passed, Test: #1227: Passed, Test: #1228: Passed, Test: #1229: Passed, Test: #1230: Passed, 
Test: #1231: Passed, Test: #1232: Passed, Test: #1233: Passed, Test: #1234: Passed, Test: #1235: Passed, Test: #1236: Passed, Test: #1237: Passed, Test: #1238: Passed, Test: #1239: Passed, Test: #1240: Passed, 
Test: #1241: Passed, Test: #1242: Passed, Test: #1243: Passed, Test: #1244: Passed, Test: #1245: Passed, Test: #1246: Passed, Test: #1247: Passed, Test: #1248: Passed, Test: #1249: Passed, Test: #1250: Passed, 
Test: #1251: Passed, Test: #1252: Passed, Test: #1253: Passed, Test: #1254: Passed, Test: #1255: Passed, Test: #1256: Passed, Test: #1257: Passed, Test: #1258: Passed, Test: #1259: Passed, Test: #1260: Passed, 
Test: #1261: Passed, Test: #1262: Passed, Test: #1263: Passed, Test: #1264: Passed, Test: #1265: Passed, Test: #1266: Passed, Test: #1267: Passed, Test: #1268: Passed, Test: #1269: Passed, Test: #1270: Passed, 
Test: #1271: Passed, Test: #1272: Passed, Test: #1273: Passed, Test: #1274: Passed, Test: #1275: Passed, Test: #1276: Passed, Test: #1277: Passed, Test: #1278: Passed, Test: #1279: Passed, Test: #1280: Passed, 
Test: #1281: Passed, Test: #1282: Passed, Test: #1283: Passed, Test: #1284: Passed, Test: #1285: Passed, Test: #1286: Passed, Test: #1287: Passed, Test: #1288: Passed, Test: #1289: Passed, Test: #1290: Passed, 
Test: #1291: Passed, Test: #1292: Passed, Test: #1293: Passed, Test: #1294: Passed, Test: #1295: Passed, Test: #1296: Passed, Test: #1297: Passed, Test: #1298: Passed, Test: #1299: Passed, Test: #1300: Passed, 
Test: #1301: Passed, Test: #1302: Passed, Test: #1303: Passed, Test: #1304: Passed, Test: #1305: Passed, Test: #1306: Passed, Test: #1307: Passed, Test: #1308: Passed, Test: #1309: Passed, Test: #1310: Passed, 
Test: #1311: Passed, Test: #1312: Passed, Test: #1313: Passed, Test: #1314: Passed, Test: #1315: Passed, Test: #1316: Passed, Test: #1317: Passed, Test: #1318: Passed, Test: #1319: Passed, Test: #1320: Passed, 
Test: #1321: Passed, Test: #1322: Passed, Test: #1323: Passed, Test: #1324: Passed, Test: #1325: Passed, Test: #1326: Passed, Test: #1327: Passed, Test: #1328: Passed, Test: #1329: Passed, Test: #1330: Passed, 
Test: #1331: Passed, Test: #1332: Passed, Test: #1333: Passed, Test: #1334: Passed, Test: #1335: Passed, Test: #1336: Passed, Test: #1337: Passed, Test: #1338: Passed, Test: #1339: Passed, Test: #1340: Passed, 
Test: #1341: Passed, Test: #1342: Passed, Test: #1343: Passed, Test: #1344: Passed, Test: #1345: Passed, Test: #1346: Passed, Test: #1347: Passed, Test: #1348: Passed, Test: #1349: Passed, Test: #1350: Passed, 
Test: #1351: Passed, Test: #1352: Passed, Test: #1353: Passed, Test: #1354: Passed, Test: #1355: Passed, Test: #1356: Passed, Test: #1357: Passed, Test: #1358: Passed, Test: #1359: Passed, Test: #1360: Passed, 
Test: #1361: Passed, Test: #1362: Passed, Test: #1363: Passed, Test: #1364: Passed, Test: #1365: Passed, Test: #1366: Passed, Test: #1367: Passed, Test: #1368: Passed, Test: #1369: Passed, Test: #1370: Passed, 
Test: #1371: Passed, Test: #1372: Passed, Test: #1373: Passed, Test: #1374: Passed, Test: #1375: Passed, Test: #1376: Passed, Test: #1377: Passed, Test: #1378: Passed, Test: #1379: Passed, Test: #1380: Passed, 
Test: #1381: Passed, Test: #1382: Passed, Test: #1383: Passed, Test: #1384: Passed, Test: #1385: Passed, Test: #1386: Passed, Test: #1387: Passed, Test: #1388: Passed, Test: #1389: Passed, Test: #1390: Passed, 
Test: #1391: Passed, Test: #1392: Passed, Test: #1393: Passed, Test: #1394: Passed, Test: #1395: Passed, Test: #1396: Passed, Test: #1397: Passed, Test: #1398: Passed, Test: #1399: Passed, Test: #1400: Passed, 
Test: #1401: Passed, Test: #1402: Passed, Test: #1403: Passed, Test: #1404: Passed, Test: #1405: Passed, Test: #1406: Passed, Test: #1407: Passed, Test: #1408: Passed, Test: #1409: Passed, Test: #1410: Passed, 
Test: #1411: Passed, Test: #1412: Passed, Test: #1413: Passed, Test: #1414: Passed, Test: #1415: Passed, Test: #1416: Passed, Test: #1417: Passed, Test: #1418: Passed, Test: #1419: Passed, Test: #1420: Passed, 
Test: #1421: Passed, Test: #1422: Passed, Test: #1423: Passed, Test: #1424: Passed, Test: #1425: Passed, Test: #1426: Passed, Test: #1427: Passed, Test: #1428: Passed, Test: #1429: Passed, Test: #1430: Passed, 
Test: #1431: Passed, Test: #1432: Passed, Test: #1433: Passed, Test: #1434: Passed, Test: #1435: Passed, Test: #1436: Passed, Test: #1437: Passed, Test: #1438: Passed, Test: #1439: Passed, Test: #1440: Passed, 
Test: #1441: Passed, Test: #1442: Passed, Test: #1443: Passed, Test: #1444: Passed, Test: #1445: Passed, Test: #1446: Passed, Test: #1447: Passed, Test: #1448: Passed, Test: #1449: Passed, Test: #1450: Passed, 
Test: #1451: Passed, Test: #1452: Passed, Test: #1453: Passed, Test: #1454: Passed, Test: #1455: Passed, Test: #1456: Passed, Test: #1457: Passed, Test: #1458: Passed, Test: #1459: Passed, Test: #1460: Passed, 
Test: #1461: Passed, Test: #1462: Passed, Test: #1463: Passed, Test: #1464: Passed, Test: #1465: Passed, Test: #1466: Passed, Test: #1467: Passed, Test: #1468: Passed, Test: #1469: Passed, Test: #1470: Passed, 
Test: #1471: Passed, Test: #1472: Passed, Test: #1473: Passed, Test: #1474: Passed, Test: #1475: Passed, Test: #1476: Passed, Test: #1477: Passed, Test: #1478: Passed, Test: #1479: Passed, Test: #1480: Passed, 
Test: #1481: Passed, Test: #1482: Passed, Test: #1483: Passed, Test: #1484: Passed, Test: #1485: Passed, Test: #1486: Passed, Test: #1487: Passed, Test: #1488: Passed, Test: #1489: Passed, Test: #1490: Passed, 
Test: #1491: Passed, Test: #1492: Passed, Test: #1493: Passed, Test: #1494: Passed, Test: #1495: Passed, Test: #1496: Passed, Test: #1497: Passed, Test: #1498: Passed, Test: #1499: Passed, Test: #1500: Passed, 
Test: #1501: Passed, Test: #1502: Passed, Test: #1503: Passed, Test: #1504: Passed, Test: #1505: Passed, Test: #1506: Passed, Test: #1507: Passed, Test: #1508: Passed, Test: #1509: Passed, Test: #1510: Passed, 
Test: #1511: Passed, Test: #1512: Passed, Test: #1513: Passed, Test: #1514: Passed, Test: #1515: Passed, Test: #1516: Passed, Test: #1517: Passed, Test: #1518: Passed, Test: #1519: Passed, Test: #1520: Passed, 
Test: #1521: Passed, Test: #1522: Passed, Test: #1523: Passed, Test: #1524: Passed, Test: #1525: Passed, Test: #1526: Passed, Test: #1527: Passed, Test: #1528: Passed, Test: #1529: Passed, Test: #1530: Passed, 
Test: #1531: Passed, Test: #1532: Passed, Test: #1533: Passed, Test: #1534: Passed, Test: #1535: Passed, Test: #1536: Passed, Test: #1537: Passed, Test: #1538: Passed, Test: #1539: Passed, Test: #1540: Passed, 
Test: #1541: Passed, Test: #1542: Passed, Test: #1543: Passed, Test: #1544: Passed, Test: #1545: Passed, Test: #1546: Passed, Test: #1547: Passed, Test: #1548: Passed, Test: #1549: Passed, Test: #1550: Passed, 
Test: #1551: Passed, Test: #1552: Passed, Test: #1553: Passed, Test: #1554: Passed, Test: #1555: Passed, Test: #1556: Passed, Test: #1557: Passed, Test: #1558: Passed, Test: #1559: Passed, Test: #1560: Passed, 
Test: #1561: Passed, Test: #1562: Passed, Test: #1563: Passed, Test: #1564: Passed, Test: #1565: Passed, Test: #1566: Passed, Test: #1567: Passed, Test: #1568: Passed, Test: #1569: Passed, Test: #1570: Passed, 
Test: #1571: Passed, Test: #1572: Passed, Test: #1573: Passed, Test: #1574: Passed, Test: #1575: Passed, Test: #1576: Passed, Test: #1577: Passed, Test: #1578: Passed, Test: #1579: Passed, Test: #1580: Passed, 
Test: #1581: Passed, Test: #1582: Passed, Test: #1583: Passed, Test: #1584: Passed, Test: #1585: Passed, Test: #1586: Passed, Test: #1587: Passed, Test: #1588: Passed, Test: #1589: Passed, Test: #1590: Passed, 
Test: #1591: Passed, Test: #1592: Passed, Test: #1593: Passed, Test: #1594: Passed, Test: #1595: Passed, Test: #1596: Passed, Test: #1597: Passed, Test: #1598: Passed, Test: #1599: Passed, Test: #1600: Passed, 
Test: #1601: Passed, Test: #1602: Passed, Test: #1603: Passed, Test: #1604: Passed, Test: #1605: Passed, Test: #1606: Passed, Test: #1607: Passed, Test: #1608: Passed, Test: #1609: Passed, Test: #1610: Passed, 
Test: #1611: Passed, Test: #1612: Passed, Test: #1613: Passed, Test: #1614: Passed, Test: #1615: Passed, Test: #1616: Passed, Test: #1617: Passed, Test: #1618: Passed, Test: #1619: Passed, Test: #1620: Passed, 
Test: #1621: Passed, Test: #1622: Passed, Test: #1623: Passed, Test: #1624: Passed, Test: #1625: Passed, Test: #1626: Passed, Test: #1627: Passed, Test: #1628: Passed, Test: #1629: Passed, Test: #1630: Passed, 
Test: #1631: Passed, Test: #1632: Passed, Test: #1633: Passed, Test: #1634: Passed, Test: #1635: Passed, Test: #1636: Passed, Test: #1637: Passed, Test: #1638: Passed, Test: #1639: Passed, Test: #1640: Passed, 
Test: #1641: Passed, Test: #1642: Passed, Test: #1643: Passed, Test: #1644: Passed, Test: #1645: Passed, Test: #1646: Passed, Test: #1647: Passed, Test: #1648: Passed, Test: #1649: Passed, Test: #1650: Passed, 
Test: #1651: Passed, Test: #1652: Passed, Test: #1653: Passed, Test: #1654: Passed, Test: #1655: Passed, Test: #1656: Passed, Test: #1657: Passed, Test: #1658: Passed, Test: #1659: Passed, Test: #1660: Passed, 
Test: #1661: Passed, Test: #1662: Passed, Test: #1663: Passed, Test: #1664: Passed, Test: #1665: Passed, Test: #1666: Passed, Test: #1667: Passed, Test: #1668: Passed, Test: #1669: Passed, Test: #1670: Passed, 
Test: #1671: Passed, Test: #1672: Passed, Test: #1673: Passed, Test: #1674: Passed, Test: #1675: Passed, Test: #1676: Passed, Test: #1677: Passed, Test: #1678: Passed, Test: #1679: Passed, Test: #1680: Passed, 
Test: #1681: Passed, Test: #1682: Passed, Test: #1683: Passed, Test: #1684: Passed, Test: #1685: Passed, Test: #1686: Passed, Test: #1687: Passed, Test: #1688: Passed, Test: #1689: Passed, Test: #1690: Passed, 
Test: #1691: Passed, Test: #1692: Passed, Test: #1693: Passed, Test: #1694: Passed, Test: #1695: Passed, Test: #1696: Passed, Test: #1697: Passed, Test: #1698: Passed, Test: #1699: Passed, Test: #1700: Passed, 
Test: #1701: Passed, Test: #1702: Passed, Test: #1703: Passed, Test: #1704: Passed, Test: #1705: Passed, Test: #1706: Passed, Test: #1707: Passed, Test: #1708: Passed, Test: #1709: Passed, Test: #1710: Passed, 
Test: #1711: Passed, Test: #1712: Passed, Test: #1713: Passed, Test: #1714: Passed, Test: #1715: Passed, Test: #1716: Passed, Test: #1717: Passed, Test: #1718: Passed, Test: #1719: Passed, Test: #1720: Passed, 
Test: #1721: Passed, Test: #1722: Passed, Test: #1723: Passed, Test: #1724: Passed, Test: #1725: Passed, Test: #1726: Passed, Test: #1727: Passed, Test: #1728: Passed, Test: #1729: Passed, Test: #1730: Passed, 
Test: #1731: Passed, Test: #1732: Passed, Test: #1733: Passed, Test: #1734: Passed, Test: #1735: Passed, Test: #1736: Passed, Test: #1737: Passed, Test: #1738: Passed, Test: #1739: Passed, Test: #1740: Passed, 
Test: #1741: Passed, Test: #1742: Passed, Test: #1743: Passed, Test: #1744: Passed, Test: #1745: Passed, Test: #1746: Passed, Test: #1747: Passed, Test: #1748: Passed, Test: #1749: Passed, Test: #1750: Passed, 
Test: #1751: Passed, Test: #1752: Passed, Test: #1753: Passed, Test: #1754: Passed, Test: #1755: Passed, Test: #1756: Passed, Test: #1757: Passed, Test: #1758: Passed, Test: #1759: Passed, Test: #1760: Passed, 
Test: #1761: Passed, Test: #1762: Passed, Test: #1763: Passed, Test: #1764: Passed, Test: #1765: Passed, Test: #1766: Passed, Test: #1767: Passed, Test: #1768: Passed, Test: #1769: Passed, Test: #1770: Passed, 
Test: #1771: Passed, Test: #1772: Passed, Test: #1773: Passed, Test: #1774: Passed, Test: #1775: Passed, Test: #1776: Passed, Test: #1777: Passed, Test: #1778: Passed, Test: #1779: Passed, Test: #1780: Passed, 
Test: #1781: Passed, Test: #1782: Passed, Test: #1783: Passed, Test: #1784: Passed, Test: #1785: Passed, Test: #1786: Passed, Test: #1787: Passed, Test: #1788: Passed, Test: #1789: Passed, Test: #1790: Passed, 
Test: #1791: Passed, Test: #1792: Passed, Test: #1793: Passed, Test: #1794: Passed, Test: #1795: Passed, Test: #1796: Passed, Test: #1797: Passed, Test: #1798: Passed, Test: #1799: Passed, Test: #1800: Passed, 
Test: #1801: Passed, Test: #1802: Passed, Test: #1803: Passed, Test: #1804: Passed, Test: #1805: Passed, Test: #1806: Passed, Test: #1807: Passed, Test: #1808: Passed, Test: #1809: Passed, Test: #1810: Passed, 
Test: #1811: Passed, Test: #1812: Passed, Test: #1813: Passed, Test: #1814: Passed, Test: #1815: Passed, Test: #1816: Passed, Test: #1817: Passed, Test: #1818: Passed, Test: #1819: Passed, Test: #1820: Passed, 
Test: #1821: Passed, Test: #1822: Passed, Test: #1823: Passed, Test: #1824: Passed, Test: #1825: Passed, Test: #1826: Passed, Test: #1827: Passed, Test: #1828: Passed, Test: #1829: Passed, Test: #1830: Passed, 
Test: #1831: Passed, Test: #1832: Passed, Test: #1833: Passed, Test: #1834: Passed, Test: #1835: Passed, Test: #1836: Passed, Test: #1837: Passed, Test: #1838: Passed, Test: #1839: Passed, Test: #1840: Passed, 
Test: #1841: Passed, Test: #1842: Passed, Test: #1843: Passed, Test: #1844: Passed, Test: #1845: Passed, Test: #1846: Passed, Test: #1847: Passed, Test: #1848: Passed, Test: #1849: Passed, Test: #1850: Passed, 
Test: #1851: Passed, Test: #1852: Passed, Test: #1853: Passed, Test: #1854: Passed, Test: #1855: Passed, Test: #1856: Passed, Test: #1857: Passed, Test: #1858: Passed, Test: #1859: Passed, Test: #1860: Passed, 
Test: #1861: Passed, Test: #1862: Passed, Test: #1863: Passed, Test: #1864: Passed, Test: #1865: Passed, Test: #1866: Passed, Test: #1867: Passed, Test: #1868: Passed, Test: #1869: Passed, Test: #1870: Passed, 
Test: #1871: Passed, Test: #1872: Passed, Test: #1873: Passed, Test: #1874: Passed, Test: #1875: Passed, Test: #1876: Passed, Test: #1877: Passed, Test: #1878: Passed, Test: #1879: Passed, Test: #1880: Passed, 
Test: #1881: Passed, Test: #1882: Passed, Test: #1883: Passed, Test: #1884: Passed, Test: #1885: Passed, Test: #1886: Passed, Test: #1887: Passed, Test: #1888: Passed, Test: #1889: Passed, Test: #1890: Passed, 
Test: #1891: Passed, Test: #1892: Passed, Test: #1893: Passed, Test: #1894: Passed, Test: #1895: Passed, Test: #1896: Passed, Test: #1897: Passed, Test: #1898: Passed, Test: #1899: Passed, Test: #1900: Passed, 
Test: #1901: Passed, Test: #1902: Passed, Test: #1903: Passed, Test: #1904: Passed, Test: #1905: Passed, Test: #1906: Passed, Test: #1907: Passed, Test: #1908: Passed, Test: #1909: Passed, Test: #1910: Passed, 
Test: #1911: Passed, Test: #1912: Passed, Test: #1913: Passed, Test: #1914: Passed, Test: #1915: Passed, Test: #1916: Passed, Test: #1917: Passed, Test: #1918: Passed, Test: #1919: Passed, Test: #1920: Passed, 
Test: #1921: Passed, Test: #1922: Passed, Test: #1923: Passed, Test: #1924: Passed, Test: #1925: Passed, Test: #1926: Passed, Test: #1927: Passed, Test: #1928: Passed, Test: #1929: Passed, Test: #1930: Passed, 
Test: #1931: Passed, Test: #1932: Passed, Test: #1933: Passed, Test: #1934: Passed, Test: #1935: Passed, Test: #1936: Passed, Test: #1937: Passed, Test: #1938: Passed, Test: #1939: Passed, Test: #1940: Passed, 
Test: #1941: Passed, Test: #1942: Passed, Test: #1943: Passed, Test: #1944: Passed, Test: #1945: Passed, Test: #1946: Passed, Test: #1947: Passed, Test: #1948: Passed, Test: #1949: Passed, Test: #1950: Passed, 
Test: #1951: Passed, Test: #1952: Passed, Test: #1953: Passed, Test: #1954: Passed, Test: #1955: Passed, Test: #1956: Passed, Test: #1957: Passed, Test: #1958: Passed, Test: #1959: Passed, Test: #1960: Passed, 
Test: #1961: Passed, Test: #1962: Passed, Test: #1963: Passed, Test: #1964: Passed, Test: #1965: Passed, Test: #1966: Passed, Test: #1967: Passed, Test: #1968: Passed, Test: #1969: Passed, Test: #1970: Passed, 
Test: #1971: Passed, Test: #1972: Passed, Test: #1973: Passed, Test: #1974: Passed, Test: #1975: Passed, Test: #1976: Passed, Test: #1977: Passed, Test: #1978: Passed, Test: #1979: Passed, Test: #1980: Passed, 
Test: #1981: Passed, Test: #1982: Passed, Test: #1983: Passed, Test: #1984: Passed, Test: #1985: Passed, Test: #1986: Passed, Test: #1987: Passed, Test: #1988: Passed, Test: #1989: Passed, Test: #1990: Passed, 
Test: #1991: Passed, Test: #1992: Passed, Test: #1993: Passed, Test: #1994: Passed, Test: #1995: Passed, Test: #1996: Passed, Test: #1997: Passed, Test: #1998: Passed, Test: #1999: Passed, Test: #2000: Passed, 
Test: #2001: Passed, Test: #2002: Passed, Test: #2003: Passed, Test: #2004: Passed, Test: #2005: Passed, Test: #2006: Passed, Test: #2007: Passed, Test: #2008: Passed, Test: #2009: Passed, Test: #2010: Passed, 
Test: #2011: Passed, Test: #2012: Passed, Test: #2013: Passed, Test: #2014: Passed, Test: #2015: Passed, Test: #2016: Passed, Test: #2017: Passed, Test: #2018: Passed, Test: #2019: Passed, Test: #2020: Passed, 
Test: #2021: Passed, Test: #2022: Passed, Test: #2023: Passed, Test: #2024: Passed, Test: #2025: Passed, Test: #2026: Passed, Test: #2027: Passed, Test: #2028: Passed, Test: #2029: Passed, Test: #2030: Passed, 
Test: #2031: Passed, Test: #2032: Passed, Test: #2033: Passed, Test: #2034: Passed, Test: #2035: Passed, Test: #2036: Passed, Test: #2037: Passed, Test: #2038: Passed, Test: #2039: Passed, Test: #2040: Passed, 
Test: #2041: Passed, Test: #2042: Passed, Test: #2043: Passed, Test: #2044: Passed, Test: #2045: Passed, Test: #2046: Passed, Test: #2047: Passed, Test: #2048: Passed, Test: #2049: Passed, Test: #2050: Passed, 
Test: #2051: Passed, Test: #2052: Passed, Test: #2053: Passed, Test: #2054: Passed, Test: #2055: Passed, Test: #2056: Passed, Test: #2057: Passed, Test: #2058: Passed, Test: #2059: Passed, Test: #2060: Passed, 
Test: #2061: Passed, Test: #2062: Passed, Test: #2063: Passed, Test: #2064: Passed, Test: #2065: Passed, Test: #2066: Passed, Test: #2067: Passed, Test: #2068: Passed, Test: #2069: Passed, Test: #2070: Passed, 
Test: #2071: Passed, Test: #2072: Passed, Test: #2073: Passed, Test: #2074: Passed, Test: #2075: Passed, Test: #2076: Passed, Test: #2077: Passed, Test: #2078: Passed, Test: #2079: Passed, Test: #2080: Passed, 
Test: #2081: Passed, Test: #2082: Passed, Test: #2083: Passed, Test: #2084: Passed, Test: #2085: Passed, Test: #2086: Passed, Test: #2087: Passed, Test: #2088: Passed, Test: #2089: Passed, Test: #2090: Passed, 
Test: #2091: Passed, Test: #2092: Passed, Test: #2093: Passed, Test: #2094: Passed, Test: #2095: Passed, Test: #2096: Passed, Test: #2097: Passed, Test: #2098: Passed, Test: #2099: Passed, Test: #2100: Passed, 
Test: #2101: Passed, Test: #2102: Passed, Test: #2103: Passed, Test: #2104: Passed, Test: #2105: Passed, Test: #2106: Passed, Test: #2107: Passed, Test: #2108: Passed, Test: #2109: Passed, Test: #2110: Passed, 
Test: #2111: Passed, Test: #2112: Passed, Test: #2113: Passed, Test: #2114: Passed, Test: #2115: Passed, Test: #2116: Passed, Test: #2117: Passed, Test: #2118: Passed, Test: #2119: Passed, Test: #2120: Passed, 
Test: #2121: Passed, Test: #2122: Passed, Test: #2123: Passed, Test: #2124: Passed, Test: #2125: Passed, Test: #2126: Passed, Test: #2127: Passed, Test: #2128: Passed, Test: #2129: Passed, Test: #2130: Passed, 
Test: #2131: Passed, Test: #2132: Passed, Test: #2133: Passed, Test: #2134: Passed, Test: #2135: Passed, Test: #2136: Passed, Test: #2137: Passed, Test: #2138: Passed, Test: #2139: Passed, Test: #2140: Passed, 
Test: #2141: Passed, Test: #2142: Passed, Test: #2143: Passed, Test: #2144: Passed, Test: #2145: Passed, Test: #2146: Passed, Test: #2147: Passed, Test: #2148: Passed, Test: #2149: Passed, Test: #2150: Passed, 
Test: #2151: Passed, Test: #2152: Passed, Test: #2153: Passed, Test: #2154: Passed, Test: #2155: Passed, Test: #2156: Passed, Test: #2157: Passed, Test: #2158: Passed, Test: #2159: Passed, Test: #2160: Passed, 
Test: #2161: Passed, Test: #2162: Passed, Test: #2163: Passed, Test: #2164: Passed, Test: #2165: Passed, Test: #2166: Passed, Test: #2167: Passed, Test: #2168: Passed, Test: #2169: Passed, Test: #2170: Passed, 
Test: #2171: Passed, Test: #2172: Passed, Test: #2173: Passed, Test: #2174: Passed, Test: #2175: Passed, Test: #2176: Passed, Test: #2177: Passed, Test: #2178: Passed, Test: #2179: Passed, Test: #2180: Passed, 
Test: #2181: Passed, Test: #2182: Passed, Test: #2183: Passed, Test: #2184: Passed, Test: #2185: Passed, Test: #2186: Passed, Test: #2187: Passed, Test: #2188: Passed, Test: #2189: Passed, Test: #2190: Passed, 
Test: #2191: Passed, Test: #2192: Passed, Test: #2193: Passed, Test: #2194: Passed, Test: #2195: Passed, Test: #2196: Passed, Test: #2197: Passed, Test: #2198: Passed, Test: #2199: Passed, Test: #2200: Passed, 
Test: #2201: Passed, Test: #2202: Passed, Test: #2203: Passed, Test: #2204: Passed, Test: #2205: Passed, Test: #2206: Passed, Test: #2207: Passed, Test: #2208: Passed, Test: #2209: Passed, Test: #2210: Passed, 
Test: #2211: Passed, Test: #2212: Passed, Test: #2213: Passed, Test: #2214: Passed, Test: #2215: Passed, Test: #2216: Passed, Test: #2217: Passed, Test: #2218: Passed, Test: #2219: Passed, Test: #2220: Passed, 
Test: #2221: Passed, Test: #2222: Passed, Test: #2223: Passed, Test: #2224: Passed, Test: #2225: Passed, Test: #2226: Passed, Test: #2227: Passed, Test: #2228: Passed, Test: #2229: Passed, Test: #2230: Passed, 
Test: #2231: Passed, Test: #2232: Passed, Test: #2233: Passed, Test: #2234: Passed, Test: #2235: Passed, Test: #2236: Passed, Test: #2237: Passed, Test: #2238: Passed, Test: #2239: Passed, Test: #2240: Passed, 
Test: #2241: Passed, Test: #2242: Passed, Test: #2243: Passed, Test: #2244: Passed, Test: #2245: Passed, Test: #2246: Passed, Test: #2247: Passed, Test: #2248: Passed, Test: #2249: Passed, Test: #2250: Passed, 
Test: #2251: Passed, Test: #2252: Passed, Test: #2253: Passed, Test: #2254: Passed, Test: #2255: Passed, Test: #2256: Passed, Test: #2257: Passed, Test: #2258: Passed, Test: #2259: Passed, Test: #2260: Passed, 
Test: #2261: Passed, Test: #2262: Passed, Test: #2263: Passed, Test: #2264: Passed, Test: #2265: Passed, Test: #2266: Passed, Test: #2267: Passed, Test: #2268: Passed, Test: #2269: Passed, Test: #2270: Passed, 
Test: #2271: Passed, Test: #2272: Passed, Test: #2273: Passed, Test: #2274: Passed, Test: #2275: Passed, Test: #2276: Passed, Test: #2277: Passed, Test: #2278: Passed, Test: #2279: Passed, Test: #2280: Passed, 
Test: #2281: Passed, Test: #2282: Passed, Test: #2283: Passed, Test: #2284: Passed, Test: #2285: Passed, Test: #2286: Passed, Test: #2287: Passed, Test: #2288: Passed, Test: #2289: Passed, Test: #2290: Passed, 
Test: #2291: Passed, Test: #2292: Passed, Test: #2293: Passed, Test: #2294: Passed, Test: #2295: Passed, Test: #2296: Passed, Test: #2297: Passed, Test: #2298: Passed, Test: #2299: Passed, Test: #2300: Passed, 
Test: #2301: Passed, Test: #2302: Passed, Test: #2303: Passed, Test: #2304: Passed, Test: #2305: Passed, Test: #2306: Passed, Test: #2307: Passed, Test: #2308: Passed, Test: #2309: Passed, Test: #2310: Passed, 
Test: #2311: Passed, Test: #2312: Passed, Test: #2313: Passed, Test: #2314: Passed, Test: #2315: Passed, Test: #2316: Passed, Test: #2317: Passed, Test: #2318: Passed, Test: #2319: Passed, Test: #2320: Passed, 
Test: #2321: Passed, Test: #2322: Passed, Test: #2323: Passed, Test: #2324: Passed, Test: #2325: Passed, Test: #2326: Passed, Test: #2327: Passed, Test: #2328: Passed, Test: #2329: Passed, Test: #2330: Passed, 
Test: #2331: Passed, Test: #2332: Passed, Test: #2333: Passed, Test: #2334: Passed, Test: #2335: Passed, Test: #2336: Passed, Test: #2337: Passed, Test: #2338: Passed, Test: #2339: Passed, Test: #2340: Passed, 
Test: #2341: Passed, Test: #2342: Passed, Test: #2343: Passed, Test: #2344: Passed, Test: #2345: Passed, Test: #2346: Passed, Test: #2347: Passed, Test: #2348: Passed, Test: #2349: Passed, Test: #2350: Passed, 
Test: #2351: Passed, Test: #2352: Passed, Test: #2353: Passed, Test: #2354: Passed, Test: #2355: Passed, Test: #2356: Passed, Test: #2357: Passed, Test: #2358: Passed, Test: #2359: Passed, Test: #2360: Passed, 
Test: #2361: Passed, Test: #2362: Passed, Test: #2363: Passed, Test: #2364: Passed, Test: #2365: Passed, Test: #2366: Passed, Test: #2367: Passed, Test: #2368: Passed, Test: #2369: Passed, Test: #2370: Passed, 
Test: #2371: Passed, Test: #2372: Passed, Test: #2373: Passed, Test: #2374: Passed, Test: #2375: Passed, Test: #2376: Passed, Test: #2377: Passed, Test: #2378: Passed, Test: #2379: Passed, Test: #2380: Passed, 
Test: #2381: Passed, Test: #2382: Passed, Test: #2383: Passed, Test: #2384: Passed, Test: #2385: Passed, Test: #2386: Passed, Test: #2387: Passed, Test: #2388: Passed, Test: #2389: Passed, Test: #2390: Passed, 
Test: #2391: Passed, Test: #2392: Passed, Test: #2393: Passed, Test: #2394: Passed, Test: #2395: Passed, Test: #2396: Passed, Test: #2397: Passed, Test: #2398: Passed, Test: #2399: Passed, Test: #2400: Passed, 
Test: #2401: Passed, Test: #2402: Passed, Test: #2403: Passed, Test: #2404: Passed, Test: #2405: Passed, Test: #2406: Passed, Test: #2407: Passed, Test: #2408: Passed, Test: #2409: Passed, Test: #2410: Passed, 
Test: #2411: Passed, Test: #2412: Passed, Test: #2413: Passed, Test: #2414: Passed, Test: #2415: Passed, Test: #2416: Passed, Test: #2417: Passed, Test: #2418: Passed, Test: #2419: Passed, Test: #2420: Passed, 
Test: #2421: Passed, Test: #2422: Passed, Test: #2423: Passed, Test: #2424: Passed, Test: #2425: Passed, Test: #2426: Passed, Test: #2427: Passed, Test: #2428: Passed, Test: #2429: Passed, Test: #2430: Passed, 
Test: #2431: Passed, Test: #2432: Passed, Test: #2433: Passed, Test: #2434: Passed, Test: #2435: Passed, Test: #2436: Passed, Test: #2437: Passed, Test: #2438: Passed, Test: #2439: Passed, Test: #2440: Passed, 
Test: #2441: Passed, Test: #2442: Passed, Test: #2443: Passed, Test: #2444: Passed, Test: #2445: Passed, Test: #2446: Passed, Test: #2447: Passed, Test: #2448: Passed, Test: #2449: Passed, Test: #2450: Passed, 
Test: #2451: Passed, Test: #2452: Passed, Test: #2453: Passed, Test: #2454: Passed, Test: #2455: Passed, Test: #2456: Passed, Test: #2457: Passed, Test: #2458: Passed, Test: #2459: Passed, Test: #2460: Passed, 
Test: #2461: Passed, Test: #2462: Passed, Test: #2463: Passed, Test: #2464: Passed, Test: #2465: Passed, Test: #2466: Passed, Test: #2467: Passed, Test: #2468: Passed, Test: #2469: Passed, Test: #2470: Passed, 
Test: #2471: Passed, Test: #2472: Passed, Test: #2473: Passed, Test: #2474: Passed, Test: #2475: Passed, Test: #2476: Passed, Test: #2477: Passed, Test: #2478: Passed, Test: #2479: Passed, Test: #2480: Passed, 
Test: #2481: Passed, Test: #2482: Passed, Test: #2483: Passed, Test: #2484: Passed, Test: #2485: Passed, Test: #2486: Passed, Test: #2487: Passed, Test: #2488: Passed, Test: #2489: Passed, Test: #2490: Passed, 
Test: #2491: Passed, Test: #2492: Passed, Test: #2493: Passed, Test: #2494: Passed, Test: #2495: Passed, Test: #2496: Passed, Test: #2497: Passed, Test: #2498: Passed, Test: #2499: Passed, Test: #2500: Passed, 
Test: #2501: Passed, Test: #2502: Passed, Test: #2503: Passed, Test: #2504: Passed, Test: #2505: Passed, Test: #2506: Passed, Test: #2507: Passed, Test: #2508: Passed, Test: #2509: Passed, Test: #2510: Passed, 
Test: #2511: Passed, Test: #2512: Passed, Test: #2513: Passed, Test: #2514: Passed, Test: #2515: Passed, Test: #2516: Passed, Test: #2517: Passed, Test: #2518: Passed, Test: #2519: Passed, Test: #2520: Passed, 
Test: #2521: Passed, Test: #2522: Passed, Test: #2523: Passed, Test: #2524: Passed, Test: #2525: Passed, Test: #2526: Passed, Test: #2527: Passed, Test: #2528: Passed, Test: #2529: Passed, Test: #2530: Passed, 
Test: #2531: Passed, Test: #2532: Passed, Test: #2533: Passed, Test: #2534: Passed, Test: #2535: Passed, Test: #2536: Passed, Test: #2537: Passed, Test: #2538: Passed, Test: #2539: Passed, Test: #2540: Passed, 
Test: #2541: Passed, Test: #2542: Passed, Test: #2543: Passed, Test: #2544: Passed, Test: #2545: Passed, Test: #2546: Passed, Test: #2547: Passed, Test: #2548: Passed, Test: #2549: Passed, Test: #2550: Passed, 
Test: #2551: Passed, Test: #2552: Passed, Test: #2553: Passed, Test: #2554: Passed, Test: #2555: Passed, Test: #2556: Passed, Test: #2557: Passed, Test: #2558: Passed, Test: #2559: Passed, Test: #2560: Passed, 
Test: #2561: Passed, Test: #2562: Passed, Test: #2563: Passed, Test: #2564: Passed, Test: #2565: Passed, Test: #2566: Passed, Test: #2567: Passed, Test: #2568: Passed, Test: #2569: Passed, Test: #2570: Passed, 
Test: #2571: Passed, Test: #2572: Passed, Test: #2573: Passed, Test: #2574: Passed, Test: #2575: Passed, Test: #2576: Passed, Test: #2577: Passed, Test: #2578: Passed, Test: #2579: Passed, Test: #2580: Passed, 
Test: #2581: Passed, Test: #2582: Passed, Test: #2583: Passed, Test: #2584: Passed, Test: #2585: Passed, Test: #2586: Passed, Test: #2587: Passed, Test: #2588: Passed, Test: #2589: Passed, Test: #2590: Passed, 
Test: #2591: Passed, Test: #2592: Passed, Test: #2593: Passed, Test: #2594: Passed, Test: #2595: Passed, Test: #2596: Passed, Test: #2597: Passed, Test: #2598: Passed, Test: #2599: Passed, Test: #2600: Passed, 
Test: #2601: Passed, Test: #2602: Passed, Test: #2603: Passed, Test: #2604: Passed, Test: #2605: Passed, Test: #2606: Passed, Test: #2607: Passed, Test: #2608: Passed, Test: #2609: Passed, Test: #2610: Passed, 
Test: #2611: Passed, Test: #2612: Passed, Test: #2613: Passed, Test: #2614: Passed, Test: #2615: Passed, Test: #2616: Passed, Test: #2617: Passed, Test: #2618: Passed, Test: #2619: Passed, Test: #2620: Passed, 
Test: #2621: Passed, Test: #2622: Passed, Test: #2623: Passed, Test: #2624: Passed, Test: #2625: Passed, Test: #2626: Passed, Test: #2627: Passed, Test: #2628: Passed, Test: #2629: Passed, Test: #2630: Passed, 
Test: #2631: Passed, Test: #2632: Passed, Test: #2633: Passed, Test: #2634: Passed, Test: #2635: Passed, Test: #2636: Passed, Test: #2637: Passed, Test: #2638: Passed, Test: #2639: Passed, Test: #2640: Passed, 
Test: #2641: Passed, Test: #2642: Passed, Test: #2643: Passed, Test: #2644: Passed, Test: #2645: Passed, Test: #2646: Passed, Test: #2647: Passed, Test: #2648: Passed, Test: #2649: Passed, Test: #2650: Passed, 
Test: #2651: Passed, Test: #2652: Passed, Test: #2653: Passed, Test: #2654: Passed, Test: #2655: Passed, Test: #2656: Passed, Test: #2657: Passed, Test: #2658: Passed, Test: #2659: Passed, Test: #2660: Passed, 
Test: #2661: Passed, Test: #2662: Passed, Test: #2663: Passed, Test: #2664: Passed, Test: #2665: Passed, Test: #2666: Passed, Test: #2667: Passed, Test: #2668: Passed, Test: #2669: Passed, Test: #2670: Passed, 
Test: #2671: Passed, Test: #2672: Passed, Test: #2673: Passed, Test: #2674: Passed, Test: #2675: Passed, Test: #2676: Passed, Test: #2677: Passed, Test: #2678: Passed, Test: #2679: Passed, Test: #2680: Passed, 
Test: #2681: Passed, Test: #2682: Passed, Test: #2683: Passed, Test: #2684: Passed, Test: #2685: Passed, Test: #2686: Passed, Test: #2687: Passed, Test: #2688: Passed, Test: #2689: Passed, Test: #2690: Passed, 
Test: #2691: Passed, Test: #2692: Passed, Test: #2693: Passed, Test: #2694: Passed, Test: #2695: Passed, Test: #2696: Passed, Test: #2697: Passed, Test: #2698: Passed, Test: #2699: Passed, Test: #2700: Passed, 
Test: #2701: Passed, Test: #2702: Passed, Test: #2703: Passed, Test: #2704: Passed, Test: #2705: Passed, Test: #2706: Passed, Test: #2707: Passed, Test: #2708: Passed, Test: #2709: Passed, Test: #2710: Passed, 
Test: #2711: Passed, Test: #2712: Passed, Test: #2713: Passed, Test: #2714: Passed, Test: #2715: Passed, Test: #2716: Passed, Test: #2717: Passed, Test: #2718: Passed, Test: #2719: Passed, Test: #2720: Passed, 
Test: #2721: Passed, Test: #2722: Passed, Test: #2723: Passed, Test: #2724: Passed, Test: #2725: Passed, Test: #2726: Passed, Test: #2727: Passed, Test: #2728: Passed, Test: #2729: Passed, Test: #2730: Passed, 
Test: #2731: Passed, Test: #2732: Passed, Test: #2733: Passed, Test: #2734: Passed, Test: #2735: Passed, Test: #2736: Passed, Test: #2737: Passed, Test: #2738: Passed, Test: #2739: Passed, Test: #2740: Passed, 
Test: #2741: Passed, Test: #2742: Passed, Test: #2743: Passed, Test: #2744: Passed, Test: #2745: Passed, Test: #2746: Passed, Test: #2747: Passed, Test: #2748: Passed, Test: #2749: Passed, Test: #2750: Passed, 
Test: #2751: Passed, Test: #2752: Passed, Test: #2753: Passed, Test: #2754: Passed, Test: #2755: Passed, Test: #2756: Passed, Test: #2757: Passed, Test: #2758: Passed, Test: #2759: Passed, Test: #2760: Passed, 
Test: #2761: Passed, Test: #2762: Passed, Test: #2763: Passed, Test: #2764: Passed, Test: #2765: Passed, Test: #2766: Passed, Test: #2767: Passed, Test: #2768: Passed, Test: #2769: Passed, Test: #2770: Passed, 
Test: #2771: Passed, Test: #2772: Passed, Test: #2773: Passed, Test: #2774: Passed, Test: #2775: Passed, Test: #2776: Passed, Test: #2777: Passed, Test: #2778: Passed, Test: #2779: Passed, Test: #2780: Passed, 
Test: #2781: Passed, Test: #2782: Passed, Test: #2783: Passed, Test: #2784: Passed, Test: #2785: Passed, Test: #2786: Passed, Test: #2787: Passed, Test: #2788: Passed, Test: #2789: Passed, Test: #2790: Passed, 
Test: #2791: Passed, Test: #2792: Passed, Test: #2793: Passed, Test: #2794: Passed, Test: #2795: Passed, Test: #2796: Passed, Test: #2797: Passed, Test: #2798: Passed, Test: #2799: Passed, Test: #2800: Passed, 
Test: #2801: Passed, Test: #2802: Passed, Test: #2803: Passed, Test: #2804: Passed, Test: #2805: Passed, Test: #2806: Passed, Test: #2807: Passed, Test: #2808: Passed, Test: #2809: Passed, Test: #2810: Passed, 
Test: #2811: Passed, Test: #2812: Passed, Test: #2813: Passed, Test: #2814: Passed, Test: #2815: Passed, Test: #2816: Passed, Test: #2817: Passed, Test: #2818: Passed, Test: #2819: Passed, Test: #2820: Passed, 
Test: #2821: Passed, Test: #2822: Passed, Test: #2823: Passed, Test: #2824: Passed, Test: #2825: Passed, Test: #2826: Passed, Test: #2827: Passed, Test: #2828: Passed, Test: #2829: Passed, Test: #2830: Passed, 
Test: #2831: Passed, Test: #2832: Passed, Test: #2833: Passed, Test: #2834: Passed, Test: #2835: Passed, Test: #2836: Passed, Test: #2837: Passed, Test: #2838: Passed, Test: #2839: Passed, Test: #2840: Passed, 
Test: #2841: Passed, Test: #2842: Passed, Test: #2843: Passed, Test: #2844: Passed, Test: #2845: Passed, Test: #2846: Passed, Test: #2847: Passed, Test: #2848: Passed, Test: #2849: Passed, Test: #2850: Passed, 
Test: #2851: Passed, Test: #2852: Passed, Test: #2853: Passed, Test: #2854: Passed, Test: #2855: Passed, Test: #2856: Passed, Test: #2857: Passed, Test: #2858: Passed, Test: #2859: Passed, Test: #2860: Passed, 
Test: #2861: Passed, Test: #2862: Passed, Test: #2863: Passed, Test: #2864: Passed, Test: #2865: Passed, Test: #2866: Passed, Test: #2867: Passed, Test: #2868: Passed, Test: #2869: Passed, Test: #2870: Passed, 
Test: #2871: Passed, Test: #2872: Passed, Test: #2873: Passed, Test: #2874: Passed, Test: #2875: Passed, Test: #2876: Passed, Test: #2877: Passed, Test: #2878: Passed, Test: #2879: Passed, Test: #2880: Passed, 
Test: #2881: Passed, Test: #2882: Passed, Test: #2883: Passed, Test: #2884: Passed, Test: #2885: Passed, Test: #2886: Passed, Test: #2887: Passed, Test: #2888: Passed, Test: #2889: Passed, Test: #2890: Passed, 
Test: #2891: Passed, Test: #2892: Passed, Test: #2893: Passed, Test: #2894: Passed, Test: #2895: Passed, Test: #2896: Passed, Test: #2897: Passed, Test: #2898: Passed, Test: #2899: Passed, Test: #2900: Passed, 
Test: #2901: Passed, Test: #2902: Passed, Test: #2903: Passed, Test: #2904: Passed, Test: #2905: Passed, Test: #2906: Passed, Test: #2907: Passed, Test: #2908: Passed, Test: #2909: Passed, Test: #2910: Passed, 
Test: #2911: Passed, Test: #2912: Passed, Test: #2913: Passed, Test: #2914: Passed, Test: #2915: Passed, Test: #2916: Passed, Test: #2917: Passed, Test: #2918: Passed, Test: #2919: Passed, Test: #2920: Passed, 
Test: #2921: Passed, Test: #2922: Passed, Test: #2923: Passed, Test: #2924: Passed, Test: #2925: Passed, Test: #2926: Passed, Test: #2927: Passed, Test: #2928: Passed, Test: #2929: Passed, Test: #2930: Passed, 
Test: #2931: Passed, Test: #2932: Passed, Test: #2933: Passed, Test: #2934: Passed, Test: #2935: Passed, Test: #2936: Passed, Test: #2937: Passed, Test: #2938: Passed, Test: #2939: Passed, Test: #2940: Passed, 
Test: #2941: Passed, Test: #2942: Passed, Test: #2943: Passed, Test: #2944: Passed, Test: #2945: Passed, Test: #2946: Passed, Test: #2947: Passed, Test: #2948: Passed, Test: #2949: Passed, Test: #2950: Passed, 
Test: #2951: Passed, Test: #2952: Passed, Test: #2953: Passed, Test: #2954: Passed, Test: #2955: Passed, Test: #2956: Passed, Test: #2957: Passed, Test: #2958: Passed, Test: #2959: Passed, Test: #2960: Passed, 
Test: #2961: Passed, Test: #2962: Passed, Test: #2963: Passed, Test: #2964: Passed, Test: #2965: Passed, Test: #2966: Passed, Test: #2967: Passed, Test: #2968: Passed, Test: #2969: Passed, Test: #2970: Passed, 
Test: #2971: Passed, Test: #2972: Passed, Test: #2973: Passed, Test: #2974: Passed, Test: #2975: Passed, Test: #2976: Passed, Test: #2977: Passed, Test: #2978: Passed, Test: #2979: Passed, Test: #2980: Passed, 
Test: #2981: Passed, Test: #2982: Passed, Test: #2983: Passed, Test: #2984: Passed, Test: #2985: Passed, Test: #2986: Passed, Test: #2987: Passed, Test: #2988: Passed, Test: #2989: Passed, Test: #2990: Passed, 
Test: #2991: Passed, Test: #2992: Passed, Test: #2993: Passed, Test: #2994: Passed, Test: #2995: Passed, Test: #2996: Passed, Test: #2997: Passed, Test: #2998: Passed, Test: #2999: Passed, Test: #3000: Passed, 
Test: #3001: Passed, Test: #3002: Passed, Test: #3003: Passed, Test: #3004: Passed, Test: #3005: Passed, Test: #3006: Passed, Test: #3007: Passed, Test: #3008: Passed, Test: #3009: Passed, Test: #3010: Passed, 
Test: #3011: Passed, Test: #3012: Passed, Test: #3013: Passed, Test: #3014: Passed, Test: #3015: Passed, Test: #3016: Passed, Test: #3017: Passed, Test: #3018: Passed, Test: #3019: Passed, Test: #3020: Passed, 
Test: #3021: Passed, Test: #3022: Passed, Test: #3023: Passed, Test: #3024: Passed, Test: #3025: Passed, Test: #3026: Passed, Test: #3027: Passed, Test: #3028: Passed, Test: #3029: Passed, Test: #3030: Passed, 
Test: #3031: Passed, Test: #3032: Passed, Test: #3033: Passed, Test: #3034: Passed, Test: #3035: Passed, Test: #3036: Passed, Test: #3037: Passed, Test: #3038: Passed, Test: #3039: Passed, Test: #3040: Passed, 
Test: #3041: Passed, Test: #3042: Passed, Test: #3043: Passed, Test: #3044: Passed, Test: #3045: Passed, Test: #3046: Passed, Test: #3047: Passed, Test: #3048: Passed, Test: #3049: Passed, Test: #3050: Passed, 
Test: #3051: Passed, Test: #3052: Passed, Test: #3053: Passed, Test: #3054: Passed, Test: #3055: Passed, Test: #3056: Passed, Test: #3057: Passed, Test: #3058: Passed, Test: #3059: Passed, Test: #3060: Passed, 
Test: #3061: Passed, Test: #3062: Passed, Test: #3063: Passed, Test: #3064: Passed, Test: #3065: Passed, Test: #3066: Passed, Test: #3067: Passed, Test: #3068: Passed, Test: #3069: Passed, Test: #3070: Passed, 
Test: #3071: Passed, Test: #3072: Passed, Test: #3073: Passed, Test: #3074: Passed, Test: #3075: Passed, Test: #3076: Passed, Test: #3077: Passed, Test: #3078: Passed, Test: #3079: Passed, Test: #3080: Passed, 
Test: #3081: Passed, Test: #3082: Passed, Test: #3083: Passed, Test: #3084: Passed, Test: #3085: Passed, Test: #3086: Passed, Test: #3087: Passed, Test: #3088: Passed, Test: #3089: Passed, Test: #3090: Passed, 
Test: #3091: Passed, Test: #3092: Passed, Test: #3093: Passed, Test: #3094: Passed, Test: #3095: Passed, Test: #3096: Passed, Test: #3097: Passed, Test: #3098: Passed, Test: #3099: Passed, Test: #3100: Passed, 
Test: #3101: Passed, Test: #3102: Passed, Test: #3103: Passed, Test: #3104: Passed, Test: #3105: Passed, Test: #3106: Passed, Test: #3107: Passed, Test: #3108: Passed, Test: #3109: Passed, Test: #3110: Passed, 
Test: #3111: Passed, Test: #3112: Passed, Test: #3113: Passed, Test: #3114: Passed, Test: #3115: Passed, Test: #3116: Passed, Test: #3117: Passed, Test: #3118: Passed, Test: #3119: Passed, Test: #3120: Passed, 
Test: #3121: Passed, Test: #3122: Passed, Test: #3123: Passed, Test: #3124: Passed, Test: #3125: Passed, Test: #3126: Passed, Test: #3127: Passed, Test: #3128: Passed, Test: #3129: Passed, Test: #3130: Passed, 
Test: #3131: Passed, Test: #3132: Passed, Test: #3133: Passed, Test: #3134: Passed, Test: #3135: Passed, Test: #3136: Passed, Test: #3137: Passed, Test: #3138: Passed, Test: #3139: Passed, Test: #3140: Passed, 
Test: #3141: Passed, Test: #3142: Passed, Test: #3143: Passed, Test: #3144: Passed, Test: #3145: Passed, Test: #3146: Passed, Test: #3147: Passed, Test: #3148: Passed, Test: #3149: Passed, Test: #3150: Passed, 
Test: #3151: Passed, Test: #3152: Passed, Test: #3153: Passed, Test: #3154: Passed, Test: #3155: Passed, Test: #3156: Passed, Test: #3157: Passed, Test: #3158: Passed, Test: #3159: Passed, Test: #3160: Passed, 
Test: #3161: Passed, Test: #3162: Passed, Test: #3163: Passed, Test: #3164: Passed, Test: #3165: Passed, Test: #3166: Passed, Test: #3167: Passed, Test: #3168: Passed, Test: #3169: Passed, Test: #3170: Passed, 
Test: #3171: Passed, Test: #3172: Passed, Test: #3173: Passed, Test: #3174: Passed, Test: #3175: Passed, Test: #3176: Passed, Test: #3177: Passed, Test: #3178: Passed, Test: #3179: Passed, Test: #3180: Passed, 
Test: #3181: Passed, Test: #3182: Passed, Test: #3183: Passed, Test: #3184: Passed, Test: #3185: Passed, Test: #3186: Passed, Test: #3187: Passed, Test: #3188: Passed, Test: #3189: Passed, Test: #3190: Passed, 
Test: #3191: Passed, Test: #3192: Passed, Test: #3193: Passed, Test: #3194: Passed, Test: #3195: Passed, Test: #3196: Passed, Test: #3197: Passed, Test: #3198: Passed, Test: #3199: Passed, Test: #3200: Passed, 
Test: #3201: Passed, Test: #3202: Passed, Test: #3203: Passed, Test: #3204: Passed, Test: #3205: Passed, Test: #3206: Passed, Test: #3207: Passed, Test: #3208: Passed, Test: #3209: Passed, Test: #3210: Passed, 
Test: #3211: Passed, Test: #3212: Passed, Test: #3213: Passed, Test: #3214: Passed, Test: #3215: Passed, Test: #3216: Passed, Test: #3217: Passed, Test: #3218: Passed, Test: #3219: Passed, Test: #3220: Passed, 
Test: #3221: Passed, Test: #3222: Passed, Test: #3223: Passed, Test: #3224: Passed, Test: #3225: Passed, Test: #3226: Passed, Test: #3227: Passed, Test: #3228: Passed, Test: #3229: Passed, Test: #3230: Passed, 
Test: #3231: Passed, Test: #3232: Passed, Test: #3233: Passed, Test: #3234: Passed, Test: #3235: Passed, Test: #3236: Passed, Test: #3237: Passed, Test: #3238: Passed, Test: #3239: Passed, Test: #3240: Passed, 
Test: #3241: Passed, Test: #3242: Passed, Test: #3243: Passed, Test: #3244: Passed, Test: #3245: Passed, Test: #3246: Passed, Test: #3247: Passed, Test: #3248: Passed, Test: #3249: Passed, Test: #3250: Passed, 
Test: #3251: Passed, Test: #3252: Passed, Test: #3253: Passed, Test: #3254: Passed, Test: #3255: Passed, Test: #3256: Passed, Test: #3257: Passed, Test: #3258: Passed, Test: #3259: Passed, Test: #3260: Passed, 
Test: #3261: Passed, Test: #3262: Passed, Test: #3263: Passed, Test: #3264: Passed, Test: #3265: Passed, Test: #3266: Passed, Test: #3267: Passed, Test: #3268: Passed, Test: #3269: Passed, Test: #3270: Passed, 
Test: #3271: Passed, Test: #3272: Passed, Test: #3273: Passed, Test: #3274: Passed, Test: #3275: Passed, Test: #3276: Passed, Test: #3277: Passed, Test: #3278: Passed, Test: #3279: Passed, Test: #3280: Passed, 
Test: #3281: Passed, Test: #3282: Passed, Test: #3283: Passed, Test: #3284: Passed, Test: #3285: Passed, Test: #3286: Passed, Test: #3287: Passed, Test: #3288: Passed, Test: #3289: Passed, Test: #3290: Passed, 
Test: #3291: Passed, Test: #3292: Passed, Test: #3293: Passed, Test: #3294: Passed, Test: #3295: Passed, Test: #3296: Passed, Test: #3297: Passed, Test: #3298: Passed, Test: #3299: Passed, Test: #3300: Passed, 
Test: #3301: Passed, Test: #3302: Passed, Test: #3303: Passed, Test: #3304: Passed, Test: #3305: Passed, Test: #3306: Passed, Test: #3307: Passed, Test: #3308: Passed, Test: #3309: Passed, Test: #3310: Passed, 
Test: #3311: Passed, Test: #3312: Passed, Test: #3313: Passed, Test: #3314: Passed, Test: #3315: Passed, Test: #3316: Passed, Test: #3317: Passed, Test: #3318: Passed, Test: #3319: Passed, Test: #3320: Passed, 
Test: #3321: Passed, Test: #3322: Passed, Test: #3323: Passed, Test: #3324: Passed, Test: #3325: Passed, Test: #3326: Passed, Test: #3327: Passed, Test: #3328: Passed, Test: #3329: Passed, Test: #3330: Passed, 
Test: #3331: Passed, Test: #3332: Passed, Test: #3333: Passed, Test: #3334: Passed, Test: #3335: Passed, Test: #3336: Passed, Test: #3337: Passed, Test: #3338: Passed, Test: #3339: Passed, Test: #3340: Passed, 
Test: #3341: Passed, Test: #3342: Passed, Test: #3343: Passed, Test: #3344: Passed, Test: #3345: Passed, Test: #3346: Passed, Test: #3347: Passed, Test: #3348: Passed, Test: #3349: Passed, Test: #3350: Passed, 
Test: #3351: Passed, Test: #3352: Passed, Test: #3353: Passed, Test: #3354: Passed, Test: #3355: Passed, Test: #3356: Passed, Test: #3357: Passed, Test: #3358: Passed, Test: #3359: Passed, Test: #3360: Passed, 
Test: #3361: Passed, Test: #3362: Passed, Test: #3363: Passed, Test: #3364: Passed, Test: #3365: Passed, Test: #3366: Passed, Test: #3367: Passed, Test: #3368: Passed, Test: #3369: Passed, Test: #3370: Passed, 
Test: #3371: Passed, Test: #3372: Passed, Test: #3373: Passed, Test: #3374: Passed, Test: #3375: Passed, Test: #3376: Passed, Test: #3377: Passed, Test: #3378: Passed, Test: #3379: Passed, Test: #3380: Passed, 
Test: #3381: Passed, Test: #3382: Passed, Test: #3383: Passed, Test: #3384: Passed, Test: #3385: Passed, Test: #3386: Passed, Test: #3387: Passed, Test: #3388: Passed, Test: #3389: Passed, Test: #3390: Passed, 
Test: #3391: Passed, Test: #3392: Passed, Test: #3393: Passed, Test: #3394: Passed, Test: #3395: Passed, Test: #3396: Passed, Test: #3397: Passed, Test: #3398: Passed, Test: #3399: Passed, Test: #3400: Passed, 
Test: #3401: Passed, Test: #3402: Passed, Test: #3403: Passed, Test: #3404: Passed, Test: #3405: Passed, Test: #3406: Passed, Test: #3407: Passed, Test: #3408: Passed, Test: #3409: Passed, Test: #3410: Passed, 
Test: #3411: Passed, Test: #3412: Passed, Test: #3413: Passed, Test: #3414: Passed, Test: #3415: Passed, Test: #3416: Passed, Test: #3417: Passed, Test: #3418: Passed, Test: #3419: Passed, Test: #3420: Passed, 
Test: #3421: Passed, Test: #3422: Passed, Test: #3423: Passed, Test: #3424: Passed, Test: #3425: Passed, Test: #3426: Passed, Test: #3427: Passed, Test: #3428: Passed, Test: #3429: Passed, Test: #3430: Passed, 
Test: #3431: Passed, Test: #3432: Passed, Test: #3433: Passed, Test: #3434: Passed, Test: #3435: Passed, Test: #3436: Passed, Test: #3437: Passed, Test: #3438: Passed, Test: #3439: Passed, Test: #3440: Passed, 
Test: #3441: Passed, Test: #3442: Passed, Test: #3443: Passed, Test: #3444: Passed, Test: #3445: Passed, Test: #3446: Passed, Test: #3447: Passed, Test: #3448: Passed, Test: #3449: Passed, Test: #3450: Passed, 
Test: #3451: Passed, Test: #3452: Passed, Test: #3453: Passed, Test: #3454: Passed, Test: #3455: Passed, Test: #3456: Passed, Test: #3457: Passed, Test: #3458: Passed, Test: #3459: Passed, Test: #3460: Passed, 
Test: #3461: Passed, Test: #3462: Passed, Test: #3463: Passed, Test: #3464: Passed, Test: #3465: Passed, Test: #3466: Passed, Test: #3467: Passed, Test: #3468: Passed, Test: #3469: Passed, Test: #3470: Passed, 
Test: #3471: Passed, Test: #3472: Passed, Test: #3473: Passed, Test: #3474: Passed, Test: #3475: Passed, Test: #3476: Passed, Test: #3477: Passed, Test: #3478: Passed, Test: #3479: Passed, Test: #3480: Passed, 
Test: #3481: Passed, Test: #3482: Passed, Test: #3483: Passed, Test: #3484: Passed, Test: #3485: Passed, Test: #3486: Passed, Test: #3487: Passed, Test: #3488: Passed, Test: #3489: Passed, Test: #3490: Passed, 
Test: #3491: Passed, Test: #3492: Passed, Test: #3493: Passed, Test: #3494: Passed, Test: #3495: Passed, Test: #3496: Passed, Test: #3497: Passed, Test: #3498: Passed, Test: #3499: Passed, Test: #3500: Passed, 
Test: #3501: Passed, Test: #3502: Passed, Test: #3503: Passed, Test: #3504: Passed, Test: #3505: Passed, Test: #3506: Passed, Test: #3507: Passed, Test: #3508: Passed, Test: #3509: Passed, Test: #3510: Passed, 
Test: #3511: Passed, Test: #3512: Passed, Test: #3513: Passed, Test: #3514: Passed, Test: #3515: Passed, Test: #3516: Passed, Test: #3517: Passed, Test: #3518: Passed, Test: #3519: Passed, Test: #3520: Passed, 
Test: #3521: Passed, Test: #3522: Passed, Test: #3523: Passed, Test: #3524: Passed, Test: #3525: Passed, Test: #3526: Passed, Test: #3527: Passed, Test: #3528: Passed, Test: #3529: Passed, Test: #3530: Passed, 
Test: #3531: Passed, Test: #3532: Passed, Test: #3533: Passed, Test: #3534: Passed, Test: #3535: Passed, Test: #3536: Passed, Test: #3537: Passed, Test: #3538: Passed, Test: #3539: Passed, Test: #3540: Passed, 
Test: #3541: Passed, Test: #3542: Passed, Test: #3543: Passed, Test: #3544: Passed, Test: #3545: Passed, Test: #3546: Passed, Test: #3547: Passed, Test: #3548: Passed, Test: #3549: Passed, Test: #3550: Passed, 
Test: #3551: Passed, Test: #3552: Passed, Test: #3553: Passed, Test: #3554: Passed, Test: #3555: Passed, Test: #3556: Passed, Test: #3557: Passed, Test: #3558: Passed, Test: #3559: Passed, Test: #3560: Passed, 
Test: #3561: Passed, Test: #3562: Passed, Test: #3563: Passed, Test: #3564: Passed, Test: #3565: Passed, Test: #3566: Passed, Test: #3567: Passed, Test: #3568: Passed, Test: #3569: Passed, Test: #3570: Passed, 
Test: #3571: Passed, Test: #3572: Passed, Test: #3573: Passed, Test: #3574: Passed, Test: #3575: Passed, Test: #3576: Passed, Test: #3577: Passed, Test: #3578: Passed, Test: #3579: Passed, Test: #3580: Passed, 
Test: #3581: Passed, Test: #3582: Passed, Test: #3583: Passed, Test: #3584: Passed, Test: #3585: Passed, Test: #3586: Passed, Test: #3587: Passed, Test: #3588: Passed, Test: #3589: Passed, Test: #3590: Passed, 
Test: #3591: Passed, Test: #3592: Passed, Test: #3593: Passed, Test: #3594: Passed, Test: #3595: Passed, Test: #3596: Passed, Test: #3597: Passed, Test: #3598: Passed, Test: #3599: Passed, Test: #3600: Passed, 
Test: #3601: Passed, Test: #3602: Passed, Test: #3603: Passed, Test: #3604: Passed, Test: #3605: Passed, Test: #3606: Passed, Test: #3607: Passed, Test: #3608: Passed, Test: #3609: Passed, Test: #3610: Passed, 
Test: #3611: Passed, Test: #3612: Passed, Test: #3613: Passed, Test: #3614: Passed, Test: #3615: Passed, Test: #3616: Passed, Test: #3617: Passed, Test: #3618: Passed, Test: #3619: Passed, Test: #3620: Passed, 
Test: #3621: Passed, Test: #3622: Passed, Test: #3623: Passed, Test: #3624: Passed, Test: #3625: Passed, Test: #3626: Passed, Test: #3627: Passed, Test: #3628: Passed, Test: #3629: Passed, Test: #3630: Passed, 
Test: #3631: Passed, Test: #3632: Passed, Test: #3633: Passed, Test: #3634: Passed, Test: #3635: Passed, Test: #3636: Passed, Test: #3637: Passed, Test: #3638: Passed, Test: #3639: Passed, Test: #3640: Passed, 
Test: #3641: Passed, Test: #3642: Passed, Test: #3643: Passed, Test: #3644: Passed, Test: #3645: Passed, Test: #3646: Passed, Test: #3647: Passed, Test: #3648: Passed, Test: #3649: Passed, Test: #3650: Passed, 
Test: #3651: Passed, Test: #3652: Passed, Test: #3653: Passed, Test: #3654: Passed, Test: #3655: Passed, Test: #3656: Passed, Test: #3657: Passed, Test: #3658: Passed, Test: #3659: Passed, Test: #3660: Passed, 
Test: #3661: Passed, Test: #3662: Passed, Test: #3663: Passed, Test: #3664: Passed, Test: #3665: Passed, Test: #3666: Passed, Test: #3667: Passed, Test: #3668: Passed, Test: #3669: Passed, Test: #3670: Passed, 
Test: #3671: Passed, Test: #3672: Passed, Test: #3673: Passed, Test: #3674: Passed, Test: #3675: Passed, Test: #3676: Passed, Test: #3677: Passed, Test: #3678: Passed, Test: #3679: Passed, Test: #3680: Passed, 
Test: #3681: Passed, Test: #3682: Passed, Test: #3683: Passed, Test: #3684: Passed, Test: #3685: Passed, Test: #3686: Passed, Test: #3687: Passed, Test: #3688: Passed, Test: #3689: Passed, Test: #3690: Passed, 
Test: #3691: Passed, Test: #3692: Passed, Test: #3693: Passed, Test: #3694: Passed, Test: #3695: Passed, Test: #3696: Passed, Test: #3697: Passed, Test: #3698: Passed, Test: #3699: Passed, Test: #3700: Passed, 
Test: #3701: Passed, Test: #3702: Passed, Test: #3703: Passed, Test: #3704: Passed, Test: #3705: Passed, Test: #3706: Passed, Test: #3707: Passed, Test: #3708: Passed, Test: #3709: Passed, Test: #3710: Passed, 
Test: #3711: Passed, Test: #3712: Passed, Test: #3713: Passed, Test: #3714: Passed, Test: #3715: Passed, Test: #3716: Passed, Test: #3717: Passed, Test: #3718: Passed, Test: #3719: Passed, Test: #3720: Passed, 
Test: #3721: Passed, Test: #3722: Passed, Test: #3723: Passed, Test: #3724: Passed, Test: #3725: Passed, Test: #3726: Passed, Test: #3727: Passed, Test: #3728: Passed, Test: #3729: Passed, Test: #3730: Passed, 
Test: #3731: Passed, Test: #3732: Passed, Test: #3733: Passed, Test: #3734: Passed, Test: #3735: Passed, Test: #3736: Passed, Test: #3737: Passed, Test: #3738: Passed, Test: #3739: Passed, Test: #3740: Passed, 
Test: #3741: Passed, Test: #3742: Passed, Test: #3743: Passed, Test: #3744: Passed, Test: #3745: Passed, Test: #3746: Passed, Test: #3747: Passed, Test: #3748: Passed, Test: #3749: Passed, Test: #3750: Passed, 
Test: #3751: Passed, Test: #3752: Passed, Test: #3753: Passed, Test: #3754: Passed, Test: #3755: Passed, Test: #3756: Passed, Test: #3757: Passed, Test: #3758: Passed, Test: #3759: Passed, Test: #3760: Passed, 
Test: #3761: Passed, Test: #3762: Passed, Test: #3763: Passed, Test: #3764: Passed, Test: #3765: Passed, Test: #3766: Passed, Test: #3767: Passed, Test: #3768: Passed, Test: #3769: Passed, Test: #3770: Passed, 
Test: #3771: Passed, Test: #3772: Passed, Test: #3773: Passed, Test: #3774: Passed, Test: #3775: Passed, Test: #3776: Passed, Test: #3777: Passed, Test: #3778: Passed, Test: #3779: Passed, Test: #3780: Passed, 
Test: #3781: Passed, Test: #3782: Passed, Test: #3783: Passed, Test: #3784: Passed, Test: #3785: Passed, Test: #3786: Passed, Test: #3787: Passed, Test: #3788: Passed, Test: #3789: Passed, Test: #3790: Passed, 
Test: #3791: Passed, Test: #3792: Passed, Test: #3793: Passed, Test: #3794: Passed, Test: #3795: Passed, Test: #3796: Passed, Test: #3797: Passed, Test: #3798: Passed, Test: #3799: Passed, Test: #3800: Passed, 
Test: #3801: Passed, Test: #3802: Passed, Test: #3803: Passed, Test: #3804: Passed, Test: #3805: Passed, Test: #3806: Passed, Test: #3807: Passed, Test: #3808: Passed, Test: #3809: Passed, Test: #3810: Passed, 
Test: #3811: Passed, Test: #3812: Passed, Test: #3813: Passed, Test: #3814: Passed, Test: #3815: Passed, Test: #3816: Passed, Test: #3817: Passed, Test: #3818: Passed, Test: #3819: Passed, Test: #3820: Passed, 
Test: #3821: Passed, Test: #3822: Passed, Test: #3823: Passed, Test: #3824: Passed, Test: #3825: Passed, Test: #3826: Passed, Test: #3827: Passed, Test: #3828: Passed, Test: #3829: Passed, Test: #3830: Passed, 
Test: #3831: Passed, Test: #3832: Passed, Test: #3833: Passed, Test: #3834: Passed, Test: #3835: Passed, Test: #3836: Passed, Test: #3837: Passed, Test: #3838: Passed, Test: #3839: Passed, Test: #3840: Passed, 
Test: #3841: Passed, Test: #3842: Passed, Test: #3843: Passed, Test: #3844: Passed, Test: #3845: Passed, Test: #3846: Passed, Test: #3847: Passed, Test: #3848: Passed, Test: #3849: Passed, Test: #3850: Passed, 
Test: #3851: Passed, Test: #3852: Passed, Test: #3853: Passed, Test: #3854: Passed, Test: #3855: Passed, Test: #3856: Passed, Test: #3857: Passed, Test: #3858: Passed, Test: #3859: Passed, Test: #3860: Passed, 
Test: #3861: Passed, Test: #3862: Passed, Test: #3863: Passed, Test: #3864: Passed, Test: #3865: Passed, Test: #3866: Passed, Test: #3867: Passed, Test: #3868: Passed, Test: #3869: Passed, Test: #3870: Passed, 
Test: #3871: Passed, Test: #3872: Passed, Test: #3873: Passed, Test: #3874: Passed, Test: #3875: Passed, Test: #3876: Passed, Test: #3877: Passed, Test: #3878: Passed, Test: #3879: Passed, Test: #3880: Passed, 
Test: #3881: Passed, Test: #3882: Passed, Test: #3883: Passed, Test: #3884: Passed, Test: #3885: Passed, Test: #3886: Passed, Test: #3887: Passed, Test: #3888: Passed, Test: #3889: Passed, Test: #3890: Passed, 
Test: #3891: Passed, Test: #3892: Passed, Test: #3893: Passed, Test: #3894: Passed, Test: #3895: Passed, Test: #3896: Passed, Test: #3897: Passed, Test: #3898: Passed, Test: #3899: Passed, Test: #3900: Passed, 
Test: #3901: Passed, Test: #3902: Passed, Test: #3903: Passed, Test: #3904: Passed, Test: #3905: Passed, Test: #3906: Passed, Test: #3907: Passed, Test: #3908: Passed, Test: #3909: Passed, Test: #3910: Passed, 
Test: #3911: Passed, Test: #3912: Passed, Test: #3913: Passed, Test: #3914: Passed, Test: #3915: Passed, Test: #3916: Passed, Test: #3917: Passed, Test: #3918: Passed, Test: #3919: Passed, Test: #3920: Passed, 
Test: #3921: Passed, Test: #3922: Passed, Test: #3923: Passed, Test: #3924: Passed, Test: #3925: Passed, Test: #3926: Passed, Test: #3927: Passed, Test: #3928: Passed, Test: #3929: Passed, Test: #3930: Passed, 
Test: #3931: Passed, Test: #3932: Passed, Test: #3933: Passed, Test: #3934: Passed, Test: #3935: Passed, Test: #3936: Passed, Test: #3937: Passed, Test: #3938: Passed, Test: #3939: Passed, Test: #3940: Passed, 
Test: #3941: Passed, Test: #3942: Passed, Test: #3943: Passed, Test: #3944: Passed, Test: #3945: Passed, Test: #3946: Passed, Test: #3947: Passed, Test: #3948: Passed, Test: #3949: Passed, Test: #3950: Passed, 
Test: #3951: Passed, Test: #3952: Passed, Test: #3953: Passed, Test: #3954: Passed, Test: #3955: Passed, Test: #3956: Passed, Test: #3957: Passed, Test: #3958: Passed, Test: #3959: Passed, Test: #3960: Passed, 
Test: #3961: Passed, Test: #3962: Passed, Test: #3963: Passed, Test: #3964: Passed, Test: #3965: Passed, Test: #3966: Passed, Test: #3967: Passed, Test: #3968: Passed, Test: #3969: Passed, Test: #3970: Passed, 
Test: #3971: Passed, Test: #3972: Passed, Test: #3973: Passed, Test: #3974: Passed, Test: #3975: Passed, Test: #3976: Passed, Test: #3977: Passed, Test: #3978: Passed, Test: #3979: Passed, Test: #3980: Passed, 
Test: #3981: Passed, Test: #3982: Passed, Test: #3983: Passed, Test: #3984: Passed, Test: #3985: Passed, Test: #3986: Passed, Test: #3987: Passed, Test: #3988: Passed, Test: #3989: Passed, Test: #3990: Passed, 
Test: #3991: Passed, Test: #3992: Passed, Test: #3993: Passed, Test: #3994: Passed, Test: #3995: Passed, Test: #3996: Passed, Test: #3997: Passed, Test: #3998: Passed, Test: #3999: Passed, Test: #4000: Passed, 
Test: #4001: Passed, Test: #4002: Passed, Test: #4003: Passed, Test: #4004: Passed, Test: #4005: Passed, Test: #4006: Passed, Test: #4007: Passed, Test: #4008: Passed, Test: #4009: Passed, Test: #4010: Passed, 
Test: #4011: Passed, Test: #4012: Passed, Test: #4013: Passed, Test: #4014: Passed, Test: #4015: Passed, Test: #4016: Passed, Test: #4017: Passed, Test: #4018: Passed, Test: #4019: Passed, Test: #4020: Passed, 
Test: #4021: Passed, Test: #4022: Passed, Test: #4023: Passed, Test: #4024: Passed, Test: #4025: Passed, Test: #4026: Passed, Test: #4027: Passed, Test: #4028: Passed, Test: #4029: Passed, Test: #4030: Passed, 
Test: #4031: Passed, Test: #4032: Passed, Test: #4033: Passed, Test: #4034: Passed, Test: #4035: Passed, Test: #4036: Passed, Test: #4037: Passed, Test: #4038: Passed, Test: #4039: Passed, Test: #4040: Passed, 
Test: #4041: Passed, Test: #4042: Passed, Test: #4043: Passed, Test: #4044: Passed, Test: #4045: Passed, Test: #4046: Passed, Test: #4047: Passed, Test: #4048: Passed, Test: #4049: Passed, Test: #4050: Passed, 
Test: #4051: Passed, Test: #4052: Passed, Test: #4053: Passed, Test: #4054: Passed, Test: #4055: Passed, Test: #4056: Passed, Test: #4057: Passed, Test: #4058: Passed, Test: #4059: Passed, Test: #4060: Passed, 
Test: #4061: Passed, Test: #4062: Passed, Test: #4063: Passed, Test: #4064: Passed, Test: #4065: Passed, Test: #4066: Passed, Test: #4067: Passed, Test: #4068: Passed, Test: #4069: Passed, Test: #4070: Passed, 
Test: #4071: Passed, Test: #4072: Passed, Test: #4073: Passed, Test: #4074: Passed, Test: #4075: Passed, Test: #4076: Passed, Test: #4077: Passed, Test: #4078: Passed, Test: #4079: Passed, Test: #4080: Passed, 
Test: #4081: Passed, Test: #4082: Passed, Test: #4083: Passed, Test: #4084: Passed, Test: #4085: Passed, Test: #4086: Passed, Test: #4087: Passed, Test: #4088: Passed, Test: #4089: Passed, Test: #4090: Passed, 
Test: #4091: Passed, Test: #4092: Passed, Test: #4093: Passed, Test: #4094: Passed, Test: #4095: Passed, Test: #4096: Passed, Test: #4097: Passed, Test: #4098: Passed, Test: #4099: Passed, Test: #4100: Passed, 
Test: #4101: Passed, Test: #4102: Passed, Test: #4103: Passed, Test: #4104: Passed, Test: #4105: Passed, Test: #4106: Passed, Test: #4107: Passed, Test: #4108: Passed, Test: #4109: Passed, Test: #4110: Passed, 
Test: #4111: Passed, Test: #4112: Passed, Test: #4113: Passed, Test: #4114: Passed, Test: #4115: Passed, Test: #4116: Passed, Test: #4117: Passed, Test: #4118: Passed, Test: #4119: Passed, Test: #4120: Passed, 
Test: #4121: Passed, Test: #4122: Passed, Test: #4123: Passed, Test: #4124: Passed, Test: #4125: Passed, Test: #4126: Passed, Test: #4127: Passed, Test: #4128: Passed, Test: #4129: Passed, Test: #4130: Passed, 
Test: #4131: Passed, Test: #4132: Passed, Test: #4133: Passed, Test: #4134: Passed, Test: #4135: Passed, Test: #4136: Passed, Test: #4137: Passed, Test: #4138: Passed, Test: #4139: Passed, Test: #4140: Passed, 
Test: #4141: Passed, Test: #4142: Passed, Test: #4143: Passed, Test: #4144: Passed, Test: #4145: Passed, Test: #4146: Passed, Test: #4147: Passed, Test: #4148: Passed, Test: #4149: Passed, Test: #4150: Passed, 
Test: #4151: Passed, Test: #4152: Passed, Test: #4153: Passed, Test: #4154: Passed, Test: #4155: Passed, Test: #4156: Passed, Test: #4157: Passed, Test: #4158: Passed, Test: #4159: Passed, Test: #4160: Passed, 
Test: #4161: Passed, Test: #4162: Passed, Test: #4163: Passed, Test: #4164: Passed, Test: #4165: Passed, Test: #4166: Passed, Test: #4167: Passed, Test: #4168: Passed, Test: #4169: Passed, Test: #4170: Passed, 
Test: #4171: Passed, Test: #4172: Passed, Test: #4173: Passed, Test: #4174: Passed, Test: #4175: Passed, Test: #4176: Passed, Test: #4177: Passed, Test: #4178: Passed, Test: #4179: Passed, Test: #4180: Passed, 
Test: #4181: Passed, Test: #4182: Passed, Test: #4183: Passed, Test: #4184: Passed, Test: #4185: Passed, Test: #4186: Passed, Test: #4187: Passed, Test: #4188: Passed, Test: #4189: Passed, Test: #4190: Passed, 
Test: #4191: Passed, Test: #4192: Passed, Test: #4193: Passed, Test: #4194: Passed, Test: #4195: Passed, Test: #4196: Passed, Test: #4197: Passed, Test: #4198: Passed, Test: #4199: Passed, Test: #4200: Passed, 
Test: #4201: Passed, Test: #4202: Passed, Test: #4203: Passed, Test: #4204: Passed, Test: #4205: Passed, Test: #4206: Passed, Test: #4207: Passed, Test: #4208: Passed, Test: #4209: Passed, Test: #4210: Passed, 
Test: #4211: Passed, Test: #4212: Passed, Test: #4213: Passed, Test: #4214: Passed, Test: #4215: Passed, Test: #4216: Passed, Test: #4217: Passed, Test: #4218: Passed, Test: #4219: Passed, Test: #4220: Passed, 
Test: #4221: Passed, Test: #4222: Passed, Test: #4223: Passed, Test: #4224: Passed, Test: #4225: Passed, Test: #4226: Passed, Test: #4227: Passed, Test: #4228: Passed, Test: #4229: Passed, Test: #4230: Passed, 
Test: #4231: Passed, Test: #4232: Passed, Test: #4233: Passed, Test: #4234: Passed, Test: #4235: Passed, Test: #4236: Passed, Test: #4237: Passed, Test: #4238: Passed, Test: #4239: Passed, Test: #4240: Passed, 
Test: #4241: Passed, Test: #4242: Passed, Test: #4243: Passed, Test: #4244: Passed, Test: #4245: Passed, Test: #4246: Passed, Test: #4247: Passed, Test: #4248: Passed, Test: #4249: Passed, Test: #4250: Passed, 
Test: #4251: Passed, Test: #4252: Passed, Test: #4253: Passed, Test: #4254: Passed, Test: #4255: Passed, Test: #4256: Passed, Test: #4257: Passed, Test: #4258: Passed, Test: #4259: Passed, Test: #4260: Passed, 
Test: #4261: Passed, Test: #4262: Passed, Test: #4263: Passed, Test: #4264: Passed, Test: #4265: Passed, Test: #4266: Passed, Test: #4267: Passed, Test: #4268: Passed, Test: #4269: Passed, Test: #4270: Passed, 
Test: #4271: Passed, Test: #4272: Passed, Test: #4273: Passed, Test: #4274: Passed, Test: #4275: Passed, Test: #4276: Passed, Test: #4277: Passed, Test: #4278: Passed, Test: #4279: Passed, Test: #4280: Passed, 
Test: #4281: Passed, Test: #4282: Passed, Test: #4283: Passed, Test: #4284: Passed, Test: #4285: Passed, Test: #4286: Passed, Test: #4287: Passed, Test: #4288: Passed, Test: #4289: Passed, Test: #4290: Passed, 
Test: #4291: Passed, Test: #4292: Passed, Test: #4293: Passed, Test: #4294: Passed, Test: #4295: Passed, Test: #4296: Passed, Test: #4297: Passed, Test: #4298: Passed, Test: #4299: Passed, Test: #4300: Passed, 
Test: #4301: Passed, Test: #4302: Passed, Test: #4303: Passed, Test: #4304: Passed, Test: #4305: Passed, Test: #4306: Passed, Test: #4307: Passed, Test: #4308: Passed, Test: #4309: Passed, Test: #4310: Passed, 
Test: #4311: Passed, Test: #4312: Passed, Test: #4313: Passed, Test: #4314: Passed, Test: #4315: Passed, Test: #4316: Passed, Test: #4317: Passed, Test: #4318: Passed, Test: #4319: Passed, Test: #4320: Passed, 
Test: #4321: Passed, Test: #4322: Passed, Test: #4323: Passed, Test: #4324: Passed, Test: #4325: Passed, Test: #4326: Passed, Test: #4327: Passed, Test: #4328: Passed, Test: #4329: Passed, Test: #4330: Passed, 
Test: #4331: Passed, Test: #4332: Passed, Test: #4333: Passed, Test: #4334: Passed, Test: #4335: Passed, Test: #4336: Passed, Test: #4337: Passed, Test: #4338: Passed, Test: #4339: Passed, Test: #4340: Passed, 
Test: #4341: Passed, Test: #4342: Passed, Test: #4343: Passed, Test: #4344: Passed, Test: #4345: Passed, Test: #4346: Passed, Test: #4347: Passed, Test: #4348: Passed, Test: #4349: Passed, Test: #4350: Passed, 
Test: #4351: Passed, Test: #4352: Passed, Test: #4353: Passed, Test: #4354: Passed, Test: #4355: Passed, Test: #4356: Passed, Test: #4357: Passed, Test: #4358: Passed, Test: #4359: Passed, Test: #4360: Passed, 
Test: #4361: Passed, Test: #4362: Passed, Test: #4363: Passed, Test: #4364: Passed, Test: #4365: Passed, Test: #4366: Passed, Test: #4367: Passed, Test: #4368: Passed, Test: #4369: Passed, Test: #4370: Passed, 
Test: #4371: Passed, Test: #4372: Passed, Test: #4373: Passed, Test: #4374: Passed, Test: #4375: Passed, Test: #4376: Passed, Test: #4377: Passed, Test: #4378: Passed, Test: #4379: Passed, Test: #4380: Passed, 
Test: #4381: Passed, Test: #4382: Passed, Test: #4383: Passed, Test: #4384: Passed, Test: #4385: Passed, Test: #4386: Passed, Test: #4387: Passed, Test: #4388: Passed, Test: #4389: Passed, Test: #4390: Passed, 
Test: #4391: Passed, Test: #4392: Passed, Test: #4393: Passed, Test: #4394: Passed, Test: #4395: Passed, Test: #4396: Passed, Test: #4397: Passed, Test: #4398: Passed, Test: #4399: Passed, Test: #4400: Passed, 
Test: #4401: Passed, Test: #4402: Passed, Test: #4403: Passed, Test: #4404: Passed, Test: #4405: Passed, Test: #4406: Passed, Test: #4407: Passed, Test: #4408: Passed, Test: #4409: Passed, Test: #4410: Passed, 
Test: #4411: Passed, Test: #4412: Passed, Test: #4413: Passed, Test: #4414: Passed, Test: #4415: Passed, Test: #4416: Passed, Test: #4417: Passed, Test: #4418: Passed, Test: #4419: Passed, Test: #4420: Passed, 
Test: #4421: Passed, Test: #4422: Passed, Test: #4423: Passed, Test: #4424: Passed, Test: #4425: Passed, Test: #4426: Passed, Test: #4427: Passed, Test: #4428: Passed, Test: #4429: Passed, Test: #4430: Passed, 
Test: #4431: Passed, Test: #4432: Passed, Test: #4433: Passed, Test: #4434: Passed, Test: #4435: Passed, Test: #4436: Passed, Test: #4437: Passed, Test: #4438: Passed, Test: #4439: Passed, Test: #4440: Passed, 
Test: #4441: Passed, Test: #4442: Passed, Test: #4443: Passed, Test: #4444: Passed, Test: #4445: Passed, Test: #4446: Passed, Test: #4447: Passed, Test: #4448: Passed, Test: #4449: Passed, Test: #4450: Passed, 
Test: #4451: Passed, Test: #4452: Passed, Test: #4453: Passed, Test: #4454: Passed, Test: #4455: Passed, Test: #4456: Passed, Test: #4457: Passed, Test: #4458: Passed, Test: #4459: Passed, Test: #4460: Passed, 
Test: #4461: Passed, Test: #4462: Passed, Test: #4463: Passed, Test: #4464: Passed, Test: #4465: Passed, Test: #4466: Passed, Test: #4467: Passed, Test: #4468: Passed, Test: #4469: Passed, Test: #4470: Passed, 
Test: #4471: Passed, Test: #4472: Passed, Test: #4473: Passed, Test: #4474: Passed, Test: #4475: Passed, Test: #4476: Passed, Test: #4477: Passed, Test: #4478: Passed, Test: #4479: Passed, Test: #4480: Passed, 
Test: #4481: Passed, Test: #4482: Passed, Test: #4483: Passed, Test: #4484: Passed, Test: #4485: Passed, Test: #4486: Passed, Test: #4487: Passed, Test: #4488: Passed, Test: #4489: Passed, Test: #4490: Passed, 
Test: #4491: Passed, Test: #4492: Passed, Test: #4493: Passed, Test: #4494: Passed, Test: #4495: Passed, Test: #4496: Passed, Test: #4497: Passed, Test: #4498: Passed, Test: #4499: Passed, Test: #4500: Passed, 
Test: #4501: Passed, Test: #4502: Passed, Test: #4503: Passed, Test: #4504: Passed, Test: #4505: Passed, Test: #4506: Passed, Test: #4507: Passed, Test: #4508: Passed, Test: #4509: Passed, Test: #4510: Passed, 
Test: #4511: Passed, Test: #4512: Passed, Test: #4513: Passed, Test: #4514: Passed, Test: #4515: Passed, Test: #4516: Passed, Test: #4517: Passed, Test: #4518: Passed, Test: #4519: Passed, Test: #4520: Passed, 
Test: #4521: Passed, Test: #4522: Passed, Test: #4523: Passed, Test: #4524: Passed, Test: #4525: Passed, Test: #4526: Passed, Test: #4527: Passed, Test: #4528: Passed, Test: #4529: Passed, Test: #4530: Passed, 
Test: #4531: Passed, Test: #4532: Passed, Test: #4533: Passed, Test: #4534: Passed, Test: #4535: Passed, Test: #4536: Passed, Test: #4537: Passed, Test: #4538: Passed, Test: #4539: Passed, Test: #4540: Passed, 
Test: #4541: Passed, Test: #4542: Passed, Test: #4543: Passed, Test: #4544: Passed, Test: #4545: Passed, Test: #4546: Passed, Test: #4547: Passed, Test: #4548: Passed, Test: #4549: Passed, Test: #4550: Passed, 
Test: #4551: Passed, Test: #4552: Passed, Test: #4553: Passed, Test: #4554: Passed, Test: #4555: Passed, Test: #4556: Passed, Test: #4557: Passed, Test: #4558: Passed, Test: #4559: Passed, Test: #4560: Passed, 
Test: #4561: Passed, Test: #4562: Passed, Test: #4563: Passed, Test: #4564: Passed, Test: #4565: Passed, Test: #4566: Passed, Test: #4567: Passed, Test: #4568: Passed, Test: #4569: Passed, Test: #4570: Passed, 
Test: #4571: Passed, Test: #4572: Passed, Test: #4573: Passed, Test: #4574: Passed, Test: #4575: Passed, Test: #4576: Passed, Test: #4577: Passed, Test: #4578: Passed, Test: #4579: Passed, Test: #4580: Passed, 
Test: #4581: Passed, Test: #4582: Passed, Test: #4583: Passed, Test: #4584: Passed, Test: #4585: Passed, Test: #4586: Passed, Test: #4587: Passed, Test: #4588: Passed, Test: #4589: Passed, Test: #4590: Passed, 
Test: #4591: Passed, Test: #4592: Passed, Test: #4593: Passed, Test: #4594: Passed, Test: #4595: Passed, Test: #4596: Passed, Test: #4597: Passed, Test: #4598: Passed, Test: #4599: Passed, Test: #4600: Passed, 
Test: #4601: Passed, Test: #4602: Passed, Test: #4603: Passed, Test: #4604: Passed, Test: #4605: Passed, Test: #4606: Passed, Test: #4607: Passed, Test: #4608: Passed, Test: #4609: Passed, Test: #4610: Passed, 
Test: #4611: Passed, Test: #4612: Passed, Test: #4613: Passed, Test: #4614: Passed, Test: #4615: Passed, Test: #4616: Passed, Test: #4617: Passed, Test: #4618: Passed, Test: #4619: Passed, Test: #4620: Passed, 
Test: #4621: Passed, Test: #4622: Passed, Test: #4623: Passed, Test: #4624: Passed, Test: #4625: Passed, Test: #4626: Passed, Test: #4627: Passed, Test: #4628: Passed, Test: #4629: Passed, Test: #4630: Passed, 
Test: #4631: Passed, Test: #4632: Passed, Test: #4633: Passed, Test: #4634: Passed, Test: #4635: Passed, Test: #4636: Passed, Test: #4637: Passed, Test: #4638: Passed, Test: #4639: Passed, Test: #4640: Passed, 
Test: #4641: Passed, Test: #4642: Passed, Test: #4643: Passed, Test: #4644: Passed, Test: #4645: Passed, Test: #4646: Passed, Test: #4647: Passed, Test: #4648: Passed, Test: #4649: Passed, Test: #4650: Passed, 
Test: #4651: Passed, Test: #4652: Passed, Test: #4653: Passed, Test: #4654: Passed, Test: #4655: Passed, Test: #4656: Passed, Test: #4657: Passed, Test: #4658: Passed, Test: #4659: Passed, Test: #4660: Passed, 
Test: #4661: Passed, Test: #4662: Passed, Test: #4663: Passed, Test: #4664: Passed, Test: #4665: Passed, Test: #4666: Passed, Test: #4667: Passed, Test: #4668: Passed, Test: #4669: Passed, Test: #4670: Passed, 
Test: #4671: Passed, Test: #4672: Passed, Test: #4673: Passed, Test: #4674: Passed, Test: #4675: Passed, Test: #4676: Passed, Test: #4677: Passed, Test: #4678: Passed, Test: #4679: Passed, Test: #4680: Passed, 
Test: #4681: Passed, Test: #4682: Passed, Test: #4683: Passed, Test: #4684: Passed, Test: #4685: Passed, Test: #4686: Passed, Test: #4687: Passed, Test: #4688: Passed, Test: #4689: Passed, Test: #4690: Passed, 
Test: #4691: Passed, Test: #4692: Passed, Test: #4693: Passed, Test: #4694: Passed, Test: #4695: Passed, Test: #4696: Passed, Test: #4697: Passed, Test: #4698: Passed, Test: #4699: Passed, Test: #4700: Passed, 
Test: #4701: Passed, Test: #4702: Passed, Test: #4703: Passed, Test: #4704: Passed, Test: #4705: Passed, Test: #4706: Passed, Test: #4707: Passed, Test: #4708: Passed, Test: #4709: Passed, Test: #4710: Passed, 
Test: #4711: Passed, Test: #4712: Passed, Test: #4713: Passed, Test: #4714: Passed, Test: #4715: Passed, Test: #4716: Passed, Test: #4717: Passed, Test: #4718: Passed, Test: #4719: Passed, Test: #4720: Passed, 
Test: #4721: Passed, Test: #4722: Passed, Test: #4723: Passed, Test: #4724: Passed, Test: #4725: Passed, Test: #4726: Passed, Test: #4727: Passed, Test: #4728: Passed, Test: #4729: Passed, Test: #4730: Passed, 
Test: #4731: Passed, Test: #4732: Passed, Test: #4733: Passed, Test: #4734: Passed, Test: #4735: Passed, Test: #4736: Passed, Test: #4737: Passed, Test: #4738: Passed, Test: #4739: Passed, Test: #4740: Passed, 
Test: #4741: Passed, Test: #4742: Passed, Test: #4743: Passed, Test: #4744: Passed, Test: #4745: Passed, Test: #4746: Passed, Test: #4747: Passed, Test: #4748: Passed, Test: #4749: Passed, Test: #4750: Passed, 
Test: #4751: Passed, Test: #4752: Passed, Test: #4753: Passed, Test: #4754: Passed, Test: #4755: Passed, Test: #4756: Passed, Test: #4757: Passed, Test: #4758: Passed, Test: #4759: Passed, Test: #4760: Passed, 
Test: #4761: Passed, Test: #4762: Passed, Test: #4763: Passed, Test: #4764: Passed, Test: #4765: Passed, Test: #4766: Passed, Test: #4767: Passed, Test: #4768: Passed, Test: #4769: Passed, Test: #4770: Passed, 
Test: #4771: Passed, Test: #4772: Passed, Test: #4773: Passed, Test: #4774: Passed, Test: #4775: Passed, Test: #4776: Passed, Test: #4777: Passed, Test: #4778: Passed, Test: #4779: Passed, Test: #4780: Passed, 
Test: #4781: Passed, Test: #4782: Passed, Test: #4783: Passed, Test: #4784: Passed, Test: #4785: Passed, Test: #4786: Passed, Test: #4787: Passed, Test: #4788: Passed, Test: #4789: Passed, Test: #4790: Passed, 
Test: #4791: Passed, Test: #4792: Passed, Test: #4793: Passed, Test: #4794: Passed, Test: #4795: Passed, Test: #4796: Passed, Test: #4797: Passed, Test: #4798: Passed, Test: #4799: Passed, Test: #4800: Passed, 
Test: #4801: Passed, Test: #4802: Passed, Test: #4803: Passed, Test: #4804: Passed, Test: #4805: Passed, Test: #4806: Passed, Test: #4807: Passed, Test: #4808: Passed, Test: #4809: Passed, Test: #4810: Passed, 
Test: #4811: Passed, Test: #4812: Passed, Test: #4813: Passed, Test: #4814: Passed, Test: #4815: Passed, Test: #4816: Passed, Test: #4817: Passed, Test: #4818: Passed, Test: #4819: Passed, Test: #4820: Passed, 
Test: #4821: Passed, Test: #4822: Passed, Test: #4823: Passed, Test: #4824: Passed, Test: #4825: Passed, Test: #4826: Passed, Test: #4827: Passed, Test: #4828: Passed, Test: #4829: Passed, Test: #4830: Passed, 
Test: #4831: Passed, Test: #4832: Passed, Test: #4833: Passed, Test: #4834: Passed, Test: #4835: Passed, Test: #4836: Passed, Test: #4837: Passed, Test: #4838: Passed, Test: #4839: Passed, Test: #4840: Passed, 
Test: #4841: Passed, Test: #4842: Passed, Test: #4843: Passed, Test: #4844: Passed, Test: #4845: Passed, Test: #4846: Passed, Test: #4847: Passed, Test: #4848: Passed, Test: #4849: Passed, Test: #4850: Passed, 
Test: #4851: Passed, Test: #4852: Passed, Test: #4853: Passed, Test: #4854: Passed, Test: #4855: Passed, Test: #4856: Passed, Test: #4857: Passed, Test: #4858: Passed, Test: #4859: Passed, Test: #4860: Passed, 
Test: #4861: Passed, Test: #4862: Passed, Test: #4863: Passed, Test: #4864: Passed, Test: #4865: Passed, Test: #4866: Passed, Test: #4867: Passed, Test: #4868: Passed, Test: #4869: Passed, Test: #4870: Passed, 
Test: #4871: Passed, Test: #4872: Passed, Test: #4873: Passed, Test: #4874: Passed, Test: #4875: Passed, Test: #4876: Passed, Test: #4877: Passed, Test: #4878: Passed, Test: #4879: Passed, Test: #4880: Passed, 
Test: #4881: Passed, Test: #4882: Passed, Test: #4883: Passed, Test: #4884: Passed, Test: #4885: Passed, Test: #4886: Passed, Test: #4887: Passed, Test: #4888: Passed, Test: #4889: Passed, Test: #4890: Passed, 
Test: #4891: Passed, Test: #4892: Passed, Test: #4893: Passed, Test: #4894: Passed, Test: #4895: Passed, Test: #4896: Passed, Test: #4897: Passed, Test: #4898: Passed, Test: #4899: Passed, Test: #4900: Passed, 
Test: #4901: Passed, Test: #4902: Passed, Test: #4903: Passed, Test: #4904: Passed, Test: #4905: Passed, Test: #4906: Passed, Test: #4907: Passed, Test: #4908: Passed, Test: #4909: Passed, Test: #4910: Passed, 
Test: #4911: Passed, Test: #4912: Passed, Test: #4913: Passed, Test: #4914: Passed, Test: #4915: Passed, Test: #4916: Passed, Test: #4917: Passed, Test: #4918: Passed, Test: #4919: Passed, Test: #4920: Passed, 
Test: #4921: Passed, Test: #4922: Passed, Test: #4923: Passed, Test: #4924: Passed, Test: #4925: Passed, Test: #4926: Passed, Test: #4927: Passed, Test: #4928: Passed, Test: #4929: Passed, Test: #4930: Passed, 
Test: #4931: Passed, Test: #4932: Passed, Test: #4933: Passed, Test: #4934: Passed, Test: #4935: Passed, Test: #4936: Passed, Test: #4937: Passed, Test: #4938: Passed, Test: #4939: Passed, Test: #4940: Passed, 
Test: #4941: Passed, Test: #4942: Passed, Test: #4943: Passed, Test: #4944: Passed, Test: #4945: Passed, Test: #4946: Passed, Test: #4947: Passed, Test: #4948: Passed, Test: #4949: Passed, Test: #4950: Passed, 
Test: #4951: Passed, Test: #4952: Passed, Test: #4953: Passed, Test: #4954: Passed, Test: #4955: Passed, Test: #4956: Passed, Test: #4957: Passed, Test: #4958: Passed, Test: #4959: Passed, Test: #4960: Passed, 
Test: #4961: Passed, Test: #4962: Passed, Test: #4963: Passed, Test: #4964: Passed, Test: #4965: Passed, Test: #4966: Passed, Test: #4967: Passed, Test: #4968: Passed, Test: #4969: Passed, Test: #4970: Passed, 
Test: #4971: Passed, Test: #4972: Passed, Test: #4973: Passed, Test: #4974: Passed, Test: #4975: Passed, Test: #4976: Passed, Test: #4977: Passed, Test: #4978: Passed, Test: #4979: Passed, Test: #4980: Passed, 
Test: #4981: Passed, Test: #4982: Passed, Test: #4983: Passed, Test: #4984: Passed, Test: #4985: Passed, Test: #4986: Passed, Test: #4987: Passed, Test: #4988: Passed, Test: #4989: Passed, Test: #4990: Passed, 
Test: #4991: Passed, Test: #4992: Passed, Test: #4993: Passed, Test: #4994: Passed, Test: #4995: Passed, Test: #4996: Passed, Test: #4997: Passed, Test: #4998: Passed, Test: #4999: Passed, Test: #5000: Passed, 
Test: #5001: Passed, Test: #5002: Passed, Test: #5003: Passed, Test: #5004: Passed, Test: #5005: Passed, Test: #5006: Passed, Test: #5007: Passed, Test: #5008: Passed, Test: #5009: Passed, Test: #5010: Passed, 
Test: #5011: Passed, Test: #5012: Passed, Test: #5013: Passed, Test: #5014: Passed, Test: #5015: Passed, Test: #5016: Passed, Test: #5017: Passed, Test: #5018: Passed, Test: #5019: Passed, Test: #5020: Passed, 
Test: #5021: Passed, Test: #5022: Passed, Test: #5023: Passed, Test: #5024: Passed, Test: #5025: Passed, Test: #5026: Passed, Test: #5027: Passed, Test: #5028: Passed, Test: #5029: Passed, Test: #5030: Passed, 
Test: #5031: Passed, Test: #5032: Passed, Test: #5033: Passed, Test: #5034: Passed, Test: #5035: Passed, Test: #5036: Passed, Test: #5037: Passed, Test: #5038: Passed, Test: #5039: Passed, Test: #5040: Passed, 
Test: #5041: Passed, Test: #5042: Passed, Test: #5043: Passed, Test: #5044: Passed, Test: #5045: Passed, Test: #5046: Passed, Test: #5047: Passed, Test: #5048: Passed, Test: #5049: Passed, Test: #5050: Passed, 
Test: #5051: Passed, Test: #5052: Passed, Test: #5053: Passed, Test: #5054: Passed, Test: #5055: Passed, Test: #5056: Passed, Test: #5057: Passed, Test: #5058: Passed, Test: #5059: Passed, Test: #5060: Passed, 
Test: #5061: Passed, Test: #5062: Passed, Test: #5063: Passed, Test: #5064: Passed, Test: #5065: Passed, Test: #5066: Passed, Test: #5067: Passed, Test: #5068: Passed, Test: #5069: Passed, Test: #5070: Passed, 
Test: #5071: Passed, Test: #5072: Passed, Test: #5073: Passed, Test: #5074: Passed, Test: #5075: Passed, Test: #5076: Passed, Test: #5077: Passed, Test: #5078: Passed, Test: #5079: Passed, Test: #5080: Passed, 
Test: #5081: Passed, Test: #5082: Passed, Test: #5083: Passed, Test: #5084: Passed, Test: #5085: Passed, Test: #5086: Passed, Test: #5087: Passed, Test: #5088: Passed, Test: #5089: Passed, Test: #5090: Passed, 
Test: #5091: Passed, Test: #5092: Passed, Test: #5093: Passed, Test: #5094: Passed, Test: #5095: Passed, Test: #5096: Passed, Test: #5097: Passed, Test: #5098: Passed, Test: #5099: Passed, Test: #5100: Passed, 
Test: #5101: Passed, Test: #5102: Passed, Test: #5103: Passed, Test: #5104: Passed, Test: #5105: Passed, Test: #5106: Passed, Test: #5107: Passed, Test: #5108: Passed, Test: #5109: Passed, Test: #5110: Passed, 
Test: #5111: Passed, Test: #5112: Passed, Test: #5113: Passed, Test: #5114: Passed, Test: #5115: Passed, Test: #5116: Passed, Test: #5117: Passed, Test: #5118: Passed, Test: #5119: Passed, Test: #5120: Passed, 
Test: #5121: Passed, Test: #5122: Passed, Test: #5123: Passed, Test: #5124: Passed, Test: #5125: Passed, Test: #5126: Passed, Test: #5127: Passed, Test: #5128: Passed, Test: #5129: Passed, Test: #5130: Passed, 
Test: #5131: Passed, Test: #5132: Passed, Test: #5133: Passed, Test: #5134: Passed, Test: #5135: Passed, Test: #5136: Passed, Test: #5137: Passed, Test: #5138: Passed, Test: #5139: Passed, Test: #5140: Passed, 
Test: #5141: Passed, Test: #5142: Passed, Test: #5143: Passed, Test: #5144: Passed, Test: #5145: Passed, Test: #5146: Passed, Test: #5147: Passed, Test: #5148: Passed, Test: #5149: Passed, Test: #5150: Passed, 
Test: #5151: Passed, Test: #5152: Passed, Test: #5153: Passed, Test: #5154: Passed, Test: #5155: Passed, Test: #5156: Passed, Test: #5157: Passed, Test: #5158: Passed, Test: #5159: Passed, Test: #5160: Passed, 
Test: #5161: Passed, Test: #5162: Passed, Test: #5163: Passed, Test: #5164: Passed, Test: #5165: Passed, Test: #5166: Passed, Test: #5167: Passed, Test: #5168: Passed, Test: #5169: Passed, Test: #5170: Passed, 
Test: #5171: Passed, Test: #5172: Passed, Test: #5173: Passed, Test: #5174: Passed, Test: #5175: Passed, Test: #5176: Passed, Test: #5177: Passed, Test: #5178: Passed, Test: #5179: Passed, Test: #5180: Passed, 
Test: #5181: Passed, Test: #5182: Passed, Test: #5183: Passed, Test: #5184: Passed, Test: #5185: Passed, Test: #5186: Passed, Test: #5187: Passed, Test: #5188: Passed, Test: #5189: Passed, Test: #5190: Passed, 
Test: #5191: Passed, Test: #5192: Passed, Test: #5193: Passed, Test: #5194: Passed, Test: #5195: Passed, Test: #5196: Passed, Test: #5197: Passed, Test: #5198: Passed, Test: #5199: Passed, Test: #5200: Passed, 
Test: #5201: Passed, Test: #5202: Passed, Test: #5203: Passed, Test: #5204: Passed, Test: #5205: Passed, Test: #5206: Passed, Test: #5207: Passed, Test: #5208: Passed, Test: #5209: Passed, Test: #5210: Passed, 
Test: #5211: Passed, Test: #5212: Passed, Test: #5213: Passed, Test: #5214: Passed, Test: #5215: Passed, Test: #5216: Passed, Test: #5217: Passed, Test: #5218: Passed, Test: #5219: Passed, Test: #5220: Passed, 
Test: #5221: Passed, Test: #5222: Passed, Test: #5223: Passed, Test: #5224: Passed, Test: #5225: Passed, Test: #5226: Passed, Test: #5227: Passed, Test: #5228: Passed, Test: #5229: Passed, Test: #5230: Passed, 
Test: #5231: Passed, Test: #5232: Passed, Test: #5233: Passed, Test: #5234: Passed, Test: #5235: Passed, Test: #5236: Passed, Test: #5237: Passed, Test: #5238: Passed, Test: #5239: Passed, Test: #5240: Passed, 
Test: #5241: Passed, Test: #5242: Passed, Test: #5243: Passed, Test: #5244: Passed, Test: #5245: Passed, Test: #5246: Passed, Test: #5247: Passed, Test: #5248: Passed, Test: #5249: Passed, Test: #5250: Passed, 
Test: #5251: Passed, Test: #5252: Passed, Test: #5253: Passed, Test: #5254: Passed, Test: #5255: Passed, Test: #5256: Passed, Test: #5257: Passed, Test: #5258: Passed, Test: #5259: Passed, Test: #5260: Passed, 
Test: #5261: Passed, Test: #5262: Passed, Test: #5263: Passed, Test: #5264: Passed, Test: #5265: Passed, Test: #5266: Passed, Test: #5267: Passed, Test: #5268: Passed, Test: #5269: Passed, Test: #5270: Passed, 
Test: #5271: Passed, Test: #5272: Passed, Test: #5273: Passed, Test: #5274: Passed, Test: #5275: Passed, Test: #5276: Passed, Test: #5277: Passed, Test: #5278: Passed, Test: #5279: Passed, Test: #5280: Passed, 
Test: #5281: Passed, Test: #5282: Passed, Test: #5283: Passed, Test: #5284: Passed, Test: #5285: Passed, Test: #5286: Passed, Test: #5287: Passed, Test: #5288: Passed, Test: #5289: Passed, Test: #5290: Passed, 
Test: #5291: Passed, Test: #5292: Passed, Test: #5293: Passed, Test: #5294: Passed, Test: #5295: Passed, Test: #5296: Passed, Test: #5297: Passed, Test: #5298: Passed, Test: #5299: Passed, Test: #5300: Passed, 
Test: #5301: Passed, Test: #5302: Passed, Test: #5303: Passed, Test: #5304: Passed, Test: #5305: Passed, Test: #5306: Passed, Test: #5307: Passed, Test: #5308: Passed, Test: #5309: Passed, Test: #5310: Passed, 
Test: #5311: Passed, Test: #5312: Passed, Test: #5313: Passed, Test: #5314: Passed, Test: #5315: Passed, Test: #5316: Passed, Test: #5317: Passed, Test: #5318: Passed, Test: #5319: Passed, Test: #5320: Passed, 
Test: #5321: Passed, Test: #5322: Passed, Test: #5323: Passed, Test: #5324: Passed, Test: #5325: Passed, Test: #5326: Passed, Test: #5327: Passed, Test: #5328: Passed, Test: #5329: Passed, Test: #5330: Passed, 
Test: #5331: Passed, Test: #5332: Passed, Test: #5333: Passed, Test: #5334: Passed, Test: #5335: Passed, Test: #5336: Passed, Test: #5337: Passed, Test: #5338: Passed, Test: #5339: Passed, Test: #5340: Passed, 
Test: #5341: Passed, Test: #5342: Passed, Test: #5343: Passed, Test: #5344: Passed, Test: #5345: Passed, Test: #5346: Passed, Test: #5347: Passed, Test: #5348: Passed, Test: #5349: Passed, Test: #5350: Passed, 
Test: #5351: Passed, Test: #5352: Passed, Test: #5353: Passed, Test: #5354: Passed, Test: #5355: Passed, Test: #5356: Passed, Test: #5357: Passed, Test: #5358: Passed, Test: #5359: Passed, Test: #5360: Passed, 
Test: #5361: Passed, Test: #5362: Passed, Test: #5363: Passed, Test: #5364: Passed, Test: #5365: Passed, Test: #5366: Passed, Test: #5367: Passed, Test: #5368: Passed, Test: #5369: Passed, Test: #5370: Passed, 
Test: #5371: Passed, Test: #5372: Passed, Test: #5373: Passed, Test: #5374: Passed, Test: #5375: Passed, Test: #5376: Passed, Test: #5377: Passed, Test: #5378: Passed, Test: #5379: Passed, Test: #5380: Passed, 
Test: #5381: Passed, Test: #5382: Passed, Test: #5383: Passed, Test: #5384: Passed, Test: #5385: Passed, Test: #5386: Passed, Test: #5387: Passed, Test: #5388: Passed, Test: #5389: Passed, Test: #5390: Passed, 
Test: #5391: Passed, Test: #5392: Passed, Test: #5393: Passed, Test: #5394: Passed, Test: #5395: Passed, Test: #5396: Passed, Test: #5397: Passed, Test: #5398: Passed, Test: #5399: Passed, Test: #5400: Passed, 
Test: #5401: Passed, Test: #5402: Passed, Test: #5403: Passed, Test: #5404: Passed, Test: #5405: Passed, Test: #5406: Passed, Test: #5407: Passed, Test: #5408: Passed, Test: #5409: Passed, Test: #5410: Passed, 
Test: #5411: Passed, Test: #5412: Passed, Test: #5413: Passed, Test: #5414: Passed, Test: #5415: Passed, Test: #5416: Passed, Test: #5417: Passed, Test: #5418: Passed, Test: #5419: Passed, Test: #5420: Passed, 
Test: #5421: Passed, Test: #5422: Passed, Test: #5423: Passed, Test: #5424: Passed, Test: #5425: Passed, Test: #5426: Passed, Test: #5427: Passed, Test: #5428: Passed, Test: #5429: Passed, Test: #5430: Passed, 
Test: #5431: Passed, Test: #5432: Passed, Test: #5433: Passed, Test: #5434: Passed, Test: #5435: Passed, Test: #5436: Passed, Test: #5437: Passed, Test: #5438: Passed, Test: #5439: Passed, Test: #5440: Passed, 
Test: #5441: Passed, Test: #5442: Passed, Test: #5443: Passed, Test: #5444: Passed, Test: #5445: Passed, Test: #5446: Passed, Test: #5447: Passed, Test: #5448: Passed, Test: #5449: Passed, Test: #5450: Passed, 
Test: #5451: Passed, Test: #5452: Passed, Test: #5453: Passed, Test: #5454: Passed, Test: #5455: Passed, Test: #5456: Passed, Test: #5457: Passed, Test: #5458: Passed, Test: #5459: Passed, Test: #5460: Passed, 
Test: #5461: Passed, Test: #5462: Passed, Test: #5463: Passed, Test: #5464: Passed, Test: #5465: Passed, Test: #5466: Passed, Test: #5467: Passed, Test: #5468: Passed, Test: #5469: Passed, Test: #5470: Passed, 
Test: #5471: Passed, Test: #5472: Passed, Test: #5473: Passed, Test: #5474: Passed, Test: #5475: Passed, Test: #5476: Passed, Test: #5477: Passed, Test: #5478: Passed, Test: #5479: Passed, Test: #5480: Passed, 
Test: #5481: Passed, Test: #5482: Passed, Test: #5483: Passed, Test: #5484: Passed, Test: #5485: Passed, Test: #5486: Passed, Test: #5487: Passed, Test: #5488: Passed, Test: #5489: Passed, Test: #5490: Passed, 
Test: #5491: Passed, Test: #5492: Passed, Test: #5493: Passed, Test: #5494: Passed, Test: #5495: Passed, Test: #5496: Passed, Test: #5497: Passed, Test: #5498: Passed, Test: #5499: Passed, Test: #5500: Passed, 
Test: #5501: Passed, Test: #5502: Passed, Test: #5503: Passed, Test: #5504: Passed, Test: #5505: Passed, Test: #5506: Passed, Test: #5507: Passed, Test: #5508: Passed, Test: #5509: Passed, Test: #5510: Passed, 
Test: #5511: Passed, Test: #5512: Passed, Test: #5513: Passed, Test: #5514: Passed, Test: #5515: Passed, Test: #5516: Passed, Test: #5517: Passed, Test: #5518: Passed, Test: #5519: Passed, Test: #5520: Passed, 
Test: #5521: Passed, Test: #5522: Passed, Test: #5523: Passed, Test: #5524: Passed, Test: #5525: Passed, Test: #5526: Passed, Test: #5527: Passed, Test: #5528: Passed, Test: #5529: Passed, Test: #5530: Passed, 
Test: #5531: Passed, Test: #5532: Passed, Test: #5533: Passed, Test: #5534: Passed, Test: #5535: Passed, Test: #5536: Passed, Test: #5537: Passed, Test: #5538: Passed, Test: #5539: Passed, Test: #5540: Passed, 
Test: #5541: Passed, Test: #5542: Passed, Test: #5543: Passed, Test: #5544: Passed, Test: #5545: Passed, Test: #5546: Passed, Test: #5547: Passed, Test: #5548: Passed, Test: #5549: Passed, Test: #5550: Passed, 
Test: #5551: Passed, Test: #5552: Passed, Test: #5553: Passed, Test: #5554: Passed, Test: #5555: Passed, Test: #5556: Passed, Test: #5557: Passed, Test: #5558: Passed, Test: #5559: Passed, Test: #5560: Passed, 
Test: #5561: Passed, Test: #5562: Passed, Test: #5563: Passed, Test: #5564: Passed, Test: #5565: Passed, Test: #5566: Passed, Test: #5567: Passed, Test: #5568: Passed, Test: #5569: Passed, Test: #5570: Passed, 
Test: #5571: Passed, Test: #5572: Passed, Test: #5573: Passed, Test: #5574: Passed, Test: #5575: Passed, Test: #5576: Passed, Test: #5577: Passed, Test: #5578: Passed, Test: #5579: Passed, Test: #5580: Passed, 
Test: #5581: Passed, Test: #5582: Passed, Test: #5583: Passed, Test: #5584: Passed, Test: #5585: Passed, Test: #5586: Passed, Test: #5587: Passed, Test: #5588: Passed, Test: #5589: Passed, Test: #5590: Passed, 
Test: #5591: Passed, Test: #5592: Passed, Test: #5593: Passed, Test: #5594: Passed, Test: #5595: Passed, Test: #5596: Passed, Test: #5597: Passed, Test: #5598: Passed, Test: #5599: Passed, Test: #5600: Passed, 
Test: #5601: Passed, Test: #5602: Passed, Test: #5603: Passed, Test: #5604: Passed, Test: #5605: Passed, Test: #5606: Passed, Test: #5607: Passed, Test: #5608: Passed, Test: #5609: Passed, Test: #5610: Passed, 
Test: #5611: Passed, Test: #5612: Passed, Test: #5613: Passed, Test: #5614: Passed, Test: #5615: Passed, Test: #5616: Passed, Test: #5617: Passed, Test: #5618: Passed, Test: #5619: Passed, Test: #5620: Passed, 
Test: #5621: Passed, Test: #5622: Passed, Test: #5623: Passed, Test: #5624: Passed, Test: #5625: Passed, Test: #5626: Passed, Test: #5627: Passed, Test: #5628: Passed, Test: #5629: Passed, Test: #5630: Passed, 
Test: #5631: Passed, Test: #5632: Passed, Test: #5633: Passed, Test: #5634: Passed, Test: #5635: Passed, Test: #5636: Passed, Test: #5637: Passed, Test: #5638: Passed, Test: #5639: Passed, Test: #5640: Passed, 
Test: #5641: Passed, Test: #5642: Passed, Test: #5643: Passed, Test: #5644: Passed, Test: #5645: Passed, Test: #5646: Passed, Test: #5647: Passed, Test: #5648: Passed, Test: #5649: Passed, Test: #5650: Passed, 
Test: #5651: Passed, Test: #5652: Passed, Test: #5653: Passed, Test: #5654: Passed, Test: #5655: Passed, Test: #5656: Passed, Test: #5657: Passed, Test: #5658: Passed, Test: #5659: Passed, Test: #5660: Passed, 
Test: #5661: Passed, Test: #5662: Passed, Test: #5663: Passed, Test: #5664: Passed, Test: #5665: Passed, Test: #5666: Passed, Test: #5667: Passed, Test: #5668: Passed, Test: #5669: Passed, Test: #5670: Passed, 
Test: #5671: Passed, Test: #5672: Passed, Test: #5673: Passed, Test: #5674: Passed, Test: #5675: Passed, Test: #5676: Passed, Test: #5677: Passed, Test: #5678: Passed, Test: #5679: Passed, Test: #5680: Passed, 
Test: #5681: Passed, Test: #5682: Passed, Test: #5683: Passed, Test: #5684: Passed, Test: #5685: Passed, Test: #5686: Passed, Test: #5687: Passed, Test: #5688: Passed, Test: #5689: Passed, Test: #5690: Passed, 
Test: #5691: Passed, Test: #5692: Passed, Test: #5693: Passed, Test: #5694: Passed, Test: #5695: Passed, Test: #5696: Passed, Test: #5697: Passed, Test: #5698: Passed, Test: #5699: Passed, Test: #5700: Passed, 
Test: #5701: Passed, Test: #5702: Passed, Test: #5703: Passed, Test: #5704: Passed, Test: #5705: Passed, Test: #5706: Passed, Test: #5707: Passed, Test: #5708: Passed, Test: #5709: Passed, Test: #5710: Passed, 
Test: #5711: Passed, Test: #5712: Passed, Test: #5713: Passed, Test: #5714: Passed, Test: #5715: Passed, Test: #5716: Passed, Test: #5717: Passed, Test: #5718: Passed, Test: #5719: Passed, Test: #5720: Passed, 
Test: #5721: Passed, Test: #5722: Passed, Test: #5723: Passed, Test: #5724: Passed, Test: #5725: Passed, Test: #5726: Passed, Test: #5727: Passed, Test: #5728: Passed, Test: #5729: Passed, Test: #5730: Passed, 
Test: #5731: Passed, Test: #5732: Passed, Test: #5733: Passed, Test: #5734: Passed, Test: #5735: Passed, Test: #5736: Passed, Test: #5737: Passed, Test: #5738: Passed, Test: #5739: Passed, Test: #5740: Passed, 
Test: #5741: Passed, Test: #5742: Passed, Test: #5743: Passed, Test: #5744: Passed, Test: #5745: Passed, Test: #5746: Passed, Test: #5747: Passed, Test: #5748: Passed, Test: #5749: Passed, Test: #5750: Passed, 
Test: #5751: Passed, Test: #5752: Passed, Test: #5753: Passed, Test: #5754: Passed, Test: #5755: Passed, Test: #5756: Passed, Test: #5757: Passed, Test: #5758: Passed, Test: #5759: Passed, Test: #5760: Passed, 
Test: #5761: Passed, Test: #5762: Passed, Test: #5763: Passed, Test: #5764: Passed, Test: #5765: Passed, Test: #5766: Passed, Test: #5767: Passed, Test: #5768: Passed, Test: #5769: Passed, Test: #5770: Passed, 
Test: #5771: Passed, Test: #5772: Passed, Test: #5773: Passed, Test: #5774: Passed, Test: #5775: Passed, Test: #5776: Passed, Test: #5777: Passed, Test: #5778: Passed, Test: #5779: Passed, Test: #5780: Passed, 
Test: #5781: Passed, Test: #5782: Passed, Test: #5783: Passed, Test: #5784: Passed, Test: #5785: Passed, Test: #5786: Passed, Test: #5787: Passed, Test: #5788: Passed, Test: #5789: Passed, Test: #5790: Passed, 
Test: #5791: Passed, Test: #5792: Passed, Test: #5793: Passed, Test: #5794: Passed, Test: #5795: Passed, Test: #5796: Passed, Test: #5797: Passed, Test: #5798: Passed, Test: #5799: Passed, Test: #5800: Passed, 
Test: #5801: Passed, Test: #5802: Passed, Test: #5803: Passed, Test: #5804: Passed, Test: #5805: Passed, Test: #5806: Passed, Test: #5807: Passed, Test: #5808: Passed, Test: #5809: Passed, Test: #5810: Passed, 
Test: #5811: Passed, Test: #5812: Passed, Test: #5813: Passed, Test: #5814: Passed, Test: #5815: Passed, Test: #5816: Passed, Test: #5817: Passed, Test: #5818: Passed, Test: #5819: Passed, Test: #5820: Passed, 
Test: #5821: Passed, Test: #5822: Passed, Test: #5823: Passed, Test: #5824: Passed, Test: #5825: Passed, Test: #5826: Passed, Test: #5827: Passed, Test: #5828: Passed, Test: #5829: Passed, Test: #5830: Passed, 
Test: #5831: Passed, Test: #5832: Passed, Test: #5833: Passed, Test: #5834: Passed, Test: #5835: Passed, Test: #5836: Passed, Test: #5837: Passed, Test: #5838: Passed, Test: #5839: Passed, Test: #5840: Passed, 
Test: #5841: Passed, Test: #5842: Passed, Test: #5843: Passed, Test: #5844: Passed, Test: #5845: Passed, Test: #5846: Passed, Test: #5847: Passed, Test: #5848: Passed, Test: #5849: Passed, Test: #5850: Passed, 
Test: #5851: Passed, Test: #5852: Passed, Test: #5853: Passed, Test: #5854: Passed, Test: #5855: Passed, Test: #5856: Passed, Test: #5857: Passed, Test: #5858: Passed, Test: #5859: Passed, Test: #5860: Passed, 
Test: #5861: Passed, Test: #5862: Passed, Test: #5863: Passed, Test: #5864: Passed, Test: #5865: Passed, Test: #5866: Passed, Test: #5867: Passed, Test: #5868: Passed, Test: #5869: Passed, Test: #5870: Passed, 
Test: #5871: Passed, Test: #5872: Passed, Test: #5873: Passed, Test: #5874: Passed, Test: #5875: Passed, Test: #5876: Passed, Test: #5877: Passed, Test: #5878: Passed, Test: #5879: Passed, Test: #5880: Passed, 
Test: #5881: Passed, Test: #5882: Passed, Test: #5883: Passed, Test: #5884: Passed, Test: #5885: Passed, Test: #5886: Passed, Test: #5887: Passed, Test: #5888: Passed, Test: #5889: Passed, Test: #5890: Passed, 
Test: #5891: Passed, Test: #5892: Passed, Test: #5893: Passed, Test: #5894: Passed, Test: #5895: Passed, Test: #5896: Passed, Test: #5897: Passed, Test: #5898: Passed, Test: #5899: Passed, Test: #5900: Passed, 
Test: #5901: Passed, Test: #5902: Passed, Test: #5903: Passed, Test: #5904: Passed, Test: #5905: Passed, Test: #5906: Passed, Test: #5907: Passed, Test: #5908: Passed, Test: #5909: Passed, Test: #5910: Passed, 
Test: #5911: Passed, Test: #5912: Passed, Test: #5913: Passed, Test: #5914: Passed, Test: #5915: Passed, Test: #5916: Passed, Test: #5917: Passed, Test: #5918: Passed, Test: #5919: Passed, Test: #5920: Passed, 
Test: #5921: Passed, Test: #5922: Passed, Test: #5923: Passed, Test: #5924: Passed, Test: #5925: Passed, Test: #5926: Passed, Test: #5927: Passed, Test: #5928: Passed, Test: #5929: Passed, Test: #5930: Passed, 
Test: #5931: Passed, Test: #5932: Passed, Test: #5933: Passed, Test: #5934: Passed, Test: #5935: Passed, Test: #5936: Passed, Test: #5937: Passed, Test: #5938: Passed, Test: #5939: Passed, Test: #5940: Passed, 
Test: #5941: Passed, Test: #5942: Passed, Test: #5943: Passed, Test: #5944: Passed, Test: #5945: Passed, Test: #5946: Passed, Test: #5947: Passed, Test: #5948: Passed, Test: #5949: Passed, Test: #5950: Passed, 
Test: #5951: Passed, Test: #5952: Passed, Test: #5953: Passed, Test: #5954: Passed, Test: #5955: Passed, Test: #5956: Passed, Test: #5957: Passed, Test: #5958: Passed, Test: #5959: Passed, Test: #5960: Passed, 
Test: #5961: Passed, Test: #5962: Passed, Test: #5963: Passed, Test: #5964: Passed, Test: #5965: Passed, Test: #5966: Passed, Test: #5967: Passed, Test: #5968: Passed, Test: #5969: Passed, Test: #5970: Passed, 
Test: #5971: Passed, Test: #5972: Passed, Test: #5973: Passed, Test: #5974: Passed, Test: #5975: Passed, Test: #5976: Passed, Test: #5977: Passed, Test: #5978: Passed, Test: #5979: Passed, Test: #5980: Passed, 
Test: #5981: Passed, Test: #5982: Passed, Test: #5983: Passed, Test: #5984: Passed, Test: #5985: Passed, Test: #5986: Passed, Test: #5987: Passed, Test: #5988: Passed, Test: #5989: Passed, Test: #5990: Passed, 
Test: #5991: Passed, Test: #5992: Passed, Test: #5993: Passed, Test: #5994: Passed, Test: #5995: Passed, Test: #5996: Passed, Test: #5997: Passed, Test: #5998: Passed, Test: #5999: Passed, Test: #6000: Passed, 
Test: #6001: Passed, Test: #6002: Passed, Test: #6003: Passed, Test: #6004: Passed, Test: #6005: Passed, Test: #6006: Passed, Test: #6007: Passed, Test: #6008: Passed, Test: #6009: Passed, Test: #6010: Passed, 
Test: #6011: Passed, Test: #6012: Passed, Test: #6013: Passed, Test: #6014: Passed, Test: #6015: Passed, Test: #6016: Passed, Test: #6017: Passed, Test: #6018: Passed, Test: #6019: Passed, Test: #6020: Passed, 
Test: #6021: Passed, Test: #6022: Passed, Test: #6023: Passed, Test: #6024: Passed, Test: #6025: Passed, Test: #6026: Passed, Test: #6027: Passed, Test: #6028: Passed, Test: #6029: Passed, Test: #6030: Passed, 
Test: #6031: Passed, Test: #6032: Passed, Test: #6033: Passed, Test: #6034: Passed, Test: #6035: Passed, Test: #6036: Passed, Test: #6037: Passed, Test: #6038: Passed, Test: #6039: Passed, Test: #6040: Passed, 
Test: #6041: Passed, Test: #6042: Passed, Test: #6043: Passed, Test: #6044: Passed, Test: #6045: Passed, Test: #6046: Passed, Test: #6047: Passed, Test: #6048: Passed, Test: #6049: Passed, Test: #6050: Passed, 
Test: #6051: Passed, Test: #6052: Passed, Test: #6053: Passed, Test: #6054: Passed, Test: #6055: Passed, Test: #6056: Passed, Test: #6057: Passed, Test: #6058: Passed, Test: #6059: Passed, Test: #6060: Passed, 
Test: #6061: Passed, Test: #6062: Passed, Test: #6063: Passed, Test: #6064: Passed, Test: #6065: Passed, Test: #6066: Passed, Test: #6067: Passed, Test: #6068: Passed, Test: #6069: Passed, Test: #6070: Passed, 
Test: #6071: Passed, Test: #6072: Passed, Test: #6073: Passed, Test: #6074: Passed, Test: #6075: Passed, Test: #6076: Passed, Test: #6077: Passed, Test: #6078: Passed, Test: #6079: Passed, Test: #6080: Passed, 
Test: #6081: Passed, Test: #6082: Passed, Test: #6083: Passed, Test: #6084: Passed, Test: #6085: Passed, Test: #6086: Passed, Test: #6087: Passed, Test: #6088: Passed, Test: #6089: Passed, Test: #6090: Passed, 
Test: #6091: Passed, Test: #6092: Passed, Test: #6093: Passed, Test: #6094: Passed, Test: #6095: Passed, Test: #6096: Passed, Test: #6097: Passed, Test: #6098: Passed, Test: #6099: Passed, Test: #6100: Passed, 
Test: #6101: Passed, Test: #6102: Passed, Test: #6103: Passed, Test: #6104: Passed, Test: #6105: Passed, Test: #6106: Passed, Test: #6107: Passed, Test: #6108: Passed, Test: #6109: Passed, Test: #6110: Passed, 
Test: #6111: Passed, Test: #6112: Passed, Test: #6113: Passed, Test: #6114: Passed, Test: #6115: Passed, Test: #6116: Passed, Test: #6117: Passed, Test: #6118: Passed, Test: #6119: Passed, Test: #6120: Passed, 
Test: #6121: Passed, Test: #6122: Passed, Test: #6123: Passed, Test: #6124: Passed, Test: #6125: Passed, Test: #6126: Passed, Test: #6127: Passed, Test: #6128: Passed, Test: #6129: Passed, Test: #6130: Passed, 
Test: #6131: Passed, Test: #6132: Passed, Test: #6133: Passed, Test: #6134: Passed, Test: #6135: Passed, Test: #6136: Passed, Test: #6137: Passed, Test: #6138: Passed, Test: #6139: Passed, Test: #6140: Passed, 
Test: #6141: Passed, Test: #6142: Passed, Test: #6143: Passed, Test: #6144: Passed, Test: #6145: Passed, Test: #6146: Passed, Test: #6147: Passed, Test: #6148: Passed, Test: #6149: Passed, Test: #6150: Passed, 
Test: #6151: Passed, Test: #6152: Passed, Test: #6153: Passed, Test: #6154: Passed, Test: #6155: Passed, Test: #6156: Passed, Test: #6157: Passed, Test: #6158: Passed, Test: #6159: Passed, Test: #6160: Passed, 
Test: #6161: Passed, Test: #6162: Passed, Test: #6163: Passed, Test: #6164: Passed, Test: #6165: Passed, Test: #6166: Passed, Test: #6167: Passed, Test: #6168: Passed, Test: #6169: Passed, Test: #6170: Passed, 
Test: #6171: Passed, Test: #6172: Passed, Test: #6173: Passed, Test: #6174: Passed, Test: #6175: Passed, Test: #6176: Passed, Test: #6177: Passed, Test: #6178: Passed, Test: #6179: Passed, Test: #6180: Passed, 
Test: #6181: Passed, Test: #6182: Passed, Test: #6183: Passed, Test: #6184: Passed, Test: #6185: Passed, Test: #6186: Passed, Test: #6187: Passed, Test: #6188: Passed, Test: #6189: Passed, Test: #6190: Passed, 
Test: #6191: Passed, Test: #6192: Passed, Test: #6193: Passed, Test: #6194: Passed, Test: #6195: Passed, Test: #6196: Passed, Test: #6197: Passed, Test: #6198: Passed, Test: #6199: Passed, Test: #6200: Passed, 
Test: #6201: Passed, Test: #6202: Passed, Test: #6203: Passed, Test: #6204: Passed, Test: #6205: Passed, Test: #6206: Passed, Test: #6207: Passed, Test: #6208: Passed, Test: #6209: Passed, Test: #6210: Passed, 
Test: #6211: Passed, Test: #6212: Passed, Test: #6213: Passed, Test: #6214: Passed, Test: #6215: Passed, Test: #6216: Passed, Test: #6217: Passed, Test: #6218: Passed, Test: #6219: Passed, Test: #6220: Passed, 
Test: #6221: Passed, Test: #6222: Passed, Test: #6223: Passed, Test: #6224: Passed, Test: #6225: Passed, Test: #6226: Passed, Test: #6227: Passed, Test: #6228: Passed, Test: #6229: Passed, Test: #6230: Passed, 
Test: #6231: Passed, Test: #6232: Passed, Test: #6233: Passed, Test: #6234: Passed, Test: #6235: Passed, Test: #6236: Passed, Test: #6237: Passed, Test: #6238: Passed, Test: #6239: Passed, Test: #6240: Passed, 
Test: #6241: Passed, Test: #6242: Passed, Test: #6243: Passed, Test: #6244: Passed, Test: #6245: Passed, Test: #6246: Passed, Test: #6247: Passed, Test: #6248: Passed, Test: #6249: Passed, Test: #6250: Passed, 
Test: #6251: Passed, Test: #6252: Passed, Test: #6253: Passed, Test: #6254: Passed, Test: #6255: Passed, Test: #6256: Passed, Test: #6257: Passed, Test: #6258: Passed, Test: #6259: Passed, Test: #6260: Passed, 
Test: #6261: Passed, Test: #6262: Passed, Test: #6263: Passed, Test: #6264: Passed, Test: #6265: Passed, Test: #6266: Passed, Test: #6267: Passed, Test: #6268: Passed, Test: #6269: Passed, Test: #6270: Passed, 
Test: #6271: Passed, Test: #6272: Passed, Test: #6273: Passed, Test: #6274: Passed, Test: #6275: Passed, Test: #6276: Passed, Test: #6277: Passed, Test: #6278: Passed, Test: #6279: Passed, Test: #6280: Passed, 
Test: #6281: Passed, Test: #6282: Passed, Test: #6283: Passed, Test: #6284: Passed, Test: #6285: Passed, Test: #6286: Passed, Test: #6287: Passed, Test: #6288: Passed, Test: #6289: Passed, Test: #6290: Passed, 
Test: #6291: Passed, Test: #6292: Passed, Test: #6293: Passed, Test: #6294: Passed, Test: #6295: Passed, Test: #6296: Passed, Test: #6297: Passed, Test: #6298: Passed, Test: #6299: Passed, Test: #6300: Passed, 
Test: #6301: Passed, Test: #6302: Passed, Test: #6303: Passed, Test: #6304: Passed, Test: #6305: Passed, Test: #6306: Passed, Test: #6307: Passed, Test: #6308: Passed, Test: #6309: Passed, Test: #6310: Passed, 
Test: #6311: Passed, Test: #6312: Passed, Test: #6313: Passed, Test: #6314: Passed, Test: #6315: Passed, Test: #6316: Passed, Test: #6317: Passed, Test: #6318: Passed, Test: #6319: Passed, Test: #6320: Passed, 
Test: #6321: Passed, Test: #6322: Passed, Test: #6323: Passed, Test: #6324: Passed, Test: #6325: Passed, Test: #6326: Passed, Test: #6327: Passed, Test: #6328: Passed, Test: #6329: Passed, Test: #6330: Passed, 
Test: #6331: Passed, Test: #6332: Passed, Test: #6333: Passed, Test: #6334: Passed, Test: #6335: Passed, Test: #6336: Passed, Test: #6337: Passed, Test: #6338: Passed, Test: #6339: Passed, Test: #6340: Passed, 
Test: #6341: Passed, Test: #6342: Passed, Test: #6343: Passed, Test: #6344: Passed, Test: #6345: Passed, Test: #6346: Passed, Test: #6347: Passed, Test: #6348: Passed, Test: #6349: Passed, Test: #6350: Passed, 
Test: #6351: Passed, Test: #6352: Passed, Test: #6353: Passed, Test: #6354: Passed, Test: #6355: Passed, Test: #6356: Passed, Test: #6357: Passed, Test: #6358: Passed, Test: #6359: Passed, Test: #6360: Passed, 
Test: #6361: Passed, Test: #6362: Passed, Test: #6363: Passed, Test: #6364: Passed, Test: #6365: Passed, Test: #6366: Passed, Test: #6367: Passed, Test: #6368: Passed, Test: #6369: Passed, Test: #6370: Passed, 
Test: #6371: Passed, Test: #6372: Passed, Test: #6373: Passed, Test: #6374: Passed, Test: #6375: Passed, Test: #6376: Passed, Test: #6377: Passed, Test: #6378: Passed, Test: #6379: Passed, Test: #6380: Passed, 
Test: #6381: Passed, Test: #6382: Passed, Test: #6383: Passed, Test: #6384: Passed, Test: #6385: Passed, Test: #6386: Passed, Test: #6387: Passed, Test: #6388: Passed, Test: #6389: Passed, Test: #6390: Passed, 
Test: #6391: Passed, Test: #6392: Passed, Test: #6393: Passed, Test: #6394: Passed, Test: #6395: Passed, Test: #6396: Passed, Test: #6397: Passed, Test: #6398: Passed, Test: #6399: Passed, Test: #6400: Passed, 
Test: #6401: Passed, Test: #6402: Passed, Test: #6403: Passed, Test: #6404: Passed, Test: #6405: Passed, Test: #6406: Passed, Test: #6407: Passed, Test: #6408: Passed, Test: #6409: Passed, Test: #6410: Passed, 
Test: #6411: Passed, Test: #6412: Passed, Test: #6413: Passed, Test: #6414: Passed, Test: #6415: Passed, Test: #6416: Passed, Test: #6417: Passed, Test: #6418: Passed, Test: #6419: Passed, Test: #6420: Passed, 
Test: #6421: Passed, Test: #6422: Passed, Test: #6423: Passed, Test: #6424: Passed, Test: #6425: Passed, Test: #6426: Passed, Test: #6427: Passed, Test: #6428: Passed, Test: #6429: Passed, Test: #6430: Passed, 
Test: #6431: Passed, Test: #6432: Passed, Test: #6433: Passed, Test: #6434: Passed, Test: #6435: Passed, Test: #6436: Passed, Test: #6437: Passed, Test: #6438: Passed, Test: #6439: Passed, Test: #6440: Passed, 
Test: #6441: Passed, Test: #6442: Passed, Test: #6443: Passed, Test: #6444: Passed, Test: #6445: Passed, Test: #6446: Passed, Test: #6447: Passed, Test: #6448: Passed, Test: #6449: Passed, Test: #6450: Passed, 
Test: #6451: Passed, Test: #6452: Passed, Test: #6453: Passed, Test: #6454: Passed, Test: #6455: Passed, Test: #6456: Passed, Test: #6457: Passed, Test: #6458: Passed, Test: #6459: Passed, Test: #6460: Passed, 
Test: #6461: Passed, Test: #6462: Passed, Test: #6463: Passed, Test: #6464: Passed, Test: #6465: Passed, Test: #6466: Passed, Test: #6467: Passed, Test: #6468: Passed, Test: #6469: Passed, Test: #6470: Passed, 
Test: #6471: Passed, Test: #6472: Passed, Test: #6473: Passed, Test: #6474: Passed, Test: #6475: Passed, Test: #6476: Passed, Test: #6477: Passed, Test: #6478: Passed, Test: #6479: Passed, Test: #6480: Passed, 
Test: #6481: Passed, Test: #6482: Passed, Test: #6483: Passed, Test: #6484: Passed, Test: #6485: Passed, Test: #6486: Passed, Test: #6487: Passed, Test: #6488: Passed, Test: #6489: Passed, Test: #6490: Passed, 
Test: #6491: Passed, Test: #6492: Passed, Test: #6493: Passed, Test: #6494: Passed, Test: #6495: Passed, Test: #6496: Passed, Test: #6497: Passed, Test: #6498: Passed, Test: #6499: Passed, Test: #6500: Passed, 
Test: #6501: Passed, Test: #6502: Passed, Test: #6503: Passed, Test: #6504: Passed, Test: #6505: Passed, Test: #6506: Passed, Test: #6507: Passed, Test: #6508: Passed, Test: #6509: Passed, Test: #6510: Passed, 
Test: #6511: Passed, Test: #6512: Passed, Test: #6513: Passed, Test: #6514: Passed, Test: #6515: Passed, Test: #6516: Passed, Test: #6517: Passed, Test: #6518: Passed, Test: #6519: Passed, Test: #6520: Passed, 
Test: #6521: Passed, Test: #6522: Passed, Test: #6523: Passed, Test: #6524: Passed, Test: #6525: Passed, Test: #6526: Passed, Test: #6527: Passed, Test: #6528: Passed, Test: #6529: Passed, Test: #6530: Passed, 
Test: #6531: Passed, Test: #6532: Passed, Test: #6533: Passed, Test: #6534: Passed, Test: #6535: Passed, Test: #6536: Passed, Test: #6537: Passed, Test: #6538: Passed, Test: #6539: Passed, Test: #6540: Passed, 
Test: #6541: Passed, Test: #6542: Passed, Test: #6543: Passed, Test: #6544: Passed, Test: #6545: Passed, Test: #6546: Passed, Test: #6547: Passed, Test: #6548: Passed, Test: #6549: Passed, Test: #6550: Passed, 
Test: #6551: Passed, Test: #6552: Passed, Test: #6553: Passed, Test: #6554: Passed, Test: #6555: Passed, Test: #6556: Passed, Test: #6557: Passed, Test: #6558: Passed, Test: #6559: Passed, Test: #6560: Passed, 
Test: #6561: Passed, Test: #6562: Passed, Test: #6563: Passed, Test: #6564: Passed, Test: #6565: Passed, Test: #6566: Passed, Test: #6567: Passed, Test: #6568: Passed, Test: #6569: Passed, Test: #6570: Passed, 
Test: #6571: Passed, Test: #6572: Passed, Test: #6573: Passed, Test: #6574: Passed, Test: #6575: Passed, Test: #6576: Passed, Test: #6577: Passed, Test: #6578: Passed, Test: #6579: Passed, Test: #6580: Passed, 
Test: #6581: Passed, Test: #6582: Passed, Test: #6583: Passed, Test: #6584: Passed, Test: #6585: Passed, Test: #6586: Passed, Test: #6587: Passed, Test: #6588: Passed, Test: #6589: Passed, Test: #6590: Passed, 
Test: #6591: Passed, Test: #6592: Passed, Test: #6593: Passed, Test: #6594: Passed, Test: #6595: Passed, Test: #6596: Passed, Test: #6597: Passed, Test: #6598: Passed, Test: #6599: Passed, Test: #6600: Passed, 
Test: #6601: Passed, Test: #6602: Passed, Test: #6603: Passed, Test: #6604: Passed, Test: #6605: Passed, Test: #6606: Passed, Test: #6607: Passed, Test: #6608: Passed, Test: #6609: Passed, Test: #6610: Passed, 
Test: #6611: Passed, Test: #6612: Passed, Test: #6613: Passed, Test: #6614: Passed, Test: #6615: Passed, Test: #6616: Passed, Test: #6617: Passed, Test: #6618: Passed, Test: #6619: Passed, Test: #6620: Passed, 
Test: #6621: Passed, Test: #6622: Passed, Test: #6623: Passed, Test: #6624: Passed, Test: #6625: Passed, Test: #6626: Passed, Test: #6627: Passed, Test: #6628: Passed, Test: #6629: Passed, Test: #6630: Passed, 
Test: #6631: Passed, Test: #6632: Passed, Test: #6633: Passed, Test: #6634: Passed, Test: #6635: Passed, Test: #6636: Passed, Test: #6637: Passed, Test: #6638: Passed, Test: #6639: Passed, Test: #6640: Passed, 
Test: #6641: Passed, Test: #6642: Passed, Test: #6643: Passed, Test: #6644: Passed, Test: #6645: Passed, Test: #6646: Passed, Test: #6647: Passed, Test: #6648: Passed, Test: #6649: Passed, Test: #6650: Passed, 
Test: #6651: Passed, Test: #6652: Passed, Test: #6653: Passed, Test: #6654: Passed, Test: #6655: Passed, Test: #6656: Passed, Test: #6657: Passed, Test: #6658: Passed, Test: #6659: Passed, Test: #6660: Passed, 
Test: #6661: Passed, Test: #6662: Passed, Test: #6663: Passed, Test: #6664: Passed, Test: #6665: Passed, Test: #6666: Passed, Test: #6667: Passed, Test: #6668: Passed, Test: #6669: Passed, Test: #6670: Passed, 
Test: #6671: Passed, Test: #6672: Passed, Test: #6673: Passed, Test: #6674: Passed, Test: #6675: Passed, Test: #6676: Passed, Test: #6677: Passed, Test: #6678: Passed, Test: #6679: Passed, Test: #6680: Passed, 
Test: #6681: Passed, Test: #6682: Passed, Test: #6683: Passed, Test: #6684: Passed, Test: #6685: Passed, Test: #6686: Passed, Test: #6687: Passed, Test: #6688: Passed, Test: #6689: Passed, Test: #6690: Passed, 
Test: #6691: Passed, Test: #6692: Passed, Test: #6693: Passed, Test: #6694: Passed, Test: #6695: Passed, Test: #6696: Passed, Test: #6697: Passed, Test: #6698: Passed, Test: #6699: Passed, Test: #6700: Passed, 
Test: #6701: Passed, Test: #6702: Passed, Test: #6703: Passed, Test: #6704: Passed, Test: #6705: Passed, Test: #6706: Passed, Test: #6707: Passed, Test: #6708: Passed, Test: #6709: Passed, Test: #6710: Passed, 
Test: #6711: Passed, Test: #6712: Passed, Test: #6713: Passed, Test: #6714: Passed, Test: #6715: Passed, Test: #6716: Passed, Test: #6717: Passed, Test: #6718: Passed, Test: #6719: Passed, Test: #6720: Passed, 
Test: #6721: Passed, Test: #6722: Passed, Test: #6723: Passed, Test: #6724: Passed, Test: #6725: Passed, Test: #6726: Passed, Test: #6727: Passed, Test: #6728: Passed, Test: #6729: Passed, Test: #6730: Passed, 
Test: #6731: Passed, Test: #6732: Passed, Test: #6733: Passed, Test: #6734: Passed, Test: #6735: Passed, Test: #6736: Passed, Test: #6737: Passed, Test: #6738: Passed, Test: #6739: Passed, Test: #6740: Passed, 
Test: #6741: Passed, Test: #6742: Passed, Test: #6743: Passed, Test: #6744: Passed, Test: #6745: Passed, Test: #6746: Passed, Test: #6747: Passed, Test: #6748: Passed, Test: #6749: Passed, Test: #6750: Passed, 
Test: #6751: Passed, Test: #6752: Passed, Test: #6753: Passed, Test: #6754: Passed, Test: #6755: Passed, Test: #6756: Passed, Test: #6757: Passed, Test: #6758: Passed, Test: #6759: Passed, Test: #6760: Passed, 
Test: #6761: Passed, Test: #6762: Passed, Test: #6763: Passed, Test: #6764: Passed, Test: #6765: Passed, Test: #6766: Passed, Test: #6767: Passed, Test: #6768: Passed, Test: #6769: Passed, Test: #6770: Passed, 
Test: #6771: Passed, Test: #6772: Passed, Test: #6773: Passed, Test: #6774: Passed, Test: #6775: Passed, Test: #6776: Passed, Test: #6777: Passed, Test: #6778: Passed, Test: #6779: Passed, Test: #6780: Passed, 
Test: #6781: Passed, Test: #6782: Passed, Test: #6783: Passed, Test: #6784: Passed, Test: #6785: Passed, Test: #6786: Passed, Test: #6787: Passed, Test: #6788: Passed, Test: #6789: Passed, Test: #6790: Passed, 
Test: #6791: Passed, Test: #6792: Passed, Test: #6793: Passed, Test: #6794: Passed, Test: #6795: Passed, Test: #6796: Passed, Test: #6797: Passed, Test: #6798: Passed, Test: #6799: Passed, Test: #6800: Passed, 
Test: #6801: Passed, Test: #6802: Passed, Test: #6803: Passed, Test: #6804: Passed, Test: #6805: Passed, Test: #6806: Passed, Test: #6807: Passed, Test: #6808: Passed, Test: #6809: Passed, Test: #6810: Passed, 
Test: #6811: Passed, Test: #6812: Passed, Test: #6813: Passed, Test: #6814: Passed, Test: #6815: Passed, Test: #6816: Passed, Test: #6817: Passed, Test: #6818: Passed, Test: #6819: Passed, Test: #6820: Passed, 
Test: #6821: Passed, Test: #6822: Passed, Test: #6823: Passed, Test: #6824: Passed, Test: #6825: Passed, Test: #6826: Passed, Test: #6827: Passed, Test: #6828: Passed, Test: #6829: Passed, Test: #6830: Passed, 
Test: #6831: Passed, Test: #6832: Passed, Test: #6833: Passed, Test: #6834: Passed, Test: #6835: Passed, Test: #6836: Passed, Test: #6837: Passed, Test: #6838: Passed, Test: #6839: Passed, Test: #6840: Passed, 
Test: #6841: Passed, Test: #6842: Passed, Test: #6843: Passed, Test: #6844: Passed, Test: #6845: Passed, Test: #6846: Passed, Test: #6847: Passed, Test: #6848: Passed, Test: #6849: Passed, Test: #6850: Passed, 
Test: #6851: Passed, Test: #6852: Passed, Test: #6853: Passed, Test: #6854: Passed, Test: #6855: Passed, Test: #6856: Passed, Test: #6857: Passed, Test: #6858: Passed, Test: #6859: Passed, Test: #6860: Passed, 
Test: #6861: Passed, Test: #6862: Passed, Test: #6863: Passed, Test: #6864: Passed, Test: #6865: Passed, Test: #6866: Passed, Test: #6867: Passed, Test: #6868: Passed, Test: #6869: Passed, Test: #6870: Passed, 
Test: #6871: Passed, Test: #6872: Passed, Test: #6873: Passed, Test: #6874: Passed, Test: #6875: Passed, Test: #6876: Passed, Test: #6877: Passed, Test: #6878: Passed, Test: #6879: Passed, Test: #6880: Passed, 
Test: #6881: Passed, Test: #6882: Passed, Test: #6883: Passed, Test: #6884: Passed, Test: #6885: Passed, Test: #6886: Passed, Test: #6887: Passed, Test: #6888: Passed, Test: #6889: Passed, Test: #6890: Passed, 
Test: #6891: Passed, Test: #6892: Passed, Test: #6893: Passed, Test: #6894: Passed, Test: #6895: Passed, Test: #6896: Passed, Test: #6897: Passed, Test: #6898: Passed, Test: #6899: Passed, Test: #6900: Passed, 
Test: #6901: Passed, Test: #6902: Passed, Test: #6903: Passed, Test: #6904: Passed, Test: #6905: Passed, Test: #6906: Passed, Test: #6907: Passed, Test: #6908: Passed, Test: #6909: Passed, Test: #6910: Passed, 
Test: #6911: Passed, Test: #6912: Passed, Test: #6913: Passed, Test: #6914: Passed, Test: #6915: Passed, Test: #6916: Passed, Test: #6917: Passed, Test: #6918: Passed, Test: #6919: Passed, Test: #6920: Passed, 
Test: #6921: Passed, Test: #6922: Passed, Test: #6923: Passed, Test: #6924: Passed, Test: #6925: Passed, Test: #6926: Passed, Test: #6927: Passed, Test: #6928: Passed, Test: #6929: Passed, Test: #6930: Passed, 
Test: #6931: Passed, Test: #6932: Passed, Test: #6933: Passed, Test: #6934: Passed, Test: #6935: Passed, Test: #6936: Passed, Test: #6937: Passed, Test: #6938: Passed, Test: #6939: Passed, Test: #6940: Passed, 
Test: #6941: Passed, Test: #6942: Passed, Test: #6943: Passed, Test: #6944: Passed, Test: #6945: Passed, Test: #6946: Passed, Test: #6947: Passed, Test: #6948: Passed, Test: #6949: Passed, Test: #6950: Passed, 
Test: #6951: Passed, Test: #6952: Passed, Test: #6953: Passed, Test: #6954: Passed, Test: #6955: Passed, Test: #6956: Passed, Test: #6957: Passed, Test: #6958: Passed, Test: #6959: Passed, Test: #6960: Passed, 
Test: #6961: Passed, Test: #6962: Passed, Test: #6963: Passed, Test: #6964: Passed, Test: #6965: Passed, Test: #6966: Passed, Test: #6967: Passed, Test: #6968: Passed, Test: #6969: Passed, Test: #6970: Passed, 
Test: #6971: Passed, Test: #6972: Passed, Test: #6973: Passed, Test: #6974: Passed, Test: #6975: Passed, Test: #6976: Passed, Test: #6977: Passed, Test: #6978: Passed, Test: #6979: Passed, Test: #6980: Passed, 
Test: #6981: Passed, Test: #6982: Passed, Test: #6983: Passed, Test: #6984: Passed, Test: #6985: Passed, Test: #6986: Passed, Test: #6987: Passed, Test: #6988: Passed, Test: #6989: Passed, Test: #6990: Passed, 
Test: #6991: Passed, Test: #6992: Passed, Test: #6993: Passed, Test: #6994: Passed, Test: #6995: Passed, Test: #6996: Passed, Test: #6997: Passed, Test: #6998: Passed, Test: #6999: Passed, Test: #7000: Passed, 
Test: #7001: Passed, Test: #7002: Passed, Test: #7003: Passed, Test: #7004: Passed, Test: #7005: Passed, Test: #7006: Passed, Test: #7007: Passed, Test: #7008: Passed, Test: #7009: Passed, Test: #7010: Passed, 
Test: #7011: Passed, Test: #7012: Passed, Test: #7013: Passed, Test: #7014: Passed, Test: #7015: Passed, Test: #7016: Passed, Test: #7017: Passed, Test: #7018: Passed, Test: #7019: Passed, Test: #7020: Passed, 
Test: #7021: Passed, Test: #7022: Passed, Test: #7023: Passed, Test: #7024: Passed, Test: #7025: Passed, Test: #7026: Passed, Test: #7027: Passed, Test: #7028: Passed, Test: #7029: Passed, Test: #7030: Passed, 
Test: #7031: Passed, Test: #7032: Passed, Test: #7033: Passed, Test: #7034: Passed, Test: #7035: Passed, Test: #7036: Passed, Test: #7037: Passed, Test: #7038: Passed, Test: #7039: Passed, Test: #7040: Passed, 
Test: #7041: Passed, Test: #7042: Passed, Test: #7043: Passed, Test: #7044: Passed, Test: #7045: Passed, Test: #7046: Passed, Test: #7047: Passed, Test: #7048: Passed, Test: #7049: Passed, Test: #7050: Passed, 
Test: #7051: Passed, Test: #7052: Passed, Test: #7053: Passed, Test: #7054: Passed, Test: #7055: Passed, Test: #7056: Passed, Test: #7057: Passed, Test: #7058: Passed, Test: #7059: Passed, Test: #7060: Passed, 
Test: #7061: Passed, Test: #7062: Passed, Test: #7063: Passed, Test: #7064: Passed, Test: #7065: Passed, Test: #7066: Passed, Test: #7067: Passed, Test: #7068: Passed, Test: #7069: Passed, Test: #7070: Passed, 
Test: #7071: Passed, Test: #7072: Passed, Test: #7073: Passed, Test: #7074: Passed, Test: #7075: Passed, Test: #7076: Passed, Test: #7077: Passed, Test: #7078: Passed, Test: #7079: Passed, Test: #7080: Passed, 
Test: #7081: Passed, Test: #7082: Passed, Test: #7083: Passed, Test: #7084: Passed, Test: #7085: Passed, Test: #7086: Passed, Test: #7087: Passed, Test: #7088: Passed, Test: #7089: Passed, Test: #7090: Passed, 
Test: #7091: Passed, Test: #7092: Passed, Test: #7093: Passed, Test: #7094: Passed, Test: #7095: Passed, Test: #7096: Passed, Test: #7097: Passed, Test: #7098: Passed, Test: #7099: Passed, Test: #7100: Passed, 
Test: #7101: Passed, Test: #7102: Passed, Test: #7103: Passed, Test: #7104: Passed, Test: #7105: Passed, Test: #7106: Passed, Test: #7107: Passed, Test: #7108: Passed, Test: #7109: Passed, Test: #7110: Passed, 
Test: #7111: Passed, Test: #7112: Passed, Test: #7113: Passed, Test: #7114: Passed, Test: #7115: Passed, Test: #7116: Passed, Test: #7117: Passed, Test: #7118: Passed, Test: #7119: Passed, Test: #7120: Passed, 
Test: #7121: Passed, Test: #7122: Passed, Test: #7123: Passed, Test: #7124: Passed, Test: #7125: Passed, Test: #7126: Passed, Test: #7127: Passed, Test: #7128: Passed, Test: #7129: Passed, Test: #7130: Passed, 
Test: #7131: Passed, Test: #7132: Passed, Test: #7133: Passed, Test: #7134: Passed, Test: #7135: Passed, Test: #7136: Passed, Test: #7137: Passed, Test: #7138: Passed, Test: #7139: Passed, Test: #7140: Passed, 
Test: #7141: Passed, Test: #7142: Passed, Test: #7143: Passed, Test: #7144: Passed, Test: #7145: Passed, Test: #7146: Passed, Test: #7147: Passed, Test: #7148: Passed, Test: #7149: Passed, Test: #7150: Passed, 
Test: #7151: Passed, Test: #7152: Passed, Test: #7153: Passed, Test: #7154: Passed, Test: #7155: Passed, Test: #7156: Passed, Test: #7157: Passed, Test: #7158: Passed, Test: #7159: Passed, Test: #7160: Passed, 
Test: #7161: Passed, Test: #7162: Passed, Test: #7163: Passed, Test: #7164: Passed, Test: #7165: Passed, Test: #7166: Passed, Test: #7167: Passed, Test: #7168: Passed, Test: #7169: Passed, Test: #7170: Passed, 
Test: #7171: Passed, Test: #7172: Passed, Test: #7173: Passed, Test: #7174: Passed, Test: #7175: Passed, Test: #7176: Passed, Test: #7177: Passed, Test: #7178: Passed, Test: #7179: Passed, Test: #7180: Passed, 
Test: #7181: Passed, Test: #7182: Passed, Test: #7183: Passed, Test: #7184: Passed, Test: #7185: Passed, Test: #7186: Passed, Test: #7187: Passed, Test: #7188: Passed, Test: #7189: Passed, Test: #7190: Passed, 
Test: #7191: Passed, Test: #7192: Passed, Test: #7193: Passed, Test: #7194: Passed, Test: #7195: Passed, Test: #7196: Passed, Test: #7197: Passed, Test: #7198: Passed, Test: #7199: Passed, Test: #7200: Passed, 
Test: #7201: Passed, Test: #7202: Passed, Test: #7203: Passed, Test: #7204: Passed, Test: #7205: Passed, Test: #7206: Passed, Test: #7207: Passed, Test: #7208: Passed, Test: #7209: Passed, Test: #7210: Passed, 
Test: #7211: Passed, Test: #7212: Passed, Test: #7213: Passed, Test: #7214: Passed, Test: #7215: Passed, Test: #7216: Passed, Test: #7217: Passed, Test: #7218: Passed, Test: #7219: Passed, Test: #7220: Passed, 
Test: #7221: Passed, Test: #7222: Passed, Test: #7223: Passed, Test: #7224: Passed, Test: #7225: Passed, Test: #7226: Passed, Test: #7227: Passed, Test: #7228: Passed, Test: #7229: Passed, Test: #7230: Passed, 
Test: #7231: Passed, Test: #7232: Passed, Test: #7233: Passed, Test: #7234: Passed, Test: #7235: Passed, Test: #7236: Passed, Test: #7237: Passed, Test: #7238: Passed, Test: #7239: Passed, Test: #7240: Passed, 
Test: #7241: Passed, Test: #7242: Passed, Test: #7243: Passed, Test: #7244: Passed, Test: #7245: Passed, Test: #7246: Passed, Test: #7247: Passed, Test: #7248: Passed, Test: #7249: Passed, Test: #7250: Passed, 
Test: #7251: Passed, Test: #7252: Passed, Test: #7253: Passed, Test: #7254: Passed, Test: #7255: Passed, Test: #7256: Passed, Test: #7257: Passed, Test: #7258: Passed, Test: #7259: Passed, Test: #7260: Passed, 
Test: #7261: Passed, Test: #7262: Passed, Test: #7263: Passed, Test: #7264: Passed, Test: #7265: Passed, Test: #7266: Passed, Test: #7267: Passed, Test: #7268: Passed, Test: #7269: Passed, Test: #7270: Passed, 
Test: #7271: Passed, Test: #7272: Passed, Test: #7273: Passed, Test: #7274: Passed, Test: #7275: Passed, Test: #7276: Passed, Test: #7277: Passed, Test: #7278: Passed, Test: #7279: Passed, Test: #7280: Passed, 
Test: #7281: Passed, Test: #7282: Passed, Test: #7283: Passed, Test: #7284: Passed, Test: #7285: Passed, Test: #7286: Passed, Test: #7287: Passed, Test: #7288: Passed, Test: #7289: Passed, Test: #7290: Passed, 
Test: #7291: Passed, Test: #7292: Passed, Test: #7293: Passed, Test: #7294: Passed, Test: #7295: Passed, Test: #7296: Passed, Test: #7297: Passed, Test: #7298: Passed, Test: #7299: Passed, Test: #7300: Passed, 
Test: #7301: Passed, Test: #7302: Passed, Test: #7303: Passed, Test: #7304: Passed, Test: #7305: Passed, Test: #7306: Passed, Test: #7307: Passed, Test: #7308: Passed, Test: #7309: Passed, Test: #7310: Passed, 
Test: #7311: Passed, Test: #7312: Passed, Test: #7313: Passed, Test: #7314: Passed, Test: #7315: Passed, Test: #7316: Passed, Test: #7317: Passed, Test: #7318: Passed, Test: #7319: Passed, Test: #7320: Passed, 
Test: #7321: Passed, Test: #7322: Passed, Test: #7323: Passed, Test: #7324: Passed, Test: #7325: Passed, Test: #7326: Passed, Test: #7327: Passed, Test: #7328: Passed, Test: #7329: Passed, Test: #7330: Passed, 
Test: #7331: Passed, Test: #7332: Passed, Test: #7333: Passed, Test: #7334: Passed, Test: #7335: Passed, Test: #7336: Passed, Test: #7337: Passed, Test: #7338: Passed, Test: #7339: Passed, Test: #7340: Passed, 
Test: #7341: Passed, Test: #7342: Passed, Test: #7343: Passed, Test: #7344: Passed, Test: #7345: Passed, Test: #7346: Passed, Test: #7347: Passed, Test: #7348: Passed, Test: #7349: Passed, Test: #7350: Passed, 
Test: #7351: Passed, Test: #7352: Passed, Test: #7353: Passed, Test: #7354: Passed, Test: #7355: Passed, Test: #7356: Passed, Test: #7357: Passed, Test: #7358: Passed, Test: #7359: Passed, Test: #7360: Passed, 
Test: #7361: Passed, Test: #7362: Passed, Test: #7363: Passed, Test: #7364: Passed, Test: #7365: Passed, Test: #7366: Passed, Test: #7367: Passed, Test: #7368: Passed, Test: #7369: Passed, Test: #7370: Passed, 
Test: #7371: Passed, Test: #7372: Passed, Test: #7373: Passed, Test: #7374: Passed, Test: #7375: Passed, Test: #7376: Passed, Test: #7377: Passed, Test: #7378: Passed, Test: #7379: Passed, Test: #7380: Passed, 
Test: #7381: Passed, Test: #7382: Passed, Test: #7383: Passed, Test: #7384: Passed, Test: #7385: Passed, Test: #7386: Passed, Test: #7387: Passed, Test: #7388: Passed, Test: #7389: Passed, Test: #7390: Passed, 
Test: #7391: Passed, Test: #7392: Passed, Test: #7393: Passed, Test: #7394: Passed, Test: #7395: Passed, Test: #7396: Passed, Test: #7397: Passed, Test: #7398: Passed, Test: #7399: Passed, Test: #7400: Passed, 
Test: #7401: Passed, Test: #7402: Passed, Test: #7403: Passed, Test: #7404: Passed, Test: #7405: Passed, Test: #7406: Passed, Test: #7407: Passed, Test: #7408: Passed, Test: #7409: Passed, Test: #7410: Passed, 
Test: #7411: Passed, Test: #7412: Passed, Test: #7413: Passed, Test: #7414: Passed, Test: #7415: Passed, Test: #7416: Passed, Test: #7417: Passed, Test: #7418: Passed, Test: #7419: Passed, Test: #7420: Passed, 
Test: #7421: Passed, Test: #7422: Passed, Test: #7423: Passed, Test: #7424: Passed, Test: #7425: Passed, Test: #7426: Passed, Test: #7427: Passed, Test: #7428: Passed, Test: #7429: Passed, Test: #7430: Passed, 
Test: #7431: Passed, Test: #7432: Passed, Test: #7433: Passed, Test: #7434: Passed, Test: #7435: Passed, Test: #7436: Passed, Test: #7437: Passed, Test: #7438: Passed, Test: #7439: Passed, Test: #7440: Passed, 
Test: #7441: Passed, Test: #7442: Passed, Test: #7443: Passed, Test: #7444: Passed, Test: #7445: Passed, Test: #7446: Passed, Test: #7447: Passed, Test: #7448: Passed, Test: #7449: Passed, Test: #7450: Passed, 
Test: #7451: Passed, Test: #7452: Passed, Test: #7453: Passed, Test: #7454: Passed, Test: #7455: Passed, Test: #7456: Passed, Test: #7457: Passed, Test: #7458: Passed, Test: #7459: Passed, Test: #7460: Passed, 
Test: #7461: Passed, Test: #7462: Passed, Test: #7463: Passed, Test: #7464: Passed, Test: #7465: Passed, Test: #7466: Passed, Test: #7467: Passed, Test: #7468: Passed, Test: #7469: Passed, Test: #7470: Passed, 
Test: #7471: Passed, Test: #7472: Passed, Test: #7473: Passed, Test: #7474: Passed, Test: #7475: Passed, Test: #7476: Passed, Test: #7477: Passed, Test: #7478: Passed, Test: #7479: Passed, Test: #7480: Passed, 
Test: #7481: Passed, Test: #7482: Passed, Test: #7483: Passed, Test: #7484: Passed, Test: #7485: Passed, Test: #7486: Passed, Test: #7487: Passed, Test: #7488: Passed, Test: #7489: Passed, Test: #7490: Passed, 
Test: #7491: Passed, Test: #7492: Passed, Test: #7493: Passed, Test: #7494: Passed, Test: #7495: Passed, Test: #7496: Passed, Test: #7497: Passed, Test: #7498: Passed, Test: #7499: Passed, Test: #7500: Passed, 
Test: #7501: Passed, Test: #7502: Passed, Test: #7503: Passed, Test: #7504: Passed, Test: #7505: Passed, Test: #7506: Passed, Test: #7507: Passed, Test: #7508: Passed, Test: #7509: Passed, Test: #7510: Passed, 
Test: #7511: Passed, Test: #7512: Passed, Test: #7513: Passed, Test: #7514: Passed, Test: #7515: Passed, Test: #7516: Passed, Test: #7517: Passed, Test: #7518: Passed, Test: #7519: Passed, Test: #7520: Passed, 
Test: #7521: Passed, Test: #7522: Passed, Test: #7523: Passed, Test: #7524: Passed, Test: #7525: Passed, Test: #7526: Passed, Test: #7527: Passed, Test: #7528: Passed, Test: #7529: Passed, Test: #7530: Passed, 
Test: #7531: Passed, Test: #7532: Passed, Test: #7533: Passed, Test: #7534: Passed, Test: #7535: Passed, Test: #7536: Passed, Test: #7537: Passed, Test: #7538: Passed, Test: #7539: Passed, Test: #7540: Passed, 
Test: #7541: Passed, Test: #7542: Passed, Test: #7543: Passed, Test: #7544: Passed, Test: #7545: Passed, Test: #7546: Passed, Test: #7547: Passed, Test: #7548: Passed, Test: #7549: Passed, Test: #7550: Passed, 
Test: #7551: Passed, Test: #7552: Passed, Test: #7553: Passed, Test: #7554: Passed, Test: #7555: Passed, Test: #7556: Passed, Test: #7557: Passed, Test: #7558: Passed, Test: #7559: Passed, Test: #7560: Passed, 
Test: #7561: Passed, Test: #7562: Passed, Test: #7563: Passed, Test: #7564: Passed, Test: #7565: Passed, Test: #7566: Passed, Test: #7567: Passed, Test: #7568: Passed, Test: #7569: Passed, Test: #7570: Passed, 
Test: #7571: Passed, Test: #7572: Passed, Test: #7573: Passed, Test: #7574: Passed, Test: #7575: Passed, Test: #7576: Passed, Test: #7577: Passed, Test: #7578: Passed, Test: #7579: Passed, Test: #7580: Passed, 
Test: #7581: Passed, Test: #7582: Passed, Test: #7583: Passed, Test: #7584: Passed, Test: #7585: Passed, Test: #7586: Passed, Test: #7587: Passed, Test: #7588: Passed, Test: #7589: Passed, Test: #7590: Passed, 
Test: #7591: Passed, Test: #7592: Passed, Test: #7593: Passed, Test: #7594: Passed, Test: #7595: Passed, Test: #7596: Passed, Test: #7597: Passed, Test: #7598: Passed, Test: #7599: Passed, Test: #7600: Passed, 
Test: #7601: Passed, Test: #7602: Passed, Test: #7603: Passed, Test: #7604: Passed, Test: #7605: Passed, Test: #7606: Passed, Test: #7607: Passed, Test: #7608: Passed, Test: #7609: Passed, Test: #7610: Passed, 
Test: #7611: Passed, Test: #7612: Passed, Test: #7613: Passed, Test: #7614: Passed, Test: #7615: Passed, Test: #7616: Passed, Test: #7617: Passed, Test: #7618: Passed, Test: #7619: Passed, Test: #7620: Passed, 
Test: #7621: Passed, Test: #7622: Passed, Test: #7623: Passed, Test: #7624: Passed, Test: #7625: Passed, Test: #7626: Passed, Test: #7627: Passed, Test: #7628: Passed, Test: #7629: Passed, Test: #7630: Passed, 
Test: #7631: Passed, Test: #7632: Passed, Test: #7633: Passed, Test: #7634: Passed, Test: #7635: Passed, Test: #7636: Passed, Test: #7637: Passed, Test: #7638: Passed, Test: #7639: Passed, Test: #7640: Passed, 
Test: #7641: Passed, Test: #7642: Passed, Test: #7643: Passed, Test: #7644: Passed, Test: #7645: Passed, Test: #7646: Passed, Test: #7647: Passed, Test: #7648: Passed, Test: #7649: Passed, Test: #7650: Passed, 
Test: #7651: Passed, Test: #7652: Passed, Test: #7653: Passed, Test: #7654: Passed, Test: #7655: Passed, Test: #7656: Passed, Test: #7657: Passed, Test: #7658: Passed, Test: #7659: Passed, Test: #7660: Passed, 
Test: #7661: Passed, Test: #7662: Passed, Test: #7663: Passed, Test: #7664: Passed, Test: #7665: Passed, Test: #7666: Passed, Test: #7667: Passed, Test: #7668: Passed, Test: #7669: Passed, Test: #7670: Passed, 
Test: #7671: Passed, Test: #7672: Passed, Test: #7673: Passed, Test: #7674: Passed, Test: #7675: Passed, Test: #7676: Passed, Test: #7677: Passed, Test: #7678: Passed, Test: #7679: Passed, Test: #7680: Passed, 
Test: #7681: Passed, Test: #7682: Passed, Test: #7683: Passed, Test: #7684: Passed, Test: #7685: Passed, Test: #7686: Passed, Test: #7687: Passed, Test: #7688: Passed, Test: #7689: Passed, Test: #7690: Passed, 
Test: #7691: Passed, Test: #7692: Passed, Test: #7693: Passed, Test: #7694: Passed, Test: #7695: Passed, Test: #7696: Passed, Test: #7697: Passed, Test: #7698: Passed, Test: #7699: Passed, Test: #7700: Passed, 
Test: #7701: Passed, Test: #7702: Passed, Test: #7703: Passed, Test: #7704: Passed, Test: #7705: Passed, Test: #7706: Passed, Test: #7707: Passed, Test: #7708: Passed, Test: #7709: Passed, Test: #7710: Passed, 
Test: #7711: Passed, Test: #7712: Passed, Test: #7713: Passed, Test: #7714: Passed, Test: #7715: Passed, Test: #7716: Passed, Test: #7717: Passed, Test: #7718: Passed, Test: #7719: Passed, Test: #7720: Passed, 
Test: #7721: Passed, Test: #7722: Passed, Test: #7723: Passed, Test: #7724: Passed, Test: #7725: Passed, Test: #7726: Passed, Test: #7727: Passed, Test: #7728: Passed, Test: #7729: Passed, Test: #7730: Passed, 
Test: #7731: Passed, Test: #7732: Passed, Test: #7733: Passed, Test: #7734: Passed, Test: #7735: Passed, Test: #7736: Passed, Test: #7737: Passed, Test: #7738: Passed, Test: #7739: Passed, Test: #7740: Passed, 
Test: #7741: Passed, Test: #7742: Passed, Test: #7743: Passed, Test: #7744: Passed, Test: #7745: Passed, Test: #7746: Passed, Test: #7747: Passed, Test: #7748: Passed, Test: #7749: Passed, Test: #7750: Passed, 
Test: #7751: Passed, Test: #7752: Passed, Test: #7753: Passed, Test: #7754: Passed, Test: #7755: Passed, Test: #7756: Passed, Test: #7757: Passed, Test: #7758: Passed, Test: #7759: Passed, Test: #7760: Passed, 
Test: #7761: Passed, Test: #7762: Passed, Test: #7763: Passed, Test: #7764: Passed, Test: #7765: Passed, Test: #7766: Passed, Test: #7767: Passed, Test: #7768: Passed, Test: #7769: Passed, Test: #7770: Passed, 
Test: #7771: Passed, Test: #7772: Passed, Test: #7773: Passed, Test: #7774: Passed, Test: #7775: Passed, Test: #7776: Passed, Test: #7777: Passed, Test: #7778: Passed, Test: #7779: Passed, Test: #7780: Passed, 
Test: #7781: Passed, Test: #7782: Passed, Test: #7783: Passed, Test: #7784: Passed, Test: #7785: Passed, Test: #7786: Passed, Test: #7787: Passed, Test: #7788: Passed, Test: #7789: Passed, Test: #7790: Passed, 
Test: #7791: Passed, Test: #7792: Passed, Test: #7793: Passed, Test: #7794: Passed, Test: #7795: Passed, Test: #7796: Passed, Test: #7797: Passed, Test: #7798: Passed, Test: #7799: Passed, Test: #7800: Passed, 
Test: #7801: Passed, Test: #7802: Passed, Test: #7803: Passed, Test: #7804: Passed, Test: #7805: Passed, Test: #7806: Passed, Test: #7807: Passed, Test: #7808: Passed, Test: #7809: Passed, Test: #7810: Passed, 
Test: #7811: Passed, Test: #7812: Passed, Test: #7813: Passed, Test: #7814: Passed, Test: #7815: Passed, Test: #7816: Passed, Test: #7817: Passed, Test: #7818: Passed, Test: #7819: Passed, Test: #7820: Passed, 
Test: #7821: Passed, Test: #7822: Passed, Test: #7823: Passed, Test: #7824: Passed, Test: #7825: Passed, Test: #7826: Passed, Test: #7827: Passed, Test: #7828: Passed, Test: #7829: Passed, Test: #7830: Passed, 
Test: #7831: Passed, Test: #7832: Passed, Test: #7833: Passed, Test: #7834: Passed, Test: #7835: Passed, Test: #7836: Passed, Test: #7837: Passed, Test: #7838: Passed, Test: #7839: Passed, Test: #7840: Passed, 
Test: #7841: Passed, Test: #7842: Passed, Test: #7843: Passed, Test: #7844: Passed, Test: #7845: Passed, Test: #7846: Passed, Test: #7847: Passed, Test: #7848: Passed, Test: #7849: Passed, Test: #7850: Passed, 
Test: #7851: Passed, Test: #7852: Passed, Test: #7853: Passed, Test: #7854: Passed, Test: #7855: Passed, Test: #7856: Passed, Test: #7857: Passed, Test: #7858: Passed, Test: #7859: Passed, Test: #7860: Passed, 
Test: #7861: Passed, Test: #7862: Passed, Test: #7863: Passed, Test: #7864: Passed, Test: #7865: Passed, Test: #7866: Passed, Test: #7867: Passed, Test: #7868: Passed, Test: #7869: Passed, Test: #7870: Passed, 
Test: #7871: Passed, Test: #7872: Passed, Test: #7873: Passed, Test: #7874: Passed, Test: #7875: Passed, Test: #7876: Passed, Test: #7877: Passed, Test: #7878: Passed, Test: #7879: Passed, Test: #7880: Passed, 
Test: #7881: Passed, Test: #7882: Passed, Test: #7883: Passed, Test: #7884: Passed, Test: #7885: Passed, Test: #7886: Passed, Test: #7887: Passed, Test: #7888: Passed, Test: #7889: Passed, Test: #7890: Passed, 
Test: #7891: Passed, Test: #7892: Passed, Test: #7893: Passed, Test: #7894: Passed, Test: #7895: Passed, Test: #7896: Passed, Test: #7897: Passed, Test: #7898: Passed, Test: #7899: Passed, Test: #7900: Passed, 
Test: #7901: Passed, Test: #7902: Passed, Test: #7903: Passed, Test: #7904: Passed, Test: #7905: Passed, Test: #7906: Passed, Test: #7907: Passed, Test: #7908: Passed, Test: #7909: Passed, Test: #7910: Passed, 
Test: #7911: Passed, Test: #7912: Passed, Test: #7913: Passed, Test: #7914: Passed, Test: #7915: Passed, Test: #7916: Passed, Test: #7917: Passed, Test: #7918: Passed, Test: #7919: Passed, Test: #7920: Passed, 
Test: #7921: Passed, Test: #7922: Passed, Test: #7923: Passed, Test: #7924: Passed, Test: #7925: Passed, Test: #7926: Passed, Test: #7927: Passed, Test: #7928: Passed, Test: #7929: Passed, Test: #7930: Passed, 
Test: #7931: Passed, Test: #7932: Passed, Test: #7933: Passed, Test: #7934: Passed, Test: #7935: Passed, Test: #7936: Passed, Test: #7937: Passed, Test: #7938: Passed, Test: #7939: Passed, Test: #7940: Passed, 
Test: #7941: Passed, Test: #7942: Passed, Test: #7943: Passed, Test: #7944: Passed, Test: #7945: Passed, Test: #7946: Passed, Test: #7947: Passed, Test: #7948: Passed, Test: #7949: Passed, Test: #7950: Passed, 
Test: #7951: Passed, Test: #7952: Passed, Test: #7953: Passed, Test: #7954: Passed, Test: #7955: Passed, Test: #7956: Passed, Test: #7957: Passed, Test: #7958: Passed, Test: #7959: Passed, Test: #7960: Passed, 
Test: #7961: Passed, Test: #7962: Passed, Test: #7963: Passed, Test: #7964: Passed, Test: #7965: Passed, Test: #7966: Passed, Test: #7967: Passed, Test: #7968: Passed, Test: #7969: Passed, Test: #7970: Passed, 
Test: #7971: Passed, Test: #7972: Passed, Test: #7973: Passed, Test: #7974: Passed, Test: #7975: Passed, Test: #7976: Passed, Test: #7977: Passed, Test: #7978: Passed, Test: #7979: Passed, Test: #7980: Passed, 
Test: #7981: Passed, Test: #7982: Passed, Test: #7983: Passed, Test: #7984: Passed, Test: #7985: Passed, Test: #7986: Passed, Test: #7987: Passed, Test: #7988: Passed, Test: #7989: Passed, Test: #7990: Passed, 
Test: #7991: Passed, Test: #7992: Passed, Test: #7993: Passed, Test: #7994: Passed, Test: #7995: Passed, Test: #7996: Passed, Test: #7997: Passed, Test: #7998: Passed, Test: #7999: Passed, Test: #8000: Passed, 
Test: #8001: Passed, Test: #8002: Passed, Test: #8003: Passed, Test: #8004: Passed, Test: #8005: Passed, Test: #8006: Passed, Test: #8007: Passed, Test: #8008: Passed, Test: #8009: Passed, Test: #8010: Passed, 
Test: #8011: Passed, Test: #8012: Passed, Test: #8013: Passed, Test: #8014: Passed, Test: #8015: Passed, Test: #8016: Passed, Test: #8017: Passed, Test: #8018: Passed, Test: #8019: Passed, Test: #8020: Passed, 
Test: #8021: Passed, Test: #8022: Passed, Test: #8023: Passed, Test: #8024: Passed, Test: #8025: Passed, Test: #8026: Passed, Test: #8027: Passed, Test: #8028: Passed, Test: #8029: Passed, Test: #8030: Passed, 
Test: #8031: Passed, Test: #8032: Passed, Test: #8033: Passed, Test: #8034: Passed, Test: #8035: Passed, Test: #8036: Passed, Test: #8037: Passed, Test: #8038: Passed, Test: #8039: Passed, Test: #8040: Passed, 
Test: #8041: Passed, Test: #8042: Passed, Test: #8043: Passed, Test: #8044: Passed, Test: #8045: Passed, Test: #8046: Passed, Test: #8047: Passed, Test: #8048: Passed, Test: #8049: Passed, Test: #8050: Passed, 
Test: #8051: Passed, Test: #8052: Passed, Test: #8053: Passed, Test: #8054: Passed, Test: #8055: Passed, Test: #8056: Passed, Test: #8057: Passed, Test: #8058: Passed, Test: #8059: Passed, Test: #8060: Passed, 
Test: #8061: Passed, Test: #8062: Passed, Test: #8063: Passed, Test: #8064: Passed, Test: #8065: Passed, Test: #8066: Passed, Test: #8067: Passed, Test: #8068: Passed, Test: #8069: Passed, Test: #8070: Passed, 
Test: #8071: Passed, Test: #8072: Passed, Test: #8073: Passed, Test: #8074: Passed, Test: #8075: Passed, Test: #8076: Passed, Test: #8077: Passed, Test: #8078: Passed, Test: #8079: Passed, Test: #8080: Passed, 
Test: #8081: Passed, Test: #8082: Passed, Test: #8083: Passed, Test: #8084: Passed, Test: #8085: Passed, Test: #8086: Passed, Test: #8087: Passed, Test: #8088: Passed, Test: #8089: Passed, Test: #8090: Passed, 
Test: #8091: Passed, Test: #8092: Passed, Test: #8093: Passed, Test: #8094: Passed, Test: #8095: Passed, Test: #8096: Passed, Test: #8097: Passed, Test: #8098: Passed, Test: #8099: Passed, Test: #8100: Passed, 
Test: #8101: Passed, Test: #8102: Passed, Test: #8103: Passed, Test: #8104: Passed, Test: #8105: Passed, Test: #8106: Passed, Test: #8107: Passed, Test: #8108: Passed, Test: #8109: Passed, Test: #8110: Passed, 
Test: #8111: Passed, Test: #8112: Passed, Test: #8113: Passed, Test: #8114: Passed, Test: #8115: Passed, Test: #8116: Passed, Test: #8117: Passed, Test: #8118: Passed, Test: #8119: Passed, Test: #8120: Passed, 
Test: #8121: Passed, Test: #8122: Passed, Test: #8123: Passed, Test: #8124: Passed, Test: #8125: Passed, Test: #8126: Passed, Test: #8127: Passed, Test: #8128: Passed, Test: #8129: Passed, Test: #8130: Passed, 
Test: #8131: Passed, Test: #8132: Passed, Test: #8133: Passed, Test: #8134: Passed, Test: #8135: Passed, Test: #8136: Passed, Test: #8137: Passed, Test: #8138: Passed, Test: #8139: Passed, Test: #8140: Passed, 
Test: #8141: Passed, Test: #8142: Passed, Test: #8143: Passed, Test: #8144: Passed, Test: #8145: Passed, Test: #8146: Passed, Test: #8147: Passed, Test: #8148: Passed, Test: #8149: Passed, Test: #8150: Passed, 
Test: #8151: Passed, Test: #8152: Passed, Test: #8153: Passed, Test: #8154: Passed, Test: #8155: Passed, Test: #8156: Passed, Test: #8157: Passed, Test: #8158: Passed, Test: #8159: Passed, Test: #8160: Passed, 
Test: #8161: Passed, Test: #8162: Passed, Test: #8163: Passed, Test: #8164: Passed, Test: #8165: Passed, Test: #8166: Passed, Test: #8167: Passed, Test: #8168: Passed, Test: #8169: Passed, Test: #8170: Passed, 
Test: #8171: Passed, Test: #8172: Passed, Test: #8173: Passed, Test: #8174: Passed, Test: #8175: Passed, Test: #8176: Passed, Test: #8177: Passed, Test: #8178: Passed, Test: #8179: Passed, Test: #8180: Passed, 
Test: #8181: Passed, Test: #8182: Passed, Test: #8183: Passed, Test: #8184: Passed, Test: #8185: Passed, Test: #8186: Passed, Test: #8187: Passed, Test: #8188: Passed, Test: #8189: Passed, Test: #8190: Passed, 
Test: #8191: Passed, Test: #8192: Passed, Test: #8193: Passed, Test: #8194: Passed, Test: #8195: Passed, Test: #8196: Passed, Test: #8197: Passed, Test: #8198: Passed, Test: #8199: Passed, Test: #8200: Passed, 
Test: #8201: Passed, Test: #8202: Passed, Test: #8203: Passed, Test: #8204: Passed, Test: #8205: Passed, Test: #8206: Passed, Test: #8207: Passed, Test: #8208: Passed, Test: #8209: Passed, Test: #8210: Passed, 
Test: #8211: Passed, Test: #8212: Passed, Test: #8213: Passed, Test: #8214: Passed, Test: #8215: Passed, Test: #8216: Passed, Test: #8217: Passed, Test: #8218: Passed, Test: #8219: Passed, Test: #8220: Passed, 
Test: #8221: Passed, Test: #8222: Passed, Test: #8223: Passed, Test: #8224: Passed, Test: #8225: Passed, Test: #8226: Passed, Test: #8227: Passed, Test: #8228: Passed, Test: #8229: Passed, Test: #8230: Passed, 
Test: #8231: Passed, Test: #8232: Passed, Test: #8233: Passed, Test: #8234: Passed, Test: #8235: Passed, Test: #8236: Passed, Test: #8237: Passed, Test: #8238: Passed, Test: #8239: Passed, Test: #8240: Passed, 
Test: #8241: Passed, Test: #8242: Passed, Test: #8243: Passed, Test: #8244: Passed, Test: #8245: Passed, Test: #8246: Passed, Test: #8247: Passed, Test: #8248: Passed, Test: #8249: Passed, Test: #8250: Passed, 
Test: #8251: Passed, Test: #8252: Passed, Test: #8253: Passed, Test: #8254: Passed, Test: #8255: Passed, Test: #8256: Passed, Test: #8257: Passed, Test: #8258: Passed, Test: #8259: Passed, Test: #8260: Passed, 
Test: #8261: Passed, Test: #8262: Passed, Test: #8263: Passed, Test: #8264: Passed, Test: #8265: Passed, Test: #8266: Passed, Test: #8267: Passed, Test: #8268: Passed, Test: #8269: Passed, Test: #8270: Passed, 
Test: #8271: Passed, Test: #8272: Passed, Test: #8273: Passed, Test: #8274: Passed, Test: #8275: Passed, Test: #8276: Passed, Test: #8277: Passed, Test: #8278: Passed, Test: #8279: Passed, Test: #8280: Passed, 
Test: #8281: Passed, Test: #8282: Passed, Test: #8283: Passed, Test: #8284: Passed, Test: #8285: Passed, Test: #8286: Passed, Test: #8287: Passed, Test: #8288: Passed, Test: #8289: Passed, Test: #8290: Passed, 
Test: #8291: Passed, Test: #8292: Passed, Test: #8293: Passed, Test: #8294: Passed, Test: #8295: Passed, Test: #8296: Passed, Test: #8297: Passed, Test: #8298: Passed, Test: #8299: Passed, Test: #8300: Passed, 
Test: #8301: Passed, Test: #8302: Passed, Test: #8303: Passed, Test: #8304: Passed, Test: #8305: Passed, Test: #8306: Passed, Test: #8307: Passed, Test: #8308: Passed, Test: #8309: Passed, Test: #8310: Passed, 
Test: #8311: Passed, Test: #8312: Passed, Test: #8313: Passed, Test: #8314: Passed, Test: #8315: Passed, Test: #8316: Passed, Test: #8317: Passed, Test: #8318: Passed, Test: #8319: Passed, Test: #8320: Passed, 
Test: #8321: Passed, Test: #8322: Passed, Test: #8323: Passed, Test: #8324: Passed, Test: #8325: Passed, Test: #8326: Passed, Test: #8327: Passed, Test: #8328: Passed, Test: #8329: Passed, Test: #8330: Passed, 
Test: #8331: Passed, Test: #8332: Passed, Test: #8333: Passed, Test: #8334: Passed, Test: #8335: Passed, Test: #8336: Passed, Test: #8337: Passed, Test: #8338: Passed, Test: #8339: Passed, Test: #8340: Passed, 
Test: #8341: Passed, Test: #8342: Passed, Test: #8343: Passed, Test: #8344: Passed, Test: #8345: Passed, Test: #8346: Passed, Test: #8347: Passed, Test: #8348: Passed, Test: #8349: Passed, Test: #8350: Passed, 
Test: #8351: Passed, Test: #8352: Passed, Test: #8353: Passed, Test: #8354: Passed, Test: #8355: Passed, Test: #8356: Passed, Test: #8357: Passed, Test: #8358: Passed, Test: #8359: Passed, Test: #8360: Passed, 
Test: #8361: Passed, Test: #8362: Passed, Test: #8363: Passed, Test: #8364: Passed, Test: #8365: Passed, Test: #8366: Passed, Test: #8367: Passed, Test: #8368: Passed, Test: #8369: Passed, Test: #8370: Passed, 
Test: #8371: Passed, Test: #8372: Passed, Test: #8373: Passed, Test: #8374: Passed, Test: #8375: Passed, Test: #8376: Passed, Test: #8377: Passed, Test: #8378: Passed, Test: #8379: Passed, Test: #8380: Passed, 
Test: #8381: Passed, Test: #8382: Passed, Test: #8383: Passed, Test: #8384: Passed, Test: #8385: Passed, Test: #8386: Passed, Test: #8387: Passed, Test: #8388: Passed, Test: #8389: Passed, Test: #8390: Passed, 
Test: #8391: Passed, Test: #8392: Passed, Test: #8393: Passed, Test: #8394: Passed, Test: #8395: Passed, Test: #8396: Passed, Test: #8397: Passed, Test: #8398: Passed, Test: #8399: Passed, Test: #8400: Passed, 
Test: #8401: Passed, Test: #8402: Passed, Test: #8403: Passed, Test: #8404: Passed, Test: #8405: Passed, Test: #8406: Passed, Test: #8407: Passed, Test: #8408: Passed, Test: #8409: Passed, Test: #8410: Passed, 
Test: #8411: Passed, Test: #8412: Passed, Test: #8413: Passed, Test: #8414: Passed, Test: #8415: Passed, Test: #8416: Passed, Test: #8417: Passed, Test: #8418: Passed, Test: #8419: Passed, Test: #8420: Passed, 
Test: #8421: Passed, Test: #8422: Passed, Test: #8423: Passed, Test: #8424: Passed, Test: #8425: Passed, Test: #8426: Passed, Test: #8427: Passed, Test: #8428: Passed, Test: #8429: Passed, Test: #8430: Passed, 
Test: #8431: Passed, Test: #8432: Passed, Test: #8433: Passed, Test: #8434: Passed, Test: #8435: Passed, Test: #8436: Passed, Test: #8437: Passed, Test: #8438: Passed, Test: #8439: Passed, Test: #8440: Passed, 
Test: #8441: Passed, Test: #8442: Passed, Test: #8443: Passed, Test: #8444: Passed, Test: #8445: Passed, Test: #8446: Passed, Test: #8447: Passed, Test: #8448: Passed, Test: #8449: Passed, Test: #8450: Passed, 
Test: #8451: Passed, Test: #8452: Passed, Test: #8453: Passed, Test: #8454: Passed, Test: #8455: Passed, Test: #8456: Passed, Test: #8457: Passed, Test: #8458: Passed, Test: #8459: Passed, Test: #8460: Passed, 
Test: #8461: Passed, Test: #8462: Passed, Test: #8463: Passed, Test: #8464: Passed, Test: #8465: Passed, Test: #8466: Passed, Test: #8467: Passed, Test: #8468: Passed, Test: #8469: Passed, Test: #8470: Passed, 
Test: #8471: Passed, Test: #8472: Passed, Test: #8473: Passed, Test: #8474: Passed, Test: #8475: Passed, Test: #8476: Passed, Test: #8477: Passed, Test: #8478: Passed, Test: #8479: Passed, Test: #8480: Passed, 
Test: #8481: Passed, Test: #8482: Passed, Test: #8483: Passed, Test: #8484: Passed, Test: #8485: Passed, Test: #8486: Passed, Test: #8487: Passed, Test: #8488: Passed, Test: #8489: Passed, Test: #8490: Passed, 
Test: #8491: Passed, Test: #8492: Passed, Test: #8493: Passed, Test: #8494: Passed, Test: #8495: Passed, Test: #8496: Passed, Test: #8497: Passed, Test: #8498: Passed, Test: #8499: Passed, Test: #8500: Passed, 
Test: #8501: Passed, Test: #8502: Passed, Test: #8503: Passed, Test: #8504: Passed, Test: #8505: Passed, Test: #8506: Passed, Test: #8507: Passed, Test: #8508: Passed, Test: #8509: Passed, Test: #8510: Passed, 
Test: #8511: Passed, Test: #8512: Passed, Test: #8513: Passed, Test: #8514: Passed, Test: #8515: Passed, Test: #8516: Passed, Test: #8517: Passed, Test: #8518: Passed, Test: #8519: Passed, Test: #8520: Passed, 
Test: #8521: Passed, Test: #8522: Passed, Test: #8523: Passed, Test: #8524: Passed, Test: #8525: Passed, Test: #8526: Passed, Test: #8527: Passed, Test: #8528: Passed, Test: #8529: Passed, Test: #8530: Passed, 
Test: #8531: Passed, Test: #8532: Passed, Test: #8533: Passed, Test: #8534: Passed, Test: #8535: Passed, Test: #8536: Passed, Test: #8537: Passed, Test: #8538: Passed, Test: #8539: Passed, Test: #8540: Passed, 
Test: #8541: Passed, Test: #8542: Passed, Test: #8543: Passed, Test: #8544: Passed, Test: #8545: Passed, Test: #8546: Passed, Test: #8547: Passed, Test: #8548: Passed, Test: #8549: Passed, Test: #8550: Passed, 
Test: #8551: Passed, Test: #8552: Passed, Test: #8553: Passed, Test: #8554: Passed, Test: #8555: Passed, Test: #8556: Passed, Test: #8557: Passed, Test: #8558: Passed, Test: #8559: Passed, Test: #8560: Passed, 
Test: #8561: Passed, Test: #8562: Passed, Test: #8563: Passed, Test: #8564: Passed, Test: #8565: Passed, Test: #8566: Passed, Test: #8567: Passed, Test: #8568: Passed, Test: #8569: Passed, Test: #8570: Passed, 
Test: #8571: Passed, Test: #8572: Passed, Test: #8573: Passed, Test: #8574: Passed, Test: #8575: Passed, Test: #8576: Passed, Test: #8577: Passed, Test: #8578: Passed, Test: #8579: Passed, Test: #8580: Passed, 
Test: #8581: Passed, Test: #8582: Passed, Test: #8583: Passed, Test: #8584: Passed, Test: #8585: Passed, Test: #8586: Passed, Test: #8587: Passed, Test: #8588: Passed, Test: #8589: Passed, Test: #8590: Passed, 
Test: #8591: Passed, Test: #8592: Passed, Test: #8593: Passed, Test: #8594: Passed, Test: #8595: Passed, Test: #8596: Passed, Test: #8597: Passed, Test: #8598: Passed, Test: #8599: Passed, Test: #8600: Passed, 
Test: #8601: Passed, Test: #8602: Passed, Test: #8603: Passed, Test: #8604: Passed, Test: #8605: Passed, Test: #8606: Passed, Test: #8607: Passed, Test: #8608: Passed, Test: #8609: Passed, Test: #8610: Passed, 
Test: #8611: Passed, Test: #8612: Passed, Test: #8613: Passed, Test: #8614: Passed, Test: #8615: Passed, Test: #8616: Passed, Test: #8617: Passed, Test: #8618: Passed, Test: #8619: Passed, Test: #8620: Passed, 
Test: #8621: Passed, Test: #8622: Passed, Test: #8623: Passed, Test: #8624: Passed, Test: #8625: Passed, Test: #8626: Passed, Test: #8627: Passed, Test: #8628: Passed, Test: #8629: Passed, Test: #8630: Passed, 
Test: #8631: Passed, Test: #8632: Passed, Test: #8633: Passed, Test: #8634: Passed, Test: #8635: Passed, Test: #8636: Passed, Test: #8637: Passed, Test: #8638: Passed, Test: #8639: Passed, Test: #8640: Passed, 
Test: #8641: Passed, Test: #8642: Passed, Test: #8643: Passed, Test: #8644: Passed, Test: #8645: Passed, Test: #8646: Passed, Test: #8647: Passed, Test: #8648: Passed, Test: #8649: Passed, Test: #8650: Passed, 
Test: #8651: Passed, Test: #8652: Passed, Test: #8653: Passed, Test: #8654: Passed, Test: #8655: Passed, Test: #8656: Passed, Test: #8657: Passed, Test: #8658: Passed, Test: #8659: Passed, Test: #8660: Passed, 
Test: #8661: Passed, Test: #8662: Passed, Test: #8663: Passed, Test: #8664: Passed, Test: #8665: Passed, Test: #8666: Passed, Test: #8667: Passed, Test: #8668: Passed, Test: #8669: Passed, Test: #8670: Passed, 
Test: #8671: Passed, Test: #8672: Passed, Test: #8673: Passed, Test: #8674: Passed, Test: #8675: Passed, Test: #8676: Passed, Test: #8677: Passed, Test: #8678: Passed, Test: #8679: Passed, Test: #8680: Passed, 
Test: #8681: Passed, Test: #8682: Passed, Test: #8683: Passed, Test: #8684: Passed, Test: #8685: Passed, Test: #8686: Passed, Test: #8687: Passed, Test: #8688: Passed, Test: #8689: Passed, Test: #8690: Passed, 
Test: #8691: Passed, Test: #8692: Passed, Test: #8693: Passed, Test: #8694: Passed, Test: #8695: Passed, Test: #8696: Passed, Test: #8697: Passed, Test: #8698: Passed, Test: #8699: Passed, Test: #8700: Passed, 
Test: #8701: Passed, Test: #8702: Passed, Test: #8703: Passed, Test: #8704: Passed, Test: #8705: Passed, Test: #8706: Passed, Test: #8707: Passed, Test: #8708: Passed, Test: #8709: Passed, Test: #8710: Passed, 
Test: #8711: Passed, Test: #8712: Passed, Test: #8713: Passed, Test: #8714: Passed, Test: #8715: Passed, Test: #8716: Passed, Test: #8717: Passed, Test: #8718: Passed, Test: #8719: Passed, Test: #8720: Passed, 
Test: #8721: Passed, Test: #8722: Passed, Test: #8723: Passed, Test: #8724: Passed, Test: #8725: Passed, Test: #8726: Passed, Test: #8727: Passed, Test: #8728: Passed, Test: #8729: Passed, Test: #8730: Passed, 
Test: #8731: Passed, Test: #8732: Passed, Test: #8733: Passed, Test: #8734: Passed, Test: #8735: Passed, Test: #8736: Passed, Test: #8737: Passed, Test: #8738: Passed, Test: #8739: Passed, Test: #8740: Passed, 
Test: #8741: Passed, Test: #8742: Passed, Test: #8743: Passed, Test: #8744: Passed, Test: #8745: Passed, Test: #8746: Passed, Test: #8747: Passed, Test: #8748: Passed, Test: #8749: Passed, Test: #8750: Passed, 
Test: #8751: Passed, Test: #8752: Passed, Test: #8753: Passed, Test: #8754: Passed, Test: #8755: Passed, Test: #8756: Passed, Test: #8757: Passed, Test: #8758: Passed, Test: #8759: Passed, Test: #8760: Passed, 
Test: #8761: Passed, Test: #8762: Passed, Test: #8763: Passed, Test: #8764: Passed, Test: #8765: Passed, Test: #8766: Passed, Test: #8767: Passed, Test: #8768: Passed, Test: #8769: Passed, Test: #8770: Passed, 
Test: #8771: Passed, Test: #8772: Passed, Test: #8773: Passed, Test: #8774: Passed, Test: #8775: Passed, Test: #8776: Passed, Test: #8777: Passed, Test: #8778: Passed, Test: #8779: Passed, Test: #8780: Passed, 
Test: #8781: Passed, Test: #8782: Passed, Test: #8783: Passed, Test: #8784: Passed, Test: #8785: Passed, Test: #8786: Passed, Test: #8787: Passed, Test: #8788: Passed, Test: #8789: Passed, Test: #8790: Passed, 
Test: #8791: Passed, Test: #8792: Passed, Test: #8793: Passed, Test: #8794: Passed, Test: #8795: Passed, Test: #8796: Passed, Test: #8797: Passed, Test: #8798: Passed, Test: #8799: Passed, Test: #8800: Passed, 
Test: #8801: Passed, Test: #8802: Passed, Test: #8803: Passed, Test: #8804: Passed, Test: #8805: Passed, Test: #8806: Passed, Test: #8807: Passed, Test: #8808: Passed, Test: #8809: Passed, Test: #8810: Passed, 
Test: #8811: Passed, Test: #8812: Passed, Test: #8813: Passed, Test: #8814: Passed, Test: #8815: Passed, Test: #8816: Passed, Test: #8817: Passed, Test: #8818: Passed, Test: #8819: Passed, Test: #8820: Passed, 
Test: #8821: Passed, Test: #8822: Passed, Test: #8823: Passed, Test: #8824: Passed, Test: #8825: Passed, Test: #8826: Passed, Test: #8827: Passed, Test: #8828: Passed, Test: #8829: Passed, Test: #8830: Passed, 
Test: #8831: Passed, Test: #8832: Passed, Test: #8833: Passed, Test: #8834: Passed, Test: #8835: Passed, Test: #8836: Passed, Test: #8837: Passed, Test: #8838: Passed, Test: #8839: Passed, Test: #8840: Passed, 
Test: #8841: Passed, Test: #8842: Passed, Test: #8843: Passed, Test: #8844: Passed, Test: #8845: Passed, Test: #8846: Passed, Test: #8847: Passed, Test: #8848: Passed, Test: #8849: Passed, Test: #8850: Passed, 
Test: #8851: Passed, Test: #8852: Passed, Test: #8853: Passed, Test: #8854: Passed, Test: #8855: Passed, Test: #8856: Passed, Test: #8857: Passed, Test: #8858: Passed, Test: #8859: Passed, Test: #8860: Passed, 
Test: #8861: Passed, Test: #8862: Passed, Test: #8863: Passed, Test: #8864: Passed, Test: #8865: Passed, Test: #8866: Passed, Test: #8867: Passed, Test: #8868: Passed, Test: #8869: Passed, Test: #8870: Passed, 
Test: #8871: Passed, Test: #8872: Passed, Test: #8873: Passed, Test: #8874: Passed, Test: #8875: Passed, Test: #8876: Passed, Test: #8877: Passed, Test: #8878: Passed, Test: #8879: Passed, Test: #8880: Passed, 
Test: #8881: Passed, Test: #8882: Passed, Test: #8883: Passed, Test: #8884: Passed, Test: #8885: Passed, Test: #8886: Passed, Test: #8887: Passed, Test: #8888: Passed, Test: #8889: Passed, Test: #8890: Passed, 
Test: #8891: Passed, Test: #8892: Passed, Test: #8893: Passed, Test: #8894: Passed, Test: #8895: Passed, Test: #8896: Passed, Test: #8897: Passed, Test: #8898: Passed, Test: #8899: Passed, Test: #8900: Passed, 
Test: #8901: Passed, Test: #8902: Passed, Test: #8903: Passed, Test: #8904: Passed, Test: #8905: Passed, Test: #8906: Passed, Test: #8907: Passed, Test: #8908: Passed, Test: #8909: Passed, Test: #8910: Passed, 
Test: #8911: Passed, Test: #8912: Passed, Test: #8913: Passed, Test: #8914: Passed, Test: #8915: Passed, Test: #8916: Passed, Test: #8917: Passed, Test: #8918: Passed, Test: #8919: Passed, Test: #8920: Passed, 
Test: #8921: Passed, Test: #8922: Passed, Test: #8923: Passed, Test: #8924: Passed, Test: #8925: Passed, Test: #8926: Passed, Test: #8927: Passed, Test: #8928: Passed, Test: #8929: Passed, Test: #8930: Passed, 
Test: #8931: Passed, Test: #8932: Passed, Test: #8933: Passed, Test: #8934: Passed, Test: #8935: Passed, Test: #8936: Passed, Test: #8937: Passed, Test: #8938: Passed, Test: #8939: Passed, Test: #8940: Passed, 
Test: #8941: Passed, Test: #8942: Passed, Test: #8943: Passed, Test: #8944: Passed, Test: #8945: Passed, Test: #8946: Passed, Test: #8947: Passed, Test: #8948: Passed, Test: #8949: Passed, Test: #8950: Passed, 
Test: #8951: Passed, Test: #8952: Passed, Test: #8953: Passed, Test: #8954: Passed, Test: #8955: Passed, Test: #8956: Passed, Test: #8957: Passed, Test: #8958: Passed, Test: #8959: Passed, Test: #8960: Passed, 
Test: #8961: Passed, Test: #8962: Passed, Test: #8963: Passed, Test: #8964: Passed, Test: #8965: Passed, Test: #8966: Passed, Test: #8967: Passed, Test: #8968: Passed, Test: #8969: Passed, Test: #8970: Passed, 
Test: #8971: Passed, Test: #8972: Passed, Test: #8973: Passed, Test: #8974: Passed, Test: #8975: Passed, Test: #8976: Passed, Test: #8977: Passed, Test: #8978: Passed, Test: #8979: Passed, Test: #8980: Passed, 
Test: #8981: Passed, Test: #8982: Passed, Test: #8983: Passed, Test: #8984: Passed, Test: #8985: Passed, Test: #8986: Passed, Test: #8987: Passed, Test: #8988: Passed, Test: #8989: Passed, Test: #8990: Passed, 
Test: #8991: Passed, Test: #8992: Passed, Test: #8993: Passed, Test: #8994: Passed, Test: #8995: Passed, Test: #8996: Passed, Test: #8997: Passed, Test: #8998: Passed, Test: #8999: Passed, Test: #9000: Passed, 
Test: #9001: Passed, Test: #9002: Passed, Test: #9003: Passed, Test: #9004: Passed, Test: #9005: Passed, Test: #9006: Passed, Test: #9007: Passed, Test: #9008: Passed, Test: #9009: Passed, Test: #9010: Passed, 
Test: #9011: Passed, Test: #9012: Passed, Test: #9013: Passed, Test: #9014: Passed, Test: #9015: Passed, Test: #9016: Passed, Test: #9017: Passed, Test: #9018: Passed, Test: #9019: Passed, Test: #9020: Passed, 
Test: #9021: Passed, Test: #9022: Passed, Test: #9023: Passed, Test: #9024: Passed, Test: #9025: Passed, Test: #9026: Passed, Test: #9027: Passed, Test: #9028: Passed, Test: #9029: Passed, Test: #9030: Passed, 
Test: #9031: Passed, Test: #9032: Passed, Test: #9033: Passed, Test: #9034: Passed, Test: #9035: Passed, Test: #9036: Passed, Test: #9037: Passed, Test: #9038: Passed, Test: #9039: Passed, Test: #9040: Passed, 
Test: #9041: Passed, Test: #9042: Passed, Test: #9043: Passed, Test: #9044: Passed, Test: #9045: Passed, Test: #9046: Passed, Test: #9047: Passed, Test: #9048: Passed, Test: #9049: Passed, Test: #9050: Passed, 
Test: #9051: Passed, Test: #9052: Passed, Test: #9053: Passed, Test: #9054: Passed, Test: #9055: Passed, Test: #9056: Passed, Test: #9057: Passed, Test: #9058: Passed, Test: #9059: Passed, Test: #9060: Passed, 
Test: #9061: Passed, Test: #9062: Passed, Test: #9063: Passed, Test: #9064: Passed, Test: #9065: Passed, Test: #9066: Passed, Test: #9067: Passed, Test: #9068: Passed, Test: #9069: Passed, Test: #9070: Passed, 
Test: #9071: Passed, Test: #9072: Passed, Test: #9073: Passed, Test: #9074: Passed, Test: #9075: Passed, Test: #9076: Passed, Test: #9077: Passed, Test: #9078: Passed, Test: #9079: Passed, Test: #9080: Passed, 
Test: #9081: Passed, Test: #9082: Passed, Test: #9083: Passed, Test: #9084: Passed, Test: #9085: Passed, Test: #9086: Passed, Test: #9087: Passed, Test: #9088: Passed, Test: #9089: Passed, Test: #9090: Passed, 
Test: #9091: Passed, Test: #9092: Passed, Test: #9093: Passed, Test: #9094: Passed, Test: #9095: Passed, Test: #9096: Passed, Test: #9097: Passed, Test: #9098: Passed, Test: #9099: Passed, Test: #9100: Passed, 
Test: #9101: Passed, Test: #9102: Passed, Test: #9103: Passed, Test: #9104: Passed, Test: #9105: Passed, Test: #9106: Passed, Test: #9107: Passed, Test: #9108: Passed, Test: #9109: Passed, Test: #9110: Passed, 
Test: #9111: Passed, Test: #9112: Passed, Test: #9113: Passed, Test: #9114: Passed, Test: #9115: Passed, Test: #9116: Passed, Test: #9117: Passed, Test: #9118: Passed, Test: #9119: Passed, Test: #9120: Passed, 
Test: #9121: Passed, Test: #9122: Passed, Test: #9123: Passed, Test: #9124: Passed, Test: #9125: Passed, Test: #9126: Passed, Test: #9127: Passed, Test: #9128: Passed, Test: #9129: Passed, Test: #9130: Passed, 
Test: #9131: Passed, Test: #9132: Passed, Test: #9133: Passed, Test: #9134: Passed, Test: #9135: Passed, Test: #9136: Passed, Test: #9137: Passed, Test: #9138: Passed, Test: #9139: Passed, Test: #9140: Passed, 
Test: #9141: Passed, Test: #9142: Passed, Test: #9143: Passed, Test: #9144: Passed, Test: #9145: Passed, Test: #9146: Passed, Test: #9147: Passed, Test: #9148: Passed, Test: #9149: Passed, Test: #9150: Passed, 
Test: #9151: Passed, Test: #9152: Passed, Test: #9153: Passed, Test: #9154: Passed, Test: #9155: Passed, Test: #9156: Passed, Test: #9157: Passed, Test: #9158: Passed, Test: #9159: Passed, Test: #9160: Passed, 
Test: #9161: Passed, Test: #9162: Passed, Test: #9163: Passed, Test: #9164: Passed, Test: #9165: Passed, Test: #9166: Passed, Test: #9167: Passed, Test: #9168: Passed, Test: #9169: Passed, Test: #9170: Passed, 
Test: #9171: Passed, Test: #9172: Passed, Test: #9173: Passed, Test: #9174: Passed, Test: #9175: Passed, Test: #9176: Passed, Test: #9177: Passed, Test: #9178: Passed, Test: #9179: Passed, Test: #9180: Passed, 
Test: #9181: Passed, Test: #9182: Passed, Test: #9183: Passed, Test: #9184: Passed, Test: #9185: Passed, Test: #9186: Passed, Test: #9187: Passed, Test: #9188: Passed, Test: #9189: Passed, Test: #9190: Passed, 
Test: #9191: Passed, Test: #9192: Passed, Test: #9193: Passed, Test: #9194: Passed, Test: #9195: Passed, Test: #9196: Passed, Test: #9197: Passed, Test: #9198: Passed, Test: #9199: Passed, Test: #9200: Passed, 
Test: #9201: Passed, Test: #9202: Passed, Test: #9203: Passed, Test: #9204: Passed, Test: #9205: Passed, Test: #9206: Passed, Test: #9207: Passed, Test: #9208: Passed, Test: #9209: Passed, Test: #9210: Passed, 
Test: #9211: Passed, Test: #9212: Passed, Test: #9213: Passed, Test: #9214: Passed, Test: #9215: Passed, Test: #9216: Passed, Test: #9217: Passed, Test: #9218: Passed, Test: #9219: Passed, Test: #9220: Passed, 
Test: #9221: Passed, Test: #9222: Passed, Test: #9223: Passed, Test: #9224: Passed, Test: #9225: Passed, Test: #9226: Passed, Test: #9227: Passed, Test: #9228: Passed, Test: #9229: Passed, Test: #9230: Passed, 
Test: #9231: Passed, Test: #9232: Passed, Test: #9233: Passed, Test: #9234: Passed, Test: #9235: Passed, Test: #9236: Passed, Test: #9237: Passed, Test: #9238: Passed, Test: #9239: Passed, Test: #9240: Passed, 
Test: #9241: Passed, Test: #9242: Passed, Test: #9243: Passed, Test: #9244: Passed, Test: #9245: Passed, Test: #9246: Passed, Test: #9247: Passed, Test: #9248: Passed, Test: #9249: Passed, Test: #9250: Passed, 
Test: #9251: Passed, Test: #9252: Passed, Test: #9253: Passed, Test: #9254: Passed, Test: #9255: Passed, Test: #9256: Passed, Test: #9257: Passed, Test: #9258: Passed, Test: #9259: Passed, Test: #9260: Passed, 
Test: #9261: Passed, Test: #9262: Passed, Test: #9263: Passed, Test: #9264: Passed, Test: #9265: Passed, Test: #9266: Passed, Test: #9267: Passed, Test: #9268: Passed, Test: #9269: Passed, Test: #9270: Passed, 
Test: #9271: Passed, Test: #9272: Passed, Test: #9273: Passed, Test: #9274: Passed, Test: #9275: Passed, Test: #9276: Passed, Test: #9277: Passed, Test: #9278: Passed, Test: #9279: Passed, Test: #9280: Passed, 
Test: #9281: Passed, Test: #9282: Passed, Test: #9283: Passed, Test: #9284: Passed, Test: #9285: Passed, Test: #9286: Passed, Test: #9287: Passed, Test: #9288: Passed, Test: #9289: Passed, Test: #9290: Passed, 
Test: #9291: Passed, Test: #9292: Passed, Test: #9293: Passed, Test: #9294: Passed, Test: #9295: Passed, Test: #9296: Passed, Test: #9297: Passed, Test: #9298: Passed, Test: #9299: Passed, Test: #9300: Passed, 
Test: #9301: Passed, Test: #9302: Passed, Test: #9303: Passed, Test: #9304: Passed, Test: #9305: Passed, Test: #9306: Passed, Test: #9307: Passed, Test: #9308: Passed, Test: #9309: Passed, Test: #9310: Passed, 
Test: #9311: Passed, Test: #9312: Passed, Test: #9313: Passed, Test: #9314: Passed, Test: #9315: Passed, Test: #9316: Passed, Test: #9317: Passed, Test: #9318: Passed, Test: #9319: Passed, Test: #9320: Passed, 
Test: #9321: Passed, Test: #9322: Passed, Test: #9323: Passed, Test: #9324: Passed, Test: #9325: Passed, Test: #9326: Passed, Test: #9327: Passed, Test: #9328: Passed, Test: #9329: Passed, Test: #9330: Passed, 
Test: #9331: Passed, Test: #9332: Passed, Test: #9333: Passed, Test: #9334: Passed, Test: #9335: Passed, Test: #9336: Passed, Test: #9337: Passed, Test: #9338: Passed, Test: #9339: Passed, Test: #9340: Passed, 
Test: #9341: Passed, Test: #9342: Passed, Test: #9343: Passed, Test: #9344: Passed, Test: #9345: Passed, Test: #9346: Passed, Test: #9347: Passed, Test: #9348: Passed, Test: #9349: Passed, Test: #9350: Passed, 
Test: #9351: Passed, Test: #9352: Passed, Test: #9353: Passed, Test: #9354: Passed, Test: #9355: Passed, Test: #9356: Passed, Test: #9357: Passed, Test: #9358: Passed, Test: #9359: Passed, Test: #9360: Passed, 
Test: #9361: Passed, Test: #9362: Passed, Test: #9363: Passed, Test: #9364: Passed, Test: #9365: Passed, Test: #9366: Passed, Test: #9367: Passed, Test: #9368: Passed, Test: #9369: Passed, Test: #9370: Passed, 
Test: #9371: Passed, Test: #9372: Passed, Test: #9373: Passed, Test: #9374: Passed, Test: #9375: Passed, Test: #9376: Passed, Test: #9377: Passed, Test: #9378: Passed, Test: #9379: Passed, Test: #9380: Passed, 
Test: #9381: Passed, Test: #9382: Passed, Test: #9383: Passed, Test: #9384: Passed, Test: #9385: Passed, Test: #9386: Passed, Test: #9387: Passed, Test: #9388: Passed, Test: #9389: Passed, Test: #9390: Passed, 
Test: #9391: Passed, Test: #9392: Passed, Test: #9393: Passed, Test: #9394: Passed, Test: #9395: Passed, Test: #9396: Passed, Test: #9397: Passed, Test: #9398: Passed, Test: #9399: Passed, Test: #9400: Passed, 
Test: #9401: Passed, Test: #9402: Passed, Test: #9403: Passed, Test: #9404: Passed, Test: #9405: Passed, Test: #9406: Passed, Test: #9407: Passed, Test: #9408: Passed, Test: #9409: Passed, Test: #9410: Passed, 
Test: #9411: Passed, Test: #9412: Passed, Test: #9413: Passed, Test: #9414: Passed, Test: #9415: Passed, Test: #9416: Passed, Test: #9417: Passed, Test: #9418: Passed, Test: #9419: Passed, Test: #9420: Passed, 
Test: #9421: Passed, Test: #9422: Passed, Test: #9423: Passed, Test: #9424: Passed, Test: #9425: Passed, Test: #9426: Passed, Test: #9427: Passed, Test: #9428: Passed, Test: #9429: Passed, Test: #9430: Passed, 
Test: #9431: Passed, Test: #9432: Passed, Test: #9433: Passed, Test: #9434: Passed, Test: #9435: Passed, Test: #9436: Passed, Test: #9437: Passed, Test: #9438: Passed, Test: #9439: Passed, Test: #9440: Passed, 
Test: #9441: Passed, Test: #9442: Passed, Test: #9443: Passed, Test: #9444: Passed, Test: #9445: Passed, Test: #9446: Passed, Test: #9447: Passed, Test: #9448: Passed, Test: #9449: Passed, Test: #9450: Passed, 
Test: #9451: Passed, Test: #9452: Passed, Test: #9453: Passed, Test: #9454: Passed, Test: #9455: Passed, Test: #9456: Passed, Test: #9457: Passed, Test: #9458: Passed, Test: #9459: Passed, Test: #9460: Passed, 
Test: #9461: Passed, Test: #9462: Passed, Test: #9463: Passed, Test: #9464: Passed, Test: #9465: Passed, Test: #9466: Passed, Test: #9467: Passed, Test: #9468: Passed, Test: #9469: Passed, Test: #9470: Passed, 
Test: #9471: Passed, Test: #9472: Passed, Test: #9473: Passed, Test: #9474: Passed, Test: #9475: Passed, Test: #9476: Passed, Test: #9477: Passed, Test: #9478: Passed, Test: #9479: Passed, Test: #9480: Passed, 
Test: #9481: Passed, Test: #9482: Passed, Test: #9483: Passed, Test: #9484: Passed, Test: #9485: Passed, Test: #9486: Passed, Test: #9487: Passed, Test: #9488: Passed, Test: #9489: Passed, Test: #9490: Passed, 
Test: #9491: Passed, Test: #9492: Passed, Test: #9493: Passed, Test: #9494: Passed, Test: #9495: Passed, Test: #9496: Passed, Test: #9497: Passed, Test: #9498: Passed, Test: #9499: Passed, Test: #9500: Passed, 
Test: #9501: Passed, Test: #9502: Passed, Test: #9503: Passed, Test: #9504: Passed, Test: #9505: Passed, Test: #9506: Passed, Test: #9507: Passed, Test: #9508: Passed, Test: #9509: Passed, Test: #9510: Passed, 
Test: #9511: Passed, Test: #9512: Passed, Test: #9513: Passed, Test: #9514: Passed, Test: #9515: Passed, Test: #9516: Passed, Test: #9517: Passed, Test: #9518: Passed, Test: #9519: Passed, Test: #9520: Passed, 
Test: #9521: Passed, Test: #9522: Passed, Test: #9523: Passed, Test: #9524: Passed, Test: #9525: Passed, Test: #9526: Passed, Test: #9527: Passed, Test: #9528: Passed, Test: #9529: Passed, Test: #9530: Passed, 
Test: #9531: Passed, Test: #9532: Passed, Test: #9533: Passed, Test: #9534: Passed, Test: #9535: Passed, Test: #9536: Passed, Test: #9537: Passed, Test: #9538: Passed, Test: #9539: Passed, Test: #9540: Passed, 
Test: #9541: Passed, Test: #9542: Passed, Test: #9543: Passed, Test: #9544: Passed, Test: #9545: Passed, Test: #9546: Passed, Test: #9547: Passed, Test: #9548: Passed, Test: #9549: Passed, Test: #9550: Passed, 
Test: #9551: Passed, Test: #9552: Passed, Test: #9553: Passed, Test: #9554: Passed, Test: #9555: Passed, Test: #9556: Passed, Test: #9557: Passed, Test: #9558: Passed, Test: #9559: Passed, Test: #9560: Passed, 
Test: #9561: Passed, Test: #9562: Passed, Test: #9563: Passed, Test: #9564: Passed, Test: #9565: Passed, Test: #9566: Passed, Test: #9567: Passed, Test: #9568: Passed, Test: #9569: Passed, Test: #9570: Passed, 
Test: #9571: Passed, Test: #9572: Passed, Test: #9573: Passed, Test: #9574: Passed, Test: #9575: Passed, Test: #9576: Passed, Test: #9577: Passed, Test: #9578: Passed, Test: #9579: Passed, Test: #9580: Passed, 
Test: #9581: Passed, Test: #9582: Passed, Test: #9583: Passed, Test: #9584: Passed, Test: #9585: Passed, Test: #9586: Passed, Test: #9587: Passed, Test: #9588: Passed, Test: #9589: Passed, Test: #9590: Passed, 
Test: #9591: Passed, Test: #9592: Passed, Test: #9593: Passed, Test: #9594: Passed, Test: #9595: Passed, Test: #9596: Passed, Test: #9597: Passed, Test: #9598: Passed, Test: #9599: Passed, Test: #9600: Passed, 
Test: #9601: Passed, Test: #9602: Passed, Test: #9603: Passed, Test: #9604: Passed, Test: #9605: Passed, Test: #9606: Passed, Test: #9607: Passed, Test: #9608: Passed, Test: #9609: Passed, Test: #9610: Passed, 
Test: #9611: Passed, Test: #9612: Passed, Test: #9613: Passed, Test: #9614: Passed, Test: #9615: Passed, Test: #9616: Passed, Test: #9617: Passed, Test: #9618: Passed, Test: #9619: Passed, Test: #9620: Passed, 
Test: #9621: Passed, Test: #9622: Passed, Test: #9623: Passed, Test: #9624: Passed, Test: #9625: Passed, Test: #9626: Passed, Test: #9627: Passed, Test: #9628: Passed, Test: #9629: Passed, Test: #9630: Passed, 
Test: #9631: Passed, Test: #9632: Passed, Test: #9633: Passed, Test: #9634: Passed, Test: #9635: Passed, Test: #9636: Passed, Test: #9637: Passed, Test: #9638: Passed, Test: #9639: Passed, Test: #9640: Passed, 
Test: #9641: Passed, Test: #9642: Passed, Test: #9643: Passed, Test: #9644: Passed, Test: #9645: Passed, Test: #9646: Passed, Test: #9647: Passed, Test: #9648: Passed, Test: #9649: Passed, Test: #9650: Passed, 
Test: #9651: Passed, Test: #9652: Passed, Test: #9653: Passed, Test: #9654: Passed, Test: #9655: Passed, Test: #9656: Passed, Test: #9657: Passed, Test: #9658: Passed, Test: #9659: Passed, Test: #9660: Passed, 
Test: #9661: Passed, Test: #9662: Passed, Test: #9663: Passed, Test: #9664: Passed, Test: #9665: Passed, Test: #9666: Passed, Test: #9667: Passed, Test: #9668: Passed, Test: #9669: Passed, Test: #9670: Passed, 
Test: #9671: Passed, Test: #9672: Passed, Test: #9673: Passed, Test: #9674: Passed, Test: #9675: Passed, Test: #9676: Passed, Test: #9677: Passed, Test: #9678: Passed, Test: #9679: Passed, Test: #9680: Passed, 
Test: #9681: Passed, Test: #9682: Passed, Test: #9683: Passed, Test: #9684: Passed, Test: #9685: Passed, Test: #9686: Passed, Test: #9687: Passed, Test: #9688: Passed, Test: #9689: Passed, Test: #9690: Passed, 
Test: #9691: Passed, Test: #9692: Passed, Test: #9693: Passed, Test: #9694: Passed, Test: #9695: Passed, Test: #9696: Passed, Test: #9697: Passed, Test: #9698: Passed, Test: #9699: Passed, Test: #9700: Passed, 
Test: #9701: Passed, Test: #9702: Passed, Test: #9703: Passed, Test: #9704: Passed, Test: #9705: Passed, Test: #9706: Passed, Test: #9707: Passed, Test: #9708: Passed, Test: #9709: Passed, Test: #9710: Passed, 
Test: #9711: Passed, Test: #9712: Passed, Test: #9713: Passed, Test: #9714: Passed, Test: #9715: Passed, Test: #9716: Passed, Test: #9717: Passed, Test: #9718: Passed, Test: #9719: Passed, Test: #9720: Passed, 
Test: #9721: Passed, Test: #9722: Passed, Test: #9723: Passed, Test: #9724: Passed, Test: #9725: Passed, Test: #9726: Passed, Test: #9727: Passed, Test: #9728: Passed, Test: #9729: Passed, Test: #9730: Passed, 
Test: #9731: Passed, Test: #9732: Passed, Test: #9733: Passed, Test: #9734: Passed, Test: #9735: Passed, Test: #9736: Passed, Test: #9737: Passed, Test: #9738: Passed, Test: #9739: Passed, Test: #9740: Passed, 
Test: #9741: Passed, Test: #9742: Passed, Test: #9743: Passed, Test: #9744: Passed, Test: #9745: Passed, Test: #9746: Passed, Test: #9747: Passed, Test: #9748: Passed, Test: #9749: Passed, Test: #9750: Passed, 
Test: #9751: Passed, Test: #9752: Passed, Test: #9753: Passed, Test: #9754: Passed, Test: #9755: Passed, Test: #9756: Passed, Test: #9757: Passed, Test: #9758: Passed, Test: #9759: Passed, Test: #9760: Passed, 
Test: #9761: Passed, Test: #9762: Passed, Test: #9763: Passed, Test: #9764: Passed, Test: #9765: Passed, Test: #9766: Passed, Test: #9767: Passed, Test: #9768: Passed, Test: #9769: Passed, Test: #9770: Passed, 
Test: #9771: Passed, Test: #9772: Passed, Test: #9773: Passed, Test: #9774: Passed, Test: #9775: Passed, Test: #9776: Passed, Test: #9777: Passed, Test: #9778: Passed, Test: #9779: Passed, Test: #9780: Passed, 
Test: #9781: Passed, Test: #9782: Passed, Test: #9783: Passed, Test: #9784: Passed, Test: #9785: Passed, Test: #9786: Passed, Test: #9787: Passed, Test: #9788: Passed, Test: #9789: Passed, Test: #9790: Passed, 
Test: #9791: Passed, Test: #9792: Passed, Test: #9793: Passed, Test: #9794: Passed, Test: #9795: Passed, Test: #9796: Passed, Test: #9797: Passed, Test: #9798: Passed, Test: #9799: Passed, Test: #9800: Passed, 
Test: #9801: Passed, Test: #9802: Passed, Test: #9803: Passed, Test: #9804: Passed, Test: #9805: Passed, Test: #9806: Passed, Test: #9807: Passed, Test: #9808: Passed, Test: #9809: Passed, Test: #9810: Passed, 
Test: #9811: Passed, Test: #9812: Passed, Test: #9813: Passed, Test: #9814: Passed, Test: #9815: Passed, Test: #9816: Passed, Test: #9817: Passed, Test: #9818: Passed, Test: #9819: Passed, Test: #9820: Passed, 
Test: #9821: Passed, Test: #9822: Passed, Test: #9823: Passed, Test: #9824: Passed, Test: #9825: Passed, Test: #9826: Passed, Test: #9827: Passed, Test: #9828: Passed, Test: #9829: Passed, Test: #9830: Passed, 
Test: #9831: Passed, Test: #9832: Passed, Test: #9833: Passed, Test: #9834: Passed, Test: #9835: Passed, Test: #9836: Passed, Test: #9837: Passed, Test: #9838: Passed, Test: #9839: Passed, Test: #9840: Passed, 
Test: #9841: Passed, Test: #9842: Passed, Test: #9843: Passed, Test: #9844: Passed, Test: #9845: Passed, Test: #9846: Passed, Test: #9847: Passed, Test: #9848: Passed, Test: #9849: Passed, Test: #9850: Passed, 
Test: #9851: Passed, Test: #9852: Passed, Test: #9853: Passed, Test: #9854: Passed, Test: #9855: Passed, Test: #9856: Passed, Test: #9857: Passed, Test: #9858: Passed, Test: #9859: Passed, Test: #9860: Passed, 
Test: #9861: Passed, Test: #9862: Passed, Test: #9863: Passed, Test: #9864: Passed, Test: #9865: Passed, Test: #9866: Passed, Test: #9867: Passed, Test: #9868: Passed, Test: #9869: Passed, Test: #9870: Passed, 
Test: #9871: Passed, Test: #9872: Passed, Test: #9873: Passed, Test: #9874: Passed, Test: #9875: Passed, Test: #9876: Passed, Test: #9877: Passed, Test: #9878: Passed, Test: #9879: Passed, Test: #9880: Passed, 
Test: #9881: Passed, Test: #9882: Passed, Test: #9883: Passed, Test: #9884: Passed, Test: #9885: Passed, Test: #9886: Passed, Test: #9887: Passed, Test: #9888: Passed, Test: #9889: Passed, Test: #9890: Passed, 
Test: #9891: Passed, Test: #9892: Passed, Test: #9893: Passed, Test: #9894: Passed, Test: #9895: Passed, Test: #9896: Passed, Test: #9897: Passed, Test: #9898: Passed, Test: #9899: Passed, Test: #9900: Passed, 
Test: #9901: Passed, Test: #9902: Passed, Test: #9903: Passed, Test: #9904: Passed, Test: #9905: Passed, Test: #9906: Passed, Test: #9907: Passed, Test: #9908: Passed, Test: #9909: Passed, Test: #9910: Passed, 
Test: #9911: Passed, Test: #9912: Passed, Test: #9913: Passed, Test: #9914: Passed, Test: #9915: Passed, Test: #9916: Passed, Test: #9917: Passed, Test: #9918: Passed, Test: #9919: Passed, Test: #9920: Passed, 
Test: #9921: Passed, Test: #9922: Passed, Test: #9923: Passed, Test: #9924: Passed, Test: #9925: Passed, Test: #9926: Passed, Test: #9927: Passed, Test: #9928: Passed, Test: #9929: Passed, Test: #9930: Passed, 
Test: #9931: Passed, Test: #9932: Passed, Test: #9933: Passed, Test: #9934: Passed, Test: #9935: Passed, Test: #9936: Passed, Test: #9937: Passed, Test: #9938: Passed, Test: #9939: Passed, Test: #9940: Passed, 
Test: #9941: Passed, Test: #9942: Passed, Test: #9943: Passed, Test: #9944: Passed, Test: #9945: Passed, Test: #9946: Passed, Test: #9947: Passed, Test: #9948: Passed, Test: #9949: Passed, Test: #9950: Passed, 
Test: #9951: Passed, Test: #9952: Passed, Test: #9953: Passed, Test: #9954: Passed, Test: #9955: Passed, Test: #9956: Passed, Test: #9957: Passed, Test: #9958: Passed, Test: #9959: Passed, Test: #9960: Passed, 
Test: #9961: Passed, Test: #9962: Passed, Test: #9963: Passed, Test: #9964: Passed, Test: #9965: Passed, Test: #9966: Passed, Test: #9967: Passed, Test: #9968: Passed, Test: #9969: Passed, Test: #9970: Passed, 
Test: #9971: Passed, Test: #9972: Passed, Test: #9973: Passed, Test: #9974: Passed, Test: #9975: Passed, Test: #9976: Passed, Test: #9977: Passed, Test: #9978: Passed, Test: #9979: Passed, Test: #9980: Passed, 
Test: #9981: Passed, Test: #9982: Passed, Test: #9983: Passed, Test: #9984: Passed, Test: #9985: Passed, Test: #9986: Passed, Test: #9987: Passed, Test: #9988: Passed, Test: #9989: Passed, Test: #9990: Passed, 
Test: #9991: Passed, Test: #9992: Passed, Test: #9993: Passed, Test: #9994: Passed, Test: #9995: Passed, Test: #9996: Passed, Test: #9997: Passed, Test: #9998: Passed, Test: #9999: Passed, Test: #10000: Passed, 
All tests passed!

Times ran: 10000 | Tests Failed: 0
File 'dominion.c'
Lines executed:17.86% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/***** Refactored cards - now with bugs!*****/
        -:    9:
        -:   10:/* Smithy */
        -:   11:/* Card Test 1 */
        -:   12:/* Random tester card1 */
    #####:   13:int play_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:   14:{
        -:   15:	int i;
        -:   16:
        -:   17:      //+3 Cards
    #####:   18:        for (i = 1; i < 3; i++) /* BUG: i = 1 instead of i = 0 */
        -:   19:	{
    #####:   20:	  drawCard(currentPlayer, state);
        -:   21:	}
        -:   22:			
        -:   23:      //discard card from hand
    #####:   24:      discardCard(handPos, currentPlayer, state, 0);
    #####:   25:      return 0;
        -:   26:}
        -:   27:
        -:   28:/* Adventurer */
        -:   29:/* Card Test 2 */
        -:   30:/* Random tester */
    #####:   31:int play_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:   32:{
        -:   33:	int cardDrawn;
        -:   34:
    #####:   35:	while(drawntreasure<2){
    #####:   36:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   37:		  shuffle(currentPlayer, state);
        -:   38:		}
    #####:   39:		drawCard(currentPlayer, state);
    #####:   40:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   41:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   42:		  drawntreasure++;
        -:   43:		else{
    #####:   44:		  temphand[z]=cardDrawn;
    #####:   45:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   46:		  z++;
        -:   47:		}
        -:   48:	      }
    #####:   49:	      while(z-1>0){ /* BUG: '>' instead of '>=' */
    #####:   50:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   51:		z=z-1;
        -:   52:	      }
    #####:   53:	      return 0;
        -:   54:}
        -:   55:
        -:   56:/* Council Room */
        -:   57:/* Card Test 3 */
    #####:   58:int play_council_room(int currentPlayer, struct gameState *state, int handPos)
        -:   59:{
        -:   60:	int i;
        -:   61:
        -:   62:      //+4 Cards
    #####:   63:      for (i = 0; i < 3; i++) /* BUG: draw 3 cards instead of 4 */
        -:   64:	{
    #####:   65:	  drawCard(currentPlayer, state);
        -:   66:	}
        -:   67:			
        -:   68:      //+1 Buy
    #####:   69:      state->numBuys++;
        -:   70:			
        -:   71:      //Each other player draws a card
    #####:   72:      for (i = 0; i < state->numPlayers; i++)
        -:   73:	{
    #####:   74:	  if ( i != currentPlayer )
        -:   75:	    {
    #####:   76:	      drawCard(i, state);
        -:   77:	    }
        -:   78:	}
        -:   79:			
        -:   80:      //put played card in played card pile
    #####:   81:      discardCard(handPos, currentPlayer, state, 0);
        -:   82:			
    #####:   83:      return 0;
        -:   84:}
        -:   85:
        -:   86:/* Mine */
    #####:   87:int play_mine(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:   88:{
        -:   89:	int i;
        -:   90:	int j;
        -:   91:
    #####:   92:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:   93:
    #####:   94:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:   95:	  {
    #####:   96:	    return -1;
        -:   97:	  }
        -:   98:		  
    #####:   99:	if (choice2 > treasure_map || choice2 < curse)
        -:  100:	  {
    #####:  101:	    return -1;
        -:  102:	  }
        -:  103:
    #####:  104:	if ( (getCost(state->hand[currentPlayer][choice1]) + 4) > getCost(choice2) ) /* BUG: Gain treasure costing up to 4 more instead of 3 */
        -:  105:	  {
    #####:  106:	    return -1;
        -:  107:	  }
        -:  108:
    #####:  109:	gainCard(choice2, state, 2, currentPlayer);
        -:  110:
        -:  111:	//discard card from hand
    #####:  112:	discardCard(handPos, currentPlayer, state, 0);
        -:  113:
        -:  114:	//discard trashed card
    #####:  115:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  116:	  {
    #####:  117:	    if (state->hand[currentPlayer][i] == j)
        -:  118:	      {
    #####:  119:		discardCard(i, currentPlayer, state, 0);			
    #####:  120:		break;
        -:  121:	      }
        -:  122:	  }
        -:  123:			  
    #####:  124:	return 0;
        -:  125:}
        -:  126:
        -:  127:/* Remodel */
    #####:  128:int play_remodel(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  129:{
        -:  130:	int i;
        -:  131:	int j;
        -:  132:
    #####:  133:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  134:
    #####:  135:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  136:	{
    #####:  137:	  return -1;
        -:  138:	}
        -:  139:
    #####:  140:      gainCard(choice2, state, 0, currentPlayer);
        -:  141:
        -:  142:      //discard card from hand
    #####:  143:      discardCard(handPos, currentPlayer, state, 0);
        -:  144:
        -:  145:      //discard trashed card
    #####:  146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  147:	{
    #####:  148:	  if (state->hand[currentPlayer][i] == j)
        -:  149:	    {
    #####:  150:	      discardCard(i, currentPlayer, state, 0);			
    #####:  151:	      break;
        -:  152:	    }
        -:  153:	}
        -:  154:
        -:  155:
    #####:  156:      return 0;
        -:  157:}
        -:  158:
        -:  159:/* Village */
        -:  160:/* Card Test 4 */
        -:  161:/* Random tester card 2 */
    #####:  162:int play_village(int currentPlayer, struct gameState *state, int handPos)
        -:  163:{
        -:  164:      //+1 Card
    #####:  165:      drawCard(currentPlayer, state);
        -:  166:			
        -:  167:      //+2 Actions
    #####:  168:      state->numActions = state->numActions + 2;
        -:  169:			
        -:  170:      //discard played card from hand
    #####:  171:      discardCard(handPos, currentPlayer, state, 0);
    #####:  172:      return 0;
        -:  173:}
        -:  174:
        -:  175:/***** End refactoring *****/
        -:  176:
        -:  177:
    12700:  178:int compare(const void* a, const void* b) {
    12700:  179:  if (*(int*)a > *(int*)b)
     4950:  180:    return 1;
     7750:  181:  if (*(int*)a < *(int*)b)
     5670:  182:    return -1;
     2080:  183:  return 0;
        -:  184:}
        -:  185:
    #####:  186:struct gameState* newGame() {
    #####:  187:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  188:  return g;
        -:  189:}
        -:  190:
    #####:  191:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  192:		  int k8, int k9, int k10) {
    #####:  193:  int* k = malloc(10 * sizeof(int));
    #####:  194:  k[0] = k1;
    #####:  195:  k[1] = k2;
    #####:  196:  k[2] = k3;
    #####:  197:  k[3] = k4;
    #####:  198:  k[4] = k5;
    #####:  199:  k[5] = k6;
    #####:  200:  k[6] = k7;
    #####:  201:  k[7] = k8;
    #####:  202:  k[8] = k9;
    #####:  203:  k[9] = k10;
    #####:  204:  return k;
        -:  205:}
        -:  206:
       90:  207:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  208:		   struct gameState *state) {
        -:  209:
        -:  210:  int i;
        -:  211:  int j;
        -:  212:  int it;			
        -:  213:  //set up random number generator
       90:  214:  SelectStream(1);
       90:  215:  PutSeed((long)randomSeed);
        -:  216:  
        -:  217:  //check number of players
       90:  218:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  219:    {
    #####:  220:      return -1;
        -:  221:    }
        -:  222:
        -:  223:  //set number of players
       90:  224:  state->numPlayers = numPlayers;
        -:  225:
        -:  226:  //check selected kingdom cards are different
      990:  227:  for (i = 0; i < 10; i++)
        -:  228:    {
     9900:  229:      for (j = 0; j < 10; j++)
        -:  230:        {
     9000:  231:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  232:	    {
    #####:  233:	      return -1;
        -:  234:	    }
        -:  235:        }
        -:  236:    }
        -:  237:
        -:  238:
        -:  239:  //initialize supply
        -:  240:  ///////////////////////////////
        -:  241:
        -:  242:  //set number of Curse cards
       90:  243:  if (numPlayers == 2)
        -:  244:    {
       90:  245:      state->supplyCount[curse] = 10;
        -:  246:    }
    #####:  247:  else if (numPlayers == 3)
        -:  248:    {
    #####:  249:      state->supplyCount[curse] = 20;
        -:  250:    }
        -:  251:  else
        -:  252:    {
    #####:  253:      state->supplyCount[curse] = 30;
        -:  254:    }
        -:  255:
        -:  256:  //set number of Victory cards
       90:  257:  if (numPlayers == 2)
        -:  258:    {
       90:  259:      state->supplyCount[estate] = 8;
       90:  260:      state->supplyCount[duchy] = 8;
       90:  261:      state->supplyCount[province] = 8;
        -:  262:    }
        -:  263:  else
        -:  264:    {
    #####:  265:      state->supplyCount[estate] = 12;
    #####:  266:      state->supplyCount[duchy] = 12;
    #####:  267:      state->supplyCount[province] = 12;
        -:  268:    }
        -:  269:
        -:  270:  //set number of Treasure cards
       90:  271:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       90:  272:  state->supplyCount[silver] = 40;
       90:  273:  state->supplyCount[gold] = 30;
        -:  274:
        -:  275:  //set number of Kingdom cards
     1890:  276:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  277:    {
    14850:  278:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  279:	{
    13950:  280:	  if (kingdomCards[j] == i)
        -:  281:	    {
        -:  282:	      //check if card is a 'Victory' Kingdom card
      900:  283:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  284:		{
      360:  285:		  if (numPlayers == 2){ 
      180:  286:		    state->supplyCount[i] = 8; 
        -:  287:		  }
    #####:  288:		  else{ state->supplyCount[i] = 12; }
        -:  289:		}
        -:  290:	      else
        -:  291:		{
      720:  292:		  state->supplyCount[i] = 10;
        -:  293:		}
      900:  294:	      break;
        -:  295:	    }
        -:  296:	  else    //card is not in the set choosen for the game
        -:  297:	    {
    13050:  298:	      state->supplyCount[i] = -1;
        -:  299:	    }
        -:  300:	}
        -:  301:
        -:  302:    }
        -:  303:
        -:  304:  ////////////////////////
        -:  305:  //supply intilization complete
        -:  306:
        -:  307:  //set player decks
      270:  308:  for (i = 0; i < numPlayers; i++)
        -:  309:    {
      180:  310:      state->deckCount[i] = 0;
      720:  311:      for (j = 0; j < 3; j++)
        -:  312:	{
      540:  313:	  state->deck[i][j] = estate;
      540:  314:	  state->deckCount[i]++;
        -:  315:	}
     1440:  316:      for (j = 3; j < 10; j++)
        -:  317:	{
     1260:  318:	  state->deck[i][j] = copper;
     1260:  319:	  state->deckCount[i]++;		
        -:  320:	}
        -:  321:    }
        -:  322:
        -:  323:  //shuffle player decks
      270:  324:  for (i = 0; i < numPlayers; i++)
        -:  325:    {
      180:  326:      if ( shuffle(i, state) < 0 )
        -:  327:	{
    #####:  328:	  return -1;
        -:  329:	}
        -:  330:    }
        -:  331:
        -:  332:  //draw player hands
      270:  333:  for (i = 0; i < numPlayers; i++)
        -:  334:    {  
        -:  335:      //initialize hand size to zero
      180:  336:      state->handCount[i] = 0;
      180:  337:      state->discardCount[i] = 0;
        -:  338:      //draw 5 cards
        -:  339:      // for (j = 0; j < 5; j++)
        -:  340:      //	{
        -:  341:      //	  drawCard(i, state);
        -:  342:      //	}
        -:  343:    }
        -:  344:  
        -:  345:  //set embargo tokens to 0 for all supply piles
     2520:  346:  for (i = 0; i <= treasure_map; i++)
        -:  347:    {
     2430:  348:      state->embargoTokens[i] = 0;
        -:  349:    }
        -:  350:
        -:  351:  //initialize first player's turn
       90:  352:  state->outpostPlayed = 0;
       90:  353:  state->phase = 0;
       90:  354:  state->numActions = 1;
       90:  355:  state->numBuys = 1;
       90:  356:  state->playedCardCount = 0;
       90:  357:  state->whoseTurn = 0;
       90:  358:  state->handCount[state->whoseTurn] = 0;
        -:  359:  //int it; move to top
        -:  360:
        -:  361:  //Moved draw cards to here, only drawing at the start of a turn
      540:  362:  for (it = 0; it < 5; it++){
      450:  363:    drawCard(state->whoseTurn, state);
        -:  364:  }
        -:  365:
       90:  366:  updateCoins(state->whoseTurn, state, 0);
        -:  367:
       90:  368:  return 0;
        -:  369:}
        -:  370:
      180:  371:int shuffle(int player, struct gameState *state) {
        -:  372: 
        -:  373:
        -:  374:  int newDeck[MAX_DECK];
      180:  375:  int newDeckPos = 0;
        -:  376:  int card;
        -:  377:  int i;
        -:  378:
      180:  379:  if (state->deckCount[player] < 1)
    #####:  380:    return -1;
      180:  381:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  382:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  383:
     2160:  384:  while (state->deckCount[player] > 0) {
     1800:  385:    card = floor(Random() * state->deckCount[player]);
     1800:  386:    newDeck[newDeckPos] = state->deck[player][card];
     1800:  387:    newDeckPos++;
     6300:  388:    for (i = card; i < state->deckCount[player]-1; i++) {
     4500:  389:      state->deck[player][i] = state->deck[player][i+1];
        -:  390:    }
     1800:  391:    state->deckCount[player]--;
        -:  392:  }
     1980:  393:  for (i = 0; i < newDeckPos; i++) {
     1800:  394:    state->deck[player][i] = newDeck[i];
     1800:  395:    state->deckCount[player]++;
        -:  396:  }
        -:  397:
      180:  398:  return 0;
        -:  399:}
        -:  400:
    #####:  401:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  402:{	
        -:  403:  int card;
    #####:  404:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  405:
        -:  406:  //check if it is the right phase
    #####:  407:  if (state->phase != 0)
        -:  408:    {
    #####:  409:      return -1;
        -:  410:    }
        -:  411:	
        -:  412:  //check if player has enough actions
    #####:  413:  if ( state->numActions < 1 )
        -:  414:    {
    #####:  415:      return -1;
        -:  416:    }
        -:  417:	
        -:  418:  //get card played
    #####:  419:  card = handCard(handPos, state);
        -:  420:	
        -:  421:  //check if selected card is an action
    #####:  422:  if ( card < adventurer || card > treasure_map )
        -:  423:    {
    #####:  424:      return -1;
        -:  425:    }
        -:  426:	
        -:  427:  //play card
    #####:  428:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  429:    {
    #####:  430:      return -1;
        -:  431:    }
        -:  432:	
        -:  433:  //reduce number of actions
    #####:  434:  state->numActions--;
        -:  435:
        -:  436:  //update coins (Treasure cards may be added with card draws)
    #####:  437:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  438:	
    #####:  439:  return 0;
        -:  440:}
        -:  441:
    #####:  442:int buyCard(int supplyPos, struct gameState *state) {
        -:  443:  int who;
        -:  444:  if (DEBUG){
        -:  445:    printf("Entering buyCard...\n");
        -:  446:  }
        -:  447:
        -:  448:  // I don't know what to do about the phase thing.
        -:  449:
    #####:  450:  who = state->whoseTurn;
        -:  451:
    #####:  452:  if (state->numBuys < 1){
        -:  453:    if (DEBUG)
        -:  454:      printf("You do not have any buys left\n");
    #####:  455:    return -1;
    #####:  456:  } else if (supplyCount(supplyPos, state) <1){
        -:  457:    if (DEBUG)
        -:  458:      printf("There are not any of that type of card left\n");
    #####:  459:    return -1;
    #####:  460:  } else if (state->coins < getCost(supplyPos)){
        -:  461:    if (DEBUG) 
        -:  462:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  463:    return -1;
        -:  464:  } else {
    #####:  465:    state->phase=1;
        -:  466:    //state->supplyCount[supplyPos]--;
    #####:  467:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  468:  
    #####:  469:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  470:    state->numBuys--;
        -:  471:    if (DEBUG)
        -:  472:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  473:  }
        -:  474:
        -:  475:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  476:  //state->discardCount[who]++;
        -:  477:    
    #####:  478:  return 0;
        -:  479:}
        -:  480:
        -:  481:/***** Use this function for Unit test 4 *****/
    #####:  482:int numHandCards(struct gameState *state) {
    #####:  483:  return state->handCount[ whoseTurn(state) ];
        -:  484:}
        -:  485:
    #####:  486:int handCard(int handPos, struct gameState *state) {
    #####:  487:  int currentPlayer = whoseTurn(state);
    #####:  488:  return state->hand[currentPlayer][handPos];
        -:  489:}
        -:  490:
        -:  491:/***** Use this function for Unit test 3 *****/
    #####:  492:int supplyCount(int card, struct gameState *state) {
    #####:  493:  return state->supplyCount[card];
        -:  494:}
        -:  495:
    #####:  496:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  497:  int i;
    #####:  498:  int count = 0;
        -:  499:
    #####:  500:  for (i = 0; i < state->deckCount[player]; i++)
        -:  501:    {
    #####:  502:      if (state->deck[player][i] == card) count++;
        -:  503:    }
        -:  504:
    #####:  505:  for (i = 0; i < state->handCount[player]; i++)
        -:  506:    {
    #####:  507:      if (state->hand[player][i] == card) count++;
        -:  508:    }
        -:  509:
    #####:  510:  for (i = 0; i < state->discardCount[player]; i++)
        -:  511:    {
    #####:  512:      if (state->discard[player][i] == card) count++;
        -:  513:    }
        -:  514:
    #####:  515:  return count;
        -:  516:}
        -:  517:
    #####:  518:int whoseTurn(struct gameState *state) {
    #####:  519:  return state->whoseTurn;
        -:  520:}
        -:  521:
    #####:  522:int endTurn(struct gameState *state) {
        -:  523:  int k;
        -:  524:  int i;
    #####:  525:  int currentPlayer = whoseTurn(state);
        -:  526:  
        -:  527:  //Discard hand
    #####:  528:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  529:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  530:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  531:  }
    #####:  532:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  533:    
        -:  534:  //Code for determining the player
    #####:  535:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  536:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  537:  }
        -:  538:  else{
    #####:  539:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  540:  }
        -:  541:
    #####:  542:  state->outpostPlayed = 0;
    #####:  543:  state->phase = 0;
    #####:  544:  state->numActions = 1;
    #####:  545:  state->coins = 0;
    #####:  546:  state->numBuys = 1;
    #####:  547:  state->playedCardCount = 0;
    #####:  548:  state->handCount[state->whoseTurn] = 0;
        -:  549:
        -:  550:  //int k; move to top
        -:  551:  //Next player draws hand
    #####:  552:  for (k = 0; k < 5; k++){
    #####:  553:    drawCard(state->whoseTurn, state);//Draw a card
        -:  554:  }
        -:  555:
        -:  556:  //Update money
    #####:  557:  updateCoins(state->whoseTurn, state , 0);
        -:  558:
    #####:  559:  return 0;
        -:  560:}
        -:  561:
        -:  562:/***** Use this function for Unit test 1 *****/
       90:  563:int isGameOver(struct gameState *state) {
        -:  564:  int i;
        -:  565:  int j;
        -:  566:	
        -:  567:  //if stack of Province cards is empty, the game ends
       90:  568:  if (state->supplyCount[province] == 0)
        -:  569:    {
       26:  570:      return 1;
        -:  571:    }
        -:  572:
        -:  573:  //if three supply pile are at 0, the game ends
       64:  574:  j = 0;
     1664:  575:  for (i = 0; i < 25; i++)
        -:  576:    {
     1600:  577:      if (state->supplyCount[i] == 0)
        -:  578:	{
       96:  579:	  j++;
        -:  580:	}
        -:  581:    }
       64:  582:  if ( j >= 3)
        -:  583:    {
       16:  584:      return 1;
        -:  585:    }
        -:  586:
       48:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int scoreFor (int player, struct gameState *state) {
        -:  591:
        -:  592:  int i;
    #####:  593:  int score = 0;
        -:  594:  //score from hand
    #####:  595:  for (i = 0; i < state->handCount[player]; i++)
        -:  596:    {
    #####:  597:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  598:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  599:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  600:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  601:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  602:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  603:    }
        -:  604:
        -:  605:  //score from discard
    #####:  606:  for (i = 0; i < state->discardCount[player]; i++)
        -:  607:    {
    #####:  608:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  609:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  610:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  611:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  612:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  613:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  614:    }
        -:  615:
        -:  616:  //score from deck
    #####:  617:  for (i = 0; i < state->discardCount[player]; i++)
        -:  618:    {
    #####:  619:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  620:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  621:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  622:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  623:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  624:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  625:    }
        -:  626:
    #####:  627:  return score;
        -:  628:}
        -:  629:
    #####:  630:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  631:  int i;	
        -:  632:  int j;
        -:  633:  int highScore;
        -:  634:  int currentPlayer;
        -:  635:
        -:  636:  //get score for each player
    #####:  637:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  638:    {
        -:  639:      //set unused player scores to -9999
    #####:  640:      if (i >= state->numPlayers)
        -:  641:	{
    #####:  642:	  players[i] = -9999;
        -:  643:	}
        -:  644:      else
        -:  645:	{
    #####:  646:	  players[i] = scoreFor (i, state);
        -:  647:	}
        -:  648:    }
        -:  649:
        -:  650:  //find highest score
    #####:  651:  j = 0;
    #####:  652:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  653:    {
    #####:  654:      if (players[i] > players[j])
        -:  655:	{
    #####:  656:	  j = i;
        -:  657:	}
        -:  658:    }
    #####:  659:  highScore = players[j];
        -:  660:
        -:  661:  //add 1 to players who had less turns
    #####:  662:  currentPlayer = whoseTurn(state);
    #####:  663:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  664:    {
    #####:  665:      if ( players[i] == highScore && i > currentPlayer )
        -:  666:	{
    #####:  667:	  players[i]++;
        -:  668:	}
        -:  669:    }
        -:  670:
        -:  671:  //find new highest score
    #####:  672:  j = 0;
    #####:  673:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  674:    {
    #####:  675:      if ( players[i] > players[j] )
        -:  676:	{
    #####:  677:	  j = i;
        -:  678:	}
        -:  679:    }
    #####:  680:  highScore = players[j];
        -:  681:
        -:  682:  //set winners in array to 1 and rest to 0
    #####:  683:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  684:    {
    #####:  685:      if ( players[i] == highScore )
        -:  686:	{
    #####:  687:	  players[i] = 1;
        -:  688:	}
        -:  689:      else
        -:  690:	{
    #####:  691:	  players[i] = 0;
        -:  692:	}
        -:  693:    }
        -:  694:
    #####:  695:  return 0;
        -:  696:}
        -:  697:
      450:  698:int drawCard(int player, struct gameState *state)
        -:  699:{	int count;
        -:  700:  int deckCounter;
      450:  701:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  702:    
        -:  703:    //Step 1 Shuffle the discard pile back into a deck
        -:  704:    int i;
        -:  705:    //Move discard to deck
    #####:  706:    for (i = 0; i < state->discardCount[player];i++){
    #####:  707:      state->deck[player][i] = state->discard[player][i];
    #####:  708:      state->discard[player][i] = -1;
        -:  709:    }
        -:  710:
    #####:  711:    state->deckCount[player] = state->discardCount[player];
    #####:  712:    state->discardCount[player] = 0;//Reset discard
        -:  713:
        -:  714:    //Shufffle the deck
    #####:  715:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  716:   
        -:  717:    if (DEBUG){//Debug statements
        -:  718:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  719:    }
        -:  720:    
    #####:  721:    state->discardCount[player] = 0;
        -:  722:
        -:  723:    //Step 2 Draw Card
    #####:  724:    count = state->handCount[player];//Get current player's hand count
        -:  725:    
        -:  726:    if (DEBUG){//Debug statements
        -:  727:      printf("Current hand count: %d\n", count);
        -:  728:    }
        -:  729:    
    #####:  730:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  731:
    #####:  732:    if (deckCounter == 0)
    #####:  733:      return -1;
        -:  734:
    #####:  735:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  736:    state->deckCount[player]--;
    #####:  737:    state->handCount[player]++;//Increment hand count
        -:  738:  }
        -:  739:
        -:  740:  else{
      450:  741:    int count = state->handCount[player];//Get current hand count for player
        -:  742:    int deckCounter;
        -:  743:    if (DEBUG){//Debug statements
        -:  744:      printf("Current hand count: %d\n", count);
        -:  745:    }
        -:  746:
      450:  747:    deckCounter = state->deckCount[player];//Create holder for the deck count
      450:  748:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      450:  749:    state->deckCount[player]--;
      450:  750:    state->handCount[player]++;//Increment hand count
        -:  751:  }
        -:  752:
      450:  753:  return 0;
        -:  754:}
        -:  755:
    #####:  756:int getCost(int cardNumber)
        -:  757:{
    #####:  758:  switch( cardNumber ) 
        -:  759:    {
        -:  760:    case curse:
    #####:  761:      return 0;
        -:  762:    case estate:
    #####:  763:      return 2;
        -:  764:    case duchy:
    #####:  765:      return 5;
        -:  766:    case province:
    #####:  767:      return 8;
        -:  768:    case copper:
    #####:  769:      return 0;
        -:  770:    case silver:
    #####:  771:      return 3;
        -:  772:    case gold:
    #####:  773:      return 6;
        -:  774:    case adventurer:
    #####:  775:      return 6;
        -:  776:    case council_room:
    #####:  777:      return 5;
        -:  778:    case feast:
    #####:  779:      return 4;
        -:  780:    case gardens:
    #####:  781:      return 4;
        -:  782:    case mine:
    #####:  783:      return 5;
        -:  784:    case remodel:
    #####:  785:      return 4;
        -:  786:    case smithy:
    #####:  787:      return 4;
        -:  788:    case village:
    #####:  789:      return 3;
        -:  790:    case baron:
    #####:  791:      return 4;
        -:  792:    case great_hall:
    #####:  793:      return 3;
        -:  794:    case minion:
    #####:  795:      return 5;
        -:  796:    case steward:
    #####:  797:      return 3;
        -:  798:    case tribute:
    #####:  799:      return 5;
        -:  800:    case ambassador:
    #####:  801:      return 3;
        -:  802:    case cutpurse:
    #####:  803:      return 4;
        -:  804:    case embargo: 
    #####:  805:      return 2;
        -:  806:    case outpost:
    #####:  807:      return 5;
        -:  808:    case salvager:
    #####:  809:      return 4;
        -:  810:    case sea_hag:
    #####:  811:      return 4;
        -:  812:    case treasure_map:
    #####:  813:      return 4;
        -:  814:    }
        -:  815:	
    #####:  816:  return -1;
        -:  817:}
        -:  818:
        -:  819:/********** BEGINNING of cardEffct **********/
        -:  820:/* This is where the refactor and bug additions will be done for assignment-2 */
    #####:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
    #####:  828:  int currentPlayer = whoseTurn(state);
    #####:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
    #####:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND];// moved above the if statement
    #####:  833:  int drawntreasure=0;
        -:  834:  int cardDrawn;
    #####:  835:  int z = 0;// this is the counter for the temp hand
    #####:  836:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  837:    nextPlayer = 0;
        -:  838:  }
        -:  839:  
        -:  840:  /* Refactoring switch statement so cards are implemented in their own functions */
        -:  841:  //uses switch to select card and perform actions
    #####:  842:  switch( card ) 
        -:  843:    {
        -:  844:
        -:  845:    /***** Refactor adventurer *****/
        -:  846:    case adventurer:
    #####:  847:	    return play_adventurer(drawntreasure, state, currentPlayer, temphand, z);
        -:  848:      /*
        -:  849:      while(drawntreasure<2){
        -:  850:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  851:	  shuffle(currentPlayer, state);
        -:  852:	}
        -:  853:	drawCard(currentPlayer, state);
        -:  854:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  855:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  856:	  drawntreasure++;
        -:  857:	else{
        -:  858:	  temphand[z]=cardDrawn;
        -:  859:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  860:	  z++;
        -:  861:	}
        -:  862:      }
        -:  863:      while(z-1>=0){
        -:  864:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  865:	z=z-1;
        -:  866:      }
        -:  867:      return 0;
        -:  868:      */
        -:  869:			
        -:  870:    /***** Refactor council room*****/
        -:  871:    case council_room:
    #####:  872:       	return play_council_room(currentPlayer, state, handPos);
        -:  873:      /*
        -:  874:      //+4 Cards
        -:  875:      for (i = 0; i < 4; i++)
        -:  876:	{
        -:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
        -:  879:			
        -:  880:      //+1 Buy
        -:  881:      state->numBuys++;
        -:  882:			
        -:  883:      //Each other player draws a card
        -:  884:      for (i = 0; i < state->numPlayers; i++)
        -:  885:	{
        -:  886:	  if ( i != currentPlayer )
        -:  887:	    {
        -:  888:	      drawCard(i, state);
        -:  889:	    }
        -:  890:	}
        -:  891:			
        -:  892:      //put played card in played card pile
        -:  893:      discardCard(handPos, currentPlayer, state, 0);
        -:  894:			
        -:  895:      return 0;
        -:  896:      */
        -:  897:			
        -:  898:    case feast:
        -:  899:      //gain card with cost up to 5
        -:  900:      //Backup hand
    #####:  901:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  902:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  903:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  904:      }
        -:  905:      //Backup hand
        -:  906:
        -:  907:      //Update Coins for Buy
    #####:  908:      updateCoins(currentPlayer, state, 5);
    #####:  909:      x = 1;//Condition to loop on
    #####:  910:      while( x == 1) {//Buy one card
    #####:  911:	if (supplyCount(choice1, state) <= 0){
        -:  912:	  if (DEBUG)
        -:  913:	    printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:	  if (DEBUG){
        -:  916:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  917:	  }
        -:  918:	}
    #####:  919:	else if (state->coins < getCost(choice1)){
    #####:  920:	  printf("That card is too expensive!\n");
        -:  921:
        -:  922:	  if (DEBUG){
        -:  923:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  924:	  }
        -:  925:	}
        -:  926:	else{
        -:  927:
        -:  928:	  if (DEBUG){
        -:  929:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:	  }
        -:  931:
    #####:  932:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  933:	  x = 0;//No more buying cards
        -:  934:
        -:  935:	  if (DEBUG){
        -:  936:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:	  }
        -:  938:
        -:  939:	}
        -:  940:      }     
        -:  941:
        -:  942:      //Reset Hand
    #####:  943:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  944:	state->hand[currentPlayer][i] = temphand[i];
    #####:  945:	temphand[i] = -1;
        -:  946:      }
        -:  947:      //Reset Hand
        -:  948:      			
    #####:  949:      return 0;
        -:  950:			
        -:  951:    case gardens:
    #####:  952:      return -1;
        -:  953:			
        -:  954:    /***** Refactor mine*****/
        -:  955:    case mine:
    #####:  956:	return play_mine(state, choice1, choice2, currentPlayer, handPos);
        -:  957:      /*
        -:  958:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
        -:  960:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  961:	{
        -:  962:	  return -1;
        -:  963:	}
        -:  964:		
        -:  965:      if (choice2 > treasure_map || choice2 < curse)
        -:  966:	{
        -:  967:	  return -1;
        -:  968:	}
        -:  969:
        -:  970:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  971:	{
        -:  972:	  return -1;
        -:  973:	}
        -:  974:
        -:  975:      gainCard(choice2, state, 2, currentPlayer);
        -:  976:
        -:  977:      //discard card from hand
        -:  978:      discardCard(handPos, currentPlayer, state, 0);
        -:  979:
        -:  980:      //discard trashed card
        -:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:	{
        -:  983:	  if (state->hand[currentPlayer][i] == j)
        -:  984:	    {
        -:  985:	      discardCard(i, currentPlayer, state, 0);			
        -:  986:	      break;
        -:  987:	    }
        -:  988:	}
        -:  989:			
        -:  990:      return 0;
        -:  991:      */
        -:  992:			
        -:  993:    /***** Refactor remodel*****/
        -:  994:    case remodel:
    #####:  995:      return play_remodel(state, choice1, choice2, currentPlayer, handPos);
        -:  996:      /*
        -:  997:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  998:
        -:  999:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1000:	{
        -: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
        -: 1004:      gainCard(choice2, state, 0, currentPlayer);
        -: 1005:
        -: 1006:      //discard card from hand
        -: 1007:      discardCard(handPos, currentPlayer, state, 0);
        -: 1008:
        -: 1009:      //discard trashed card
        -: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1011:	{
        -: 1012:	  if (state->hand[currentPlayer][i] == j)
        -: 1013:	    {
        -: 1014:	      discardCard(i, currentPlayer, state, 0);			
        -: 1015:	      break;
        -: 1016:	    }
        -: 1017:	}
        -: 1018:
        -: 1019:
        -: 1020:      return 0;
        -: 1021:      */
        -: 1022:		
        -: 1023:    /***** Refactor smithy *****/
        -: 1024:    case smithy:
    #####: 1025:      return play_smithy(currentPlayer, state, handPos);
        -: 1026:      /* 
        -: 1027:      //+3 Cards
        -: 1028:      for (i = 0; i < 3; i++)
        -: 1029:	{
        -: 1030:	  drawCard(currentPlayer, state);
        -: 1031:	}
        -: 1032:			
        -: 1033:      //discard card from hand
        -: 1034:      discardCard(handPos, currentPlayer, state, 0);
        -: 1035:      return 0;
        -: 1036:      */
        -: 1037:		
        -: 1038:
        -: 1039:    /***** Refactored village for assignment-3 (no new bugs introduced) *****/
        -: 1040:    case village:
    #####: 1041:      return play_village(currentPlayer, state, handPos);
        -: 1042:      /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:      */
        -: 1053:		
        -: 1054:    case baron:
    #####: 1055:      state->numBuys++;//Increase buys by 1!
    #####: 1056:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1057:	int p = 0;//Iterator for hand!
    #####: 1058:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1059:	while(card_not_discarded){
    #####: 1060:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1061:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1062:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1063:	    state->discardCount[currentPlayer]++;
    #####: 1064:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1065:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1066:	    }
    #####: 1067:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1068:	    state->handCount[currentPlayer]--;
    #####: 1069:	    card_not_discarded = 0;//Exit the loop
        -: 1070:	  }
    #####: 1071:	  else if (p > state->handCount[currentPlayer]){
        -: 1072:	    if(DEBUG) {
        -: 1073:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1074:	      printf("Must gain an estate if there are any\n");
        -: 1075:	    }
    #####: 1076:	    if (supplyCount(estate, state) > 0){
    #####: 1077:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1078:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1079:	      if (supplyCount(estate, state) == 0){
    #####: 1080:		isGameOver(state);
        -: 1081:	      }
        -: 1082:	    }
    #####: 1083:	    card_not_discarded = 0;//Exit the loop
        -: 1084:	  }
        -: 1085:			    
        -: 1086:	  else{
    #####: 1087:	    p++;//Next card
        -: 1088:	  }
        -: 1089:	}
        -: 1090:      }
        -: 1091:			    
        -: 1092:      else{
    #####: 1093:	if (supplyCount(estate, state) > 0){
    #####: 1094:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1095:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1096:	  if (supplyCount(estate, state) == 0){
    #####: 1097:	    isGameOver(state);
        -: 1098:	  }
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
        -: 1102:      
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case great_hall:
        -: 1106:      //+1 Card
    #####: 1107:      drawCard(currentPlayer, state);
        -: 1108:			
        -: 1109:      //+1 Actions
    #####: 1110:      state->numActions++;
        -: 1111:			
        -: 1112:      //discard card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case minion:
        -: 1117:      //+1 action
    #####: 1118:      state->numActions++;
        -: 1119:			
        -: 1120:      //discard card from hand
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
        -: 1122:			
    #####: 1123:      if (choice1)		//+2 coins
        -: 1124:	{
    #####: 1125:	  state->coins = state->coins + 2;
        -: 1126:	}
        -: 1127:			
    #####: 1128:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1129:	{
        -: 1130:	  //discard hand
    #####: 1131:	  while(numHandCards(state) > 0)
        -: 1132:	    {
    #####: 1133:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //draw 4
    #####: 1137:	  for (i = 0; i < 4; i++)
        -: 1138:	    {
    #####: 1139:	      drawCard(currentPlayer, state);
        -: 1140:	    }
        -: 1141:				
        -: 1142:	  //other players discard hand and redraw if hand size > 4
    #####: 1143:	  for (i = 0; i < state->numPlayers; i++)
        -: 1144:	    {
    #####: 1145:	      if (i != currentPlayer)
        -: 1146:		{
    #####: 1147:		  if ( state->handCount[i] > 4 )
        -: 1148:		    {
        -: 1149:		      //discard hand
    #####: 1150:		      while( state->handCount[i] > 0 )
        -: 1151:			{
    #####: 1152:			  discardCard(handPos, i, state, 0);
        -: 1153:			}
        -: 1154:							
        -: 1155:		      //draw 4
    #####: 1156:		      for (j = 0; j < 4; j++)
        -: 1157:			{
    #####: 1158:			  drawCard(i, state);
        -: 1159:			}
        -: 1160:		    }
        -: 1161:		}
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case steward:
    #####: 1168:      if (choice1 == 1)
        -: 1169:	{
        -: 1170:	  //+2 cards
    #####: 1171:	  drawCard(currentPlayer, state);
    #####: 1172:	  drawCard(currentPlayer, state);
        -: 1173:	}
    #####: 1174:      else if (choice1 == 2)
        -: 1175:	{
        -: 1176:	  //+2 coins
    #####: 1177:	  state->coins = state->coins + 2;
        -: 1178:	}
        -: 1179:      else
        -: 1180:	{
        -: 1181:	  //trash 2 cards in hand
    #####: 1182:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1183:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:			
        -: 1186:      //discard card from hand
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case tribute:
    #####: 1191:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1192:	if (state->deckCount[nextPlayer] > 0){
    #####: 1193:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1194:	  state->deckCount[nextPlayer]--;
        -: 1195:	}
    #####: 1196:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1197:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1198:	  state->discardCount[nextPlayer]--;
        -: 1199:	}
        -: 1200:	else{
        -: 1201:	  //No Card to Reveal
        -: 1202:	  if (DEBUG){
        -: 1203:	    printf("No cards to reveal\n");
        -: 1204:	  }
        -: 1205:	}
        -: 1206:      }
        -: 1207:	    
        -: 1208:      else{
    #####: 1209:	if (state->deckCount[nextPlayer] == 0){
    #####: 1210:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1211:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1212:	    state->deckCount[nextPlayer]++;
    #####: 1213:	    state->discard[nextPlayer][i] = -1;
    #####: 1214:	    state->discardCount[nextPlayer]--;
        -: 1215:	  }
        -: 1216:			    
    #####: 1217:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1218:	} 
    #####: 1219:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1220:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1221:	state->deckCount[nextPlayer]--;
    #####: 1222:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1223:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1224:	state->deckCount[nextPlayer]--;
        -: 1225:      }    
        -: 1226:		       
    #####: 1227:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1228:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1229:	state->playedCardCount++;
    #####: 1230:	tributeRevealedCards[1] = -1;
        -: 1231:      }
        -: 1232:
    #####: 1233:      for (i = 0; i <= 2; i ++){
    #####: 1234:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1235:	  state->coins += 2;
        -: 1236:	}
        -: 1237:		    
    #####: 1238:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1239:	  drawCard(currentPlayer, state);
    #####: 1240:	  drawCard(currentPlayer, state);
        -: 1241:	}
        -: 1242:	else{//Action Card
    #####: 1243:	  state->numActions = state->numActions + 2;
        -: 1244:	}
        -: 1245:      }
        -: 1246:	    
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case ambassador:
    #####: 1250:      j = 0;		//used to check if player has enough cards to discard
        -: 1251:
    #####: 1252:      if (choice2 > 2 || choice2 < 0)
        -: 1253:	{
    #####: 1254:	  return -1;				
        -: 1255:	}
        -: 1256:
    #####: 1257:      if (choice1 == handPos)
        -: 1258:	{
    #####: 1259:	  return -1;
        -: 1260:	}
        -: 1261:
    #####: 1262:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1263:	{
    #####: 1264:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1265:	    {
    #####: 1266:	      j++;
        -: 1267:	    }
        -: 1268:	}
    #####: 1269:      if (j < choice2)
        -: 1270:	{
    #####: 1271:	  return -1;				
        -: 1272:	}
        -: 1273:
        -: 1274:      if (DEBUG) 
        -: 1275:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1276:
        -: 1277:      //increase supply count for choosen card by amount being discarded
    #####: 1278:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1279:			
        -: 1280:      //each other player gains a copy of revealed card
    #####: 1281:      for (i = 0; i < state->numPlayers; i++)
        -: 1282:	{
    #####: 1283:	  if (i != currentPlayer)
        -: 1284:	    {
    #####: 1285:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1286:	    }
        -: 1287:	}
        -: 1288:
        -: 1289:      //discard played card from hand
    #####: 1290:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1291:
        -: 1292:      //trash copies of cards returned to supply
    #####: 1293:      for (j = 0; j < choice2; j++)
        -: 1294:	{
    #####: 1295:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1296:	    {
    #####: 1297:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1298:		{
    #####: 1299:		  discardCard(i, currentPlayer, state, 1);
    #####: 1300:		  break;
        -: 1301:		}
        -: 1302:	    }
        -: 1303:	}			
        -: 1304:
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case cutpurse:
        -: 1308:
    #####: 1309:      updateCoins(currentPlayer, state, 2);
    #####: 1310:      for (i = 0; i < state->numPlayers; i++)
        -: 1311:	{
    #####: 1312:	  if (i != currentPlayer)
        -: 1313:	    {
    #####: 1314:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1315:		{
    #####: 1316:		  if (state->hand[i][j] == copper)
        -: 1317:		    {
    #####: 1318:		      discardCard(j, i, state, 0);
    #####: 1319:		      break;
        -: 1320:		    }
    #####: 1321:		  if (j == state->handCount[i])
        -: 1322:		    {
    #####: 1323:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1324:			{
        -: 1325:			  if (DEBUG)
        -: 1326:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1327:			}	
    #####: 1328:		      break;
        -: 1329:		    }		
        -: 1330:		}
        -: 1331:					
        -: 1332:	    }
        -: 1333:				
        -: 1334:	}				
        -: 1335:
        -: 1336:      //discard played card from hand
    #####: 1337:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1338:
    #####: 1339:      return 0;
        -: 1340:
        -: 1341:		
        -: 1342:    case embargo: 
        -: 1343:      //+2 Coins
    #####: 1344:      state->coins = state->coins + 2;
        -: 1345:			
        -: 1346:      //see if selected pile is in play
    #####: 1347:      if ( state->supplyCount[choice1] == -1 )
        -: 1348:	{
    #####: 1349:	  return -1;
        -: 1350:	}
        -: 1351:			
        -: 1352:      //add embargo token to selected supply pile
    #####: 1353:      state->embargoTokens[choice1]++;
        -: 1354:			
        -: 1355:      //trash card
    #####: 1356:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1357:      return 0;
        -: 1358:		
        -: 1359:    case outpost:
        -: 1360:      //set outpost flag
    #####: 1361:      state->outpostPlayed++;
        -: 1362:			
        -: 1363:      //discard card
    #####: 1364:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:      return 0;
        -: 1366:		
        -: 1367:    case salvager:
        -: 1368:      //+1 buy
    #####: 1369:      state->numBuys++;
        -: 1370:			
    #####: 1371:      if (choice1)
        -: 1372:	{
        -: 1373:	  //gain coins equal to trashed card
    #####: 1374:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1375:	  //trash card
    #####: 1376:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1377:	}
        -: 1378:			
        -: 1379:      //discard card
    #####: 1380:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1381:      return 0;
        -: 1382:		
        -: 1383:    case sea_hag:
    #####: 1384:      for (i = 0; i < state->numPlayers; i++){
    #####: 1385:	if (i != currentPlayer){
    #####: 1386:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1387:	  state->discardCount[i]++;
    #####: 1388:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1389:	}
        -: 1390:      }
    #####: 1391:      return 0;
        -: 1392:		
        -: 1393:    case treasure_map:
        -: 1394:      //search hand for another treasure_map
    #####: 1395:      index = -1;
    #####: 1396:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1397:	{
    #####: 1398:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1399:	    {
    #####: 1400:	      index = i;
    #####: 1401:	      break;
        -: 1402:	    }
        -: 1403:	}
    #####: 1404:      if (index > -1)
        -: 1405:	{
        -: 1406:	  //trash both treasure cards
    #####: 1407:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1408:	  discardCard(index, currentPlayer, state, 1);
        -: 1409:
        -: 1410:	  //gain 4 Gold cards
    #####: 1411:	  for (i = 0; i < 4; i++)
        -: 1412:	    {
    #####: 1413:	      gainCard(gold, state, 1, currentPlayer);
        -: 1414:	    }
        -: 1415:				
        -: 1416:	  //return success
    #####: 1417:	  return 1;
        -: 1418:	}
        -: 1419:			
        -: 1420:      //no second treasure_map found in hand
    #####: 1421:      return -1;
        -: 1422:    }
        -: 1423:	
    #####: 1424:  return -1;
        -: 1425:}
        -: 1426:
        -: 1427:/********** END of cardEffct **********/
        -: 1428:
    #####: 1429:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1430:{
        -: 1431:	
        -: 1432:  //if card is not trashed, added to Played pile 
    #####: 1433:  if (trashFlag < 1)
        -: 1434:    {
        -: 1435:      //add card to played pile
    #####: 1436:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1437:      state->playedCardCount++;
        -: 1438:    }
        -: 1439:	
        -: 1440:  //set played card to -1
    #####: 1441:  state->hand[currentPlayer][handPos] = -1;
        -: 1442:	
        -: 1443:  //remove card from player's hand
    #####: 1444:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1445:    {
        -: 1446:      //reduce number of cards in hand
    #####: 1447:      state->handCount[currentPlayer]--;
        -: 1448:    }
    #####: 1449:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1450:    {
        -: 1451:      //reduce number of cards in hand
    #####: 1452:      state->handCount[currentPlayer]--;
        -: 1453:    }
        -: 1454:  else 	
        -: 1455:    {
        -: 1456:      //replace discarded card with last card in hand
    #####: 1457:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1458:      //set last card to -1
    #####: 1459:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1460:      //reduce number of cards in hand
    #####: 1461:      state->handCount[currentPlayer]--;
        -: 1462:    }
        -: 1463:	
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
    #####: 1467:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1468:{
        -: 1469:  //Note: supplyPos is enum of choosen card
        -: 1470:	
        -: 1471:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1472:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1473:    {
    #####: 1474:      return -1;
        -: 1475:    }
        -: 1476:	
        -: 1477:  //added card for [whoseTurn] current player:
        -: 1478:  // toFlag = 0 : add to discard
        -: 1479:  // toFlag = 1 : add to deck
        -: 1480:  // toFlag = 2 : add to hand
        -: 1481:
    #####: 1482:  if (toFlag == 1)
        -: 1483:    {
    #####: 1484:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1485:      state->deckCount[player]++;
        -: 1486:    }
    #####: 1487:  else if (toFlag == 2)
        -: 1488:    {
    #####: 1489:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1490:      state->handCount[player]++;
        -: 1491:    }
        -: 1492:  else
        -: 1493:    {
    #####: 1494:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1495:      state->discardCount[player]++;
        -: 1496:    }
        -: 1497:	
        -: 1498:  //decrease number in supply pile
    #####: 1499:  state->supplyCount[supplyPos]--;
        -: 1500:	 
    #####: 1501:  return 0;
        -: 1502:}
        -: 1503:
        -: 1504:/***** Use this function for Unit test 2 *****/
       90: 1505:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1506:{
        -: 1507:  int i;
        -: 1508:	
        -: 1509:  //reset coin count
       90: 1510:  state->coins = 0;
        -: 1511:
        -: 1512:  //add coins for each Treasure card in player's hand
      540: 1513:  for (i = 0; i < state->handCount[player]; i++)
        -: 1514:    {
      450: 1515:      if (state->hand[player][i] == copper)
        -: 1516:	{
      360: 1517:	  state->coins += 1;
        -: 1518:	}
       90: 1519:      else if (state->hand[player][i] == silver)
        -: 1520:	{
    #####: 1521:	  state->coins += 2;
        -: 1522:	}
       90: 1523:      else if (state->hand[player][i] == gold)
        -: 1524:	{
    #####: 1525:	  state->coins += 3;
        -: 1526:	}	
        -: 1527:    }	
        -: 1528:
        -: 1529:  //add bonus
       90: 1530:  state->coins += bonus;
        -: 1531:
       90: 1532:  return 0;
        -: 1533:}
        -: 1534:
        -: 1535:
        -: 1536://end of dominion.c
        -: 1537:
TESTING initializeGame():
Test: #1, Testing with '0'	Passed
Test: #2, Testing with '1'	Passed
Test: #3, Testing with '2'	Passed
Test: #4, Testing with '3'	Passed
Test: #5, Testing with '4'	Passed
Test: #6, Testing with '5'	Passed
Test: #7, Testing with '6'	Passed
Test: #8, Testing with '7'	Passed
Test: #9, Testing with '8'	Passed
Test: #10, Testing with '9'	Passed
Test: #11, Testing with '10'	Passed
Test: #12, Testing with '11'	Passed
Test: #13, Testing with '12'	Passed
Test: #14, Testing with '13'	Passed
Test: #15, Testing with '14'	Passed
Test: #16, Testing with '15'	Passed
Test: #17, Testing with '16'	Passed
Test: #18, Testing with '17'	Passed
Test: #19, Testing with '18'	Passed
Test: #20, Testing with '19'	Passed
Test: #21, Testing with '20'	Passed
Test: #22, Testing with '21'	Passed
Test: #23, Testing with '22'	Passed
Test: #24, Testing with '23'	Passed
Test: #25, Testing with '24'	Passed
Test: #26, Testing with '25'	Passed
Test: #27, Testing with '26'	Passed
Test: #28, Testing with '27'	Passed
Test: #29, Testing with '28'	Passed
Test: #30, Testing with '29'	Passed
Test: #31, Testing with '30'	Passed
Test: #32, Testing with '31'	Passed
Test: #33, Testing with '32'	Passed
Test: #34, Testing with '33'	Passed
Test: #35, Testing with '34'	Passed
Test: #36, Testing with '35'	Passed
Test: #37, Testing with '36'	Passed
Test: #38, Testing with '37'	Passed
Test: #39, Testing with '38'	Passed
Test: #40, Testing with '39'	Passed
Test: #41, Testing with '40'	Passed
Test: #42, Testing with '41'	Passed
Test: #43, Testing with '42'	Passed
Test: #44, Testing with '43'	Passed
Test: #45, Testing with '44'	Passed
Test: #46, Testing with '45'	Passed
Test: #47, Testing with '46'	Passed
Test: #48, Testing with '47'	Passed
Test: #49, Testing with '48'	Passed
Test: #50, Testing with '49'	Passed
Test: #51, Testing with '50'	Passed
Test: #52, Testing with '51'	Passed
Test: #53, Testing with '52'	Passed
Test: #54, Testing with '53'	Passed
Test: #55, Testing with '54'	Passed
Test: #56, Testing with '55'	Passed
Test: #57, Testing with '56'	Passed
Test: #58, Testing with '57'	Passed
Test: #59, Testing with '58'	Passed
Test: #60, Testing with '59'	Passed
Test: #61, Testing with '60'	Passed
Test: #62, Testing with '61'	Passed
Test: #63, Testing with '62'	Passed
Test: #64, Testing with '63'	Passed
Test: #65, Testing with '64'	Passed
Test: #66, Testing with '65'	Passed
Test: #67, Testing with '66'	Passed
Test: #68, Testing with '67'	Passed
Test: #69, Testing with '68'	Passed
Test: #70, Testing with '69'	Passed
Test: #71, Testing with '70'	Passed
Test: #72, Testing with '71'	Passed
Test: #73, Testing with '72'	Passed
Test: #74, Testing with '73'	Passed
Test: #75, Testing with '74'	Passed
Test: #76, Testing with '75'	Passed
Test: #77, Testing with '76'	Passed
Test: #78, Testing with '77'	Passed
Test: #79, Testing with '78'	Passed
Test: #80, Testing with '79'	Passed
Test: #81, Testing with '80'	Passed
Test: #82, Testing with '81'	Passed
Test: #83, Testing with '82'	Passed
Test: #84, Testing with '83'	Passed
Test: #85, Testing with '84'	Passed
Test: #86, Testing with '85'	Passed
Test: #87, Testing with '86'	Passed
Test: #88, Testing with '87'	Passed
Test: #89, Testing with '88'	Passed
Test: #90, Testing with '89'	Passed
Test: #91, Testing with '90'	Passed
Test: #92, Testing with '91'	Passed
Test: #93, Testing with '92'	Passed
Test: #94, Testing with '93'	Passed
Test: #95, Testing with '94'	Passed
Test: #96, Testing with '95'	Passed
Test: #97, Testing with '96'	Passed
Test: #98, Testing with '97'	Passed
Test: #99, Testing with '98'	Passed
Test: #100, Testing with '99'	Passed
Test: #101, Testing with '100'	Passed
Test: #102, Testing with '101'	Passed
Test: #103, Testing with '102'	Passed
Test: #104, Testing with '103'	Passed
Test: #105, Testing with '104'	Passed
Test: #106, Testing with '105'	Passed
Test: #107, Testing with '106'	Passed
Test: #108, Testing with '107'	Passed
Test: #109, Testing with '108'	Passed
Test: #110, Testing with '109'	Passed
Test: #111, Testing with '110'	Passed
Test: #112, Testing with '111'	Passed
Test: #113, Testing with '112'	Passed
Test: #114, Testing with '113'	Passed
Test: #115, Testing with '114'	Passed
Test: #116, Testing with '115'	Passed
Test: #117, Testing with '116'	Passed
Test: #118, Testing with '117'	Passed
Test: #119, Testing with '118'	Passed
Test: #120, Testing with '119'	Passed
Test: #121, Testing with '120'	Passed
Test: #122, Testing with '121'	Passed
Test: #123, Testing with '122'	Passed
Test: #124, Testing with '123'	Passed
Test: #125, Testing with '124'	Passed
Test: #126, Testing with '125'	Passed
Test: #127, Testing with '126'	Passed
Test: #128, Testing with '127'	Passed
Test: #129, Testing with '128'	Passed
Test: #130, Testing with '129'	Passed
Test: #131, Testing with '130'	Passed
Test: #132, Testing with '131'	Passed
Test: #133, Testing with '132'	Passed
Test: #134, Testing with '133'	Passed
Test: #135, Testing with '134'	Passed
Test: #136, Testing with '135'	Passed
Test: #137, Testing with '136'	Passed
Test: #138, Testing with '137'	Passed
Test: #139, Testing with '138'	Passed
Test: #140, Testing with '139'	Passed
Test: #141, Testing with '140'	Passed
Test: #142, Testing with '141'	Passed
Test: #143, Testing with '142'	Passed
Test: #144, Testing with '143'	Passed
Test: #145, Testing with '144'	Passed
Test: #146, Testing with '145'	Passed
Test: #147, Testing with '146'	Passed
Test: #148, Testing with '147'	Passed
Test: #149, Testing with '148'	Passed
Test: #150, Testing with '149'	Passed
Test: #151, Testing with '150'	Passed
Test: #152, Testing with '151'	Passed
Test: #153, Testing with '152'	Passed
Test: #154, Testing with '153'	Passed
Test: #155, Testing with '154'	Passed
Test: #156, Testing with '155'	Passed
Test: #157, Testing with '156'	Passed
Test: #158, Testing with '157'	Passed
Test: #159, Testing with '158'	Passed
Test: #160, Testing with '159'	Passed
Test: #161, Testing with '160'	Passed
Test: #162, Testing with '161'	Passed
Test: #163, Testing with '162'	Passed
Test: #164, Testing with '163'	Passed
Test: #165, Testing with '164'	Passed
Test: #166, Testing with '165'	Passed
Test: #167, Testing with '166'	Passed
Test: #168, Testing with '167'	Passed
Test: #169, Testing with '168'	Passed
Test: #170, Testing with '169'	Passed
Test: #171, Testing with '170'	Passed
Test: #172, Testing with '171'	Passed
Test: #173, Testing with '172'	Passed
Test: #174, Testing with '173'	Passed
Test: #175, Testing with '174'	Passed
Test: #176, Testing with '175'	Passed
Test: #177, Testing with '176'	Passed
Test: #178, Testing with '177'	Passed
Test: #179, Testing with '178'	Passed
Test: #180, Testing with '179'	Passed
Test: #181, Testing with '180'	Passed
Test: #182, Testing with '181'	Passed
Test: #183, Testing with '182'	Passed
Test: #184, Testing with '183'	Passed
Test: #185, Testing with '184'	Passed
Test: #186, Testing with '185'	Passed
Test: #187, Testing with '186'	Passed
Test: #188, Testing with '187'	Passed
Test: #189, Testing with '188'	Passed
Test: #190, Testing with '189'	Passed
Test: #191, Testing with '190'	Passed
Test: #192, Testing with '191'	Passed
Test: #193, Testing with '192'	Passed
Test: #194, Testing with '193'	Passed
Test: #195, Testing with '194'	Passed
Test: #196, Testing with '195'	Passed
Test: #197, Testing with '196'	Passed
Test: #198, Testing with '197'	Passed
Test: #199, Testing with '198'	Passed
Test: #200, Testing with '199'	Passed
Test: #201, Testing with '200'	Passed
Test: #202, Testing with '201'	Passed
Test: #203, Testing with '202'	Passed
Test: #204, Testing with '203'	Passed
Test: #205, Testing with '204'	Passed
Test: #206, Testing with '205'	Passed
Test: #207, Testing with '206'	Passed
Test: #208, Testing with '207'	Passed
Test: #209, Testing with '208'	Passed
Test: #210, Testing with '209'	Passed
Test: #211, Testing with '210'	Passed
Test: #212, Testing with '211'	Passed
Test: #213, Testing with '212'	Passed
Test: #214, Testing with '213'	Passed
Test: #215, Testing with '214'	Passed
Test: #216, Testing with '215'	Passed
Test: #217, Testing with '216'	Passed
Test: #218, Testing with '217'	Passed
Test: #219, Testing with '218'	Passed
Test: #220, Testing with '219'	Passed
Test: #221, Testing with '220'	Passed
Test: #222, Testing with '221'	Passed
Test: #223, Testing with '222'	Passed
Test: #224, Testing with '223'	Passed
Test: #225, Testing with '224'	Passed
Test: #226, Testing with '225'	Passed
Test: #227, Testing with '226'	Passed
Test: #228, Testing with '227'	Passed
Test: #229, Testing with '228'	Passed
Test: #230, Testing with '229'	Passed
Test: #231, Testing with '230'	Passed
Test: #232, Testing with '231'	Passed
Test: #233, Testing with '232'	Passed
Test: #234, Testing with '233'	Passed
Test: #235, Testing with '234'	Passed
Test: #236, Testing with '235'	Passed
Test: #237, Testing with '236'	Passed
Test: #238, Testing with '237'	Passed
Test: #239, Testing with '238'	Passed
Test: #240, Testing with '239'	Passed
Test: #241, Testing with '240'	Passed
Test: #242, Testing with '241'	Passed
Test: #243, Testing with '242'	Passed
Test: #244, Testing with '243'	Passed
Test: #245, Testing with '244'	Passed
Test: #246, Testing with '245'	Passed
Test: #247, Testing with '246'	Passed
Test: #248, Testing with '247'	Passed
Test: #249, Testing with '248'	Passed
Test: #250, Testing with '249'	Passed
Test: #251, Testing with '250'	Passed
Test: #252, Testing with '251'	Passed
Test: #253, Testing with '252'	Passed
Test: #254, Testing with '253'	Passed
Test: #255, Testing with '254'	Passed
Test: #256, Testing with '255'	Passed
Test: #257, Testing with '256'	Passed
Test: #258, Testing with '257'	Passed
Test: #259, Testing with '258'	Passed
Test: #260, Testing with '259'	Passed
Test: #261, Testing with '260'	Passed
Test: #262, Testing with '261'	Passed
Test: #263, Testing with '262'	Passed
Test: #264, Testing with '263'	Passed
Test: #265, Testing with '264'	Passed
Test: #266, Testing with '265'	Passed
Test: #267, Testing with '266'	Passed
Test: #268, Testing with '267'	Passed
Test: #269, Testing with '268'	Passed
Test: #270, Testing with '269'	Passed
Test: #271, Testing with '270'	Passed
Test: #272, Testing with '271'	Passed
Test: #273, Testing with '272'	Passed
Test: #274, Testing with '273'	Passed
Test: #275, Testing with '274'	Passed
Test: #276, Testing with '275'	Passed
Test: #277, Testing with '276'	Passed
Test: #278, Testing with '277'	Passed
Test: #279, Testing with '278'	Passed
Test: #280, Testing with '279'	Passed
Test: #281, Testing with '280'	Passed
Test: #282, Testing with '281'	Passed
Test: #283, Testing with '282'	Passed
Test: #284, Testing with '283'	Passed
Test: #285, Testing with '284'	Passed
Test: #286, Testing with '285'	Passed
Test: #287, Testing with '286'	Passed
Test: #288, Testing with '287'	Passed
Test: #289, Testing with '288'	Passed
Test: #290, Testing with '289'	Passed
Test: #291, Testing with '290'	Passed
Test: #292, Testing with '291'	Passed
Test: #293, Testing with '292'	Passed
Test: #294, Testing with '293'	Passed
Test: #295, Testing with '294'	Passed
Test: #296, Testing with '295'	Passed
Test: #297, Testing with '296'	Passed
Test: #298, Testing with '297'	Passed
Test: #299, Testing with '298'	Passed
Test: #300, Testing with '299'	Passed
Test: #301, Testing with '300'	Passed
Test: #302, Testing with '301'	Passed
Test: #303, Testing with '302'	Passed
Test: #304, Testing with '303'	Passed
Test: #305, Testing with '304'	Passed
Test: #306, Testing with '305'	Passed
Test: #307, Testing with '306'	Passed
Test: #308, Testing with '307'	Passed
Test: #309, Testing with '308'	Passed
Test: #310, Testing with '309'	Passed
Test: #311, Testing with '310'	Passed
Test: #312, Testing with '311'	Passed
Test: #313, Testing with '312'	Passed
Test: #314, Testing with '313'	Passed
Test: #315, Testing with '314'	Passed
Test: #316, Testing with '315'	Passed
Test: #317, Testing with '316'	Passed
Test: #318, Testing with '317'	Passed
Test: #319, Testing with '318'	Passed
Test: #320, Testing with '319'	Passed
Test: #321, Testing with '320'	Passed
Test: #322, Testing with '321'	Passed
Test: #323, Testing with '322'	Passed
Test: #324, Testing with '323'	Passed
Test: #325, Testing with '324'	Passed
Test: #326, Testing with '325'	Passed
Test: #327, Testing with '326'	Passed
Test: #328, Testing with '327'	Passed
Test: #329, Testing with '328'	Passed
Test: #330, Testing with '329'	Passed
Test: #331, Testing with '330'	Passed
Test: #332, Testing with '331'	Passed
Test: #333, Testing with '332'	Passed
Test: #334, Testing with '333'	Passed
Test: #335, Testing with '334'	Passed
Test: #336, Testing with '335'	Passed
Test: #337, Testing with '336'	Passed
Test: #338, Testing with '337'	Passed
Test: #339, Testing with '338'	Passed
Test: #340, Testing with '339'	Passed
Test: #341, Testing with '340'	Passed
Test: #342, Testing with '341'	Passed
Test: #343, Testing with '342'	Passed
Test: #344, Testing with '343'	Passed
Test: #345, Testing with '344'	Passed
Test: #346, Testing with '345'	Passed
Test: #347, Testing with '346'	Passed
Test: #348, Testing with '347'	Passed
Test: #349, Testing with '348'	Passed
Test: #350, Testing with '349'	Passed
Test: #351, Testing with '350'	Passed
Test: #352, Testing with '351'	Passed
Test: #353, Testing with '352'	Passed
Test: #354, Testing with '353'	Passed
Test: #355, Testing with '354'	Passed
Test: #356, Testing with '355'	Passed
Test: #357, Testing with '356'	Passed
Test: #358, Testing with '357'	Passed
Test: #359, Testing with '358'	Passed
Test: #360, Testing with '359'	Passed
Test: #361, Testing with '360'	Passed
Test: #362, Testing with '361'	Passed
Test: #363, Testing with '362'	Passed
Test: #364, Testing with '363'	Passed
Test: #365, Testing with '364'	Passed
Test: #366, Testing with '365'	Passed
Test: #367, Testing with '366'	Passed
Test: #368, Testing with '367'	Passed
Test: #369, Testing with '368'	Passed
Test: #370, Testing with '369'	Passed
Test: #371, Testing with '370'	Passed
Test: #372, Testing with '371'	Passed
Test: #373, Testing with '372'	Passed
Test: #374, Testing with '373'	Passed
Test: #375, Testing with '374'	Passed
Test: #376, Testing with '375'	Passed
Test: #377, Testing with '376'	Passed
Test: #378, Testing with '377'	Passed
Test: #379, Testing with '378'	Passed
Test: #380, Testing with '379'	Passed
Test: #381, Testing with '380'	Passed
Test: #382, Testing with '381'	Passed
Test: #383, Testing with '382'	Passed
Test: #384, Testing with '383'	Passed
Test: #385, Testing with '384'	Passed
Test: #386, Testing with '385'	Passed
Test: #387, Testing with '386'	Passed
Test: #388, Testing with '387'	Passed
Test: #389, Testing with '388'	Passed
Test: #390, Testing with '389'	Passed
Test: #391, Testing with '390'	Passed
Test: #392, Testing with '391'	Passed
Test: #393, Testing with '392'	Passed
Test: #394, Testing with '393'	Passed
Test: #395, Testing with '394'	Passed
Test: #396, Testing with '395'	Passed
Test: #397, Testing with '396'	Passed
Test: #398, Testing with '397'	Passed
Test: #399, Testing with '398'	Passed
Test: #400, Testing with '399'	Passed
Test: #401, Testing with '400'	Passed
Test: #402, Testing with '401'	Passed
Test: #403, Testing with '402'	Passed
Test: #404, Testing with '403'	Passed
Test: #405, Testing with '404'	Passed
Test: #406, Testing with '405'	Passed
Test: #407, Testing with '406'	Passed
Test: #408, Testing with '407'	Passed
Test: #409, Testing with '408'	Passed
Test: #410, Testing with '409'	Passed
Test: #411, Testing with '410'	Passed
Test: #412, Testing with '411'	Passed
Test: #413, Testing with '412'	Passed
Test: #414, Testing with '413'	Passed
Test: #415, Testing with '414'	Passed
Test: #416, Testing with '415'	Passed
Test: #417, Testing with '416'	Passed
Test: #418, Testing with '417'	Passed
Test: #419, Testing with '418'	Passed
Test: #420, Testing with '419'	Passed
Test: #421, Testing with '420'	Passed
Test: #422, Testing with '421'	Passed
Test: #423, Testing with '422'	Passed
Test: #424, Testing with '423'	Passed
Test: #425, Testing with '424'	Passed
Test: #426, Testing with '425'	Passed
Test: #427, Testing with '426'	Passed
Test: #428, Testing with '427'	Passed
Test: #429, Testing with '428'	Passed
Test: #430, Testing with '429'	Passed
Test: #431, Testing with '430'	Passed
Test: #432, Testing with '431'	Passed
Test: #433, Testing with '432'	Passed
Test: #434, Testing with '433'	Passed
Test: #435, Testing with '434'	Passed
Test: #436, Testing with '435'	Passed
Test: #437, Testing with '436'	Passed
Test: #438, Testing with '437'	Passed
Test: #439, Testing with '438'	Passed
Test: #440, Testing with '439'	Passed
Test: #441, Testing with '440'	Passed
Test: #442, Testing with '441'	Passed
Test: #443, Testing with '442'	Passed
Test: #444, Testing with '443'	Passed
Test: #445, Testing with '444'	Passed
Test: #446, Testing with '445'	Passed
Test: #447, Testing with '446'	Passed
Test: #448, Testing with '447'	Passed
Test: #449, Testing with '448'	Passed
Test: #450, Testing with '449'	Passed
Test: #451, Testing with '450'	Passed
Test: #452, Testing with '451'	Passed
Test: #453, Testing with '452'	Passed
Test: #454, Testing with '453'	Passed
Test: #455, Testing with '454'	Passed
Test: #456, Testing with '455'	Passed
Test: #457, Testing with '456'	Passed
Test: #458, Testing with '457'	Passed
Test: #459, Testing with '458'	Passed
Test: #460, Testing with '459'	Passed
Test: #461, Testing with '460'	Passed
Test: #462, Testing with '461'	Passed
Test: #463, Testing with '462'	Passed
Test: #464, Testing with '463'	Passed
Test: #465, Testing with '464'	Passed
Test: #466, Testing with '465'	Passed
Test: #467, Testing with '466'	Passed
Test: #468, Testing with '467'	Passed
Test: #469, Testing with '468'	Passed
Test: #470, Testing with '469'	Passed
Test: #471, Testing with '470'	Passed
Test: #472, Testing with '471'	Passed
Test: #473, Testing with '472'	Passed
Test: #474, Testing with '473'	Passed
Test: #475, Testing with '474'	Passed
Test: #476, Testing with '475'	Passed
Test: #477, Testing with '476'	Passed
Test: #478, Testing with '477'	Passed
Test: #479, Testing with '478'	Passed
Test: #480, Testing with '479'	Passed
Test: #481, Testing with '480'	Passed
Test: #482, Testing with '481'	Passed
Test: #483, Testing with '482'	Passed
Test: #484, Testing with '483'	Passed
Test: #485, Testing with '484'	Passed
Test: #486, Testing with '485'	Passed
Test: #487, Testing with '486'	Passed
Test: #488, Testing with '487'	Passed
Test: #489, Testing with '488'	Passed
Test: #490, Testing with '489'	Passed
Test: #491, Testing with '490'	Passed
Test: #492, Testing with '491'	Passed
Test: #493, Testing with '492'	Passed
Test: #494, Testing with '493'	Passed
Test: #495, Testing with '494'	Passed
Test: #496, Testing with '495'	Passed
Test: #497, Testing with '496'	Passed
Test: #498, Testing with '497'	Passed
Test: #499, Testing with '498'	Passed
Test: #500, Testing with '499'	Passed
Test: #501, Testing with '500'	Passed
Test: #502, Testing with '501'	Passed
Test: #503, Testing with '502'	Passed
Test: #504, Testing with '503'	Passed
Test: #505, Testing with '504'	Passed
Test: #506, Testing with '505'	Passed
Test: #507, Testing with '506'	Passed
Test: #508, Testing with '507'	Passed
Test: #509, Testing with '508'	Passed
Test: #510, Testing with '509'	Passed
Test: #511, Testing with '510'	Passed
Test: #512, Testing with '511'	Passed
Test: #513, Testing with '512'	Passed
Test: #514, Testing with '513'	Passed
Test: #515, Testing with '514'	Passed
Test: #516, Testing with '515'	Passed
Test: #517, Testing with '516'	Passed
Test: #518, Testing with '517'	Passed
Test: #519, Testing with '518'	Passed
Test: #520, Testing with '519'	Passed
Test: #521, Testing with '520'	Passed
Test: #522, Testing with '521'	Passed
Test: #523, Testing with '522'	Passed
Test: #524, Testing with '523'	Passed
Test: #525, Testing with '524'	Passed
Test: #526, Testing with '525'	Passed
Test: #527, Testing with '526'	Passed
Test: #528, Testing with '527'	Passed
Test: #529, Testing with '528'	Passed
Test: #530, Testing with '529'	Passed
Test: #531, Testing with '530'	Passed
Test: #532, Testing with '531'	Passed
Test: #533, Testing with '532'	Passed
Test: #534, Testing with '533'	Passed
Test: #535, Testing with '534'	Passed
Test: #536, Testing with '535'	Passed
Test: #537, Testing with '536'	Passed
Test: #538, Testing with '537'	Passed
Test: #539, Testing with '538'	Passed
Test: #540, Testing with '539'	Passed
Test: #541, Testing with '540'	Passed
Test: #542, Testing with '541'	Passed
Test: #543, Testing with '542'	Passed
Test: #544, Testing with '543'	Passed
Test: #545, Testing with '544'	Passed
Test: #546, Testing with '545'	Passed
Test: #547, Testing with '546'	Passed
Test: #548, Testing with '547'	Passed
Test: #549, Testing with '548'	Passed
Test: #550, Testing with '549'	Passed
Test: #551, Testing with '550'	Passed
Test: #552, Testing with '551'	Passed
Test: #553, Testing with '552'	Passed
Test: #554, Testing with '553'	Passed
Test: #555, Testing with '554'	Passed
Test: #556, Testing with '555'	Passed
Test: #557, Testing with '556'	Passed
Test: #558, Testing with '557'	Passed
Test: #559, Testing with '558'	Passed
Test: #560, Testing with '559'	Passed
Test: #561, Testing with '560'	Passed
Test: #562, Testing with '561'	Passed
Test: #563, Testing with '562'	Passed
Test: #564, Testing with '563'	Passed
Test: #565, Testing with '564'	Passed
Test: #566, Testing with '565'	Passed
Test: #567, Testing with '566'	Passed
Test: #568, Testing with '567'	Passed
Test: #569, Testing with '568'	Passed
Test: #570, Testing with '569'	Passed
Test: #571, Testing with '570'	Passed
Test: #572, Testing with '571'	Passed
Test: #573, Testing with '572'	Passed
Test: #574, Testing with '573'	Passed
Test: #575, Testing with '574'	Passed
Test: #576, Testing with '575'	Passed
Test: #577, Testing with '576'	Passed
Test: #578, Testing with '577'	Passed
Test: #579, Testing with '578'	Passed
Test: #580, Testing with '579'	Passed
Test: #581, Testing with '580'	Passed
Test: #582, Testing with '581'	Passed
Test: #583, Testing with '582'	Passed
Test: #584, Testing with '583'	Passed
Test: #585, Testing with '584'	Passed
Test: #586, Testing with '585'	Passed
Test: #587, Testing with '586'	Passed
Test: #588, Testing with '587'	Passed
Test: #589, Testing with '588'	Passed
Test: #590, Testing with '589'	Passed
Test: #591, Testing with '590'	Passed
Test: #592, Testing with '591'	Passed
Test: #593, Testing with '592'	Passed
Test: #594, Testing with '593'	Passed
Test: #595, Testing with '594'	Passed
Test: #596, Testing with '595'	Passed
Test: #597, Testing with '596'	Passed
Test: #598, Testing with '597'	Passed
Test: #599, Testing with '598'	Passed
Test: #600, Testing with '599'	Passed
Test: #601, Testing with '600'	Passed
Test: #602, Testing with '601'	Passed
Test: #603, Testing with '602'	Passed
Test: #604, Testing with '603'	Passed
Test: #605, Testing with '604'	Passed
Test: #606, Testing with '605'	Passed
Test: #607, Testing with '606'	Passed
Test: #608, Testing with '607'	Passed
Test: #609, Testing with '608'	Passed
Test: #610, Testing with '609'	Passed
Test: #611, Testing with '610'	Passed
Test: #612, Testing with '611'	Passed
Test: #613, Testing with '612'	Passed
Test: #614, Testing with '613'	Passed
Test: #615, Testing with '614'	Passed
Test: #616, Testing with '615'	Passed
Test: #617, Testing with '616'	Passed
Test: #618, Testing with '617'	Passed
Test: #619, Testing with '618'	Passed
Test: #620, Testing with '619'	Passed
Test: #621, Testing with '620'	Passed
Test: #622, Testing with '621'	Passed
Test: #623, Testing with '622'	Passed
Test: #624, Testing with '623'	Passed
Test: #625, Testing with '624'	Passed
Test: #626, Testing with '625'	Passed
Test: #627, Testing with '626'	Passed
Test: #628, Testing with '627'	Passed
Test: #629, Testing with '628'	Passed
Test: #630, Testing with '629'	Passed
Test: #631, Testing with '630'	Passed
Test: #632, Testing with '631'	Passed
Test: #633, Testing with '632'	Passed
Test: #634, Testing with '633'	Passed
Test: #635, Testing with '634'	Passed
Test: #636, Testing with '635'	Passed
Test: #637, Testing with '636'	Passed
Test: #638, Testing with '637'	Passed
Test: #639, Testing with '638'	Passed
Test: #640, Testing with '639'	Passed
Test: #641, Testing with '640'	Passed
Test: #642, Testing with '641'	Passed
Test: #643, Testing with '642'	Passed
Test: #644, Testing with '643'	Passed
Test: #645, Testing with '644'	Passed
Test: #646, Testing with '645'	Passed
Test: #647, Testing with '646'	Passed
Test: #648, Testing with '647'	Passed
Test: #649, Testing with '648'	Passed
Test: #650, Testing with '649'	Passed
Test: #651, Testing with '650'	Passed
Test: #652, Testing with '651'	Passed
Test: #653, Testing with '652'	Passed
Test: #654, Testing with '653'	Passed
Test: #655, Testing with '654'	Passed
Test: #656, Testing with '655'	Passed
Test: #657, Testing with '656'	Passed
Test: #658, Testing with '657'	Passed
Test: #659, Testing with '658'	Passed
Test: #660, Testing with '659'	Passed
Test: #661, Testing with '660'	Passed
Test: #662, Testing with '661'	Passed
Test: #663, Testing with '662'	Passed
Test: #664, Testing with '663'	Passed
Test: #665, Testing with '664'	Passed
Test: #666, Testing with '665'	Passed
Test: #667, Testing with '666'	Passed
Test: #668, Testing with '667'	Passed
Test: #669, Testing with '668'	Passed
Test: #670, Testing with '669'	Passed
Test: #671, Testing with '670'	Passed
Test: #672, Testing with '671'	Passed
Test: #673, Testing with '672'	Passed
Test: #674, Testing with '673'	Passed
Test: #675, Testing with '674'	Passed
Test: #676, Testing with '675'	Passed
Test: #677, Testing with '676'	Passed
Test: #678, Testing with '677'	Passed
Test: #679, Testing with '678'	Passed
Test: #680, Testing with '679'	Passed
Test: #681, Testing with '680'	Passed
Test: #682, Testing with '681'	Passed
Test: #683, Testing with '682'	Passed
Test: #684, Testing with '683'	Passed
Test: #685, Testing with '684'	Passed
Test: #686, Testing with '685'	Passed
Test: #687, Testing with '686'	Passed
Test: #688, Testing with '687'	Passed
Test: #689, Testing with '688'	Passed
Test: #690, Testing with '689'	Passed
Test: #691, Testing with '690'	Passed
Test: #692, Testing with '691'	Passed
Test: #693, Testing with '692'	Passed
Test: #694, Testing with '693'	Passed
Test: #695, Testing with '694'	Passed
Test: #696, Testing with '695'	Passed
Test: #697, Testing with '696'	Passed
Test: #698, Testing with '697'	Passed
Test: #699, Testing with '698'	Passed
Test: #700, Testing with '699'	Passed
Test: #701, Testing with '700'	Passed
Test: #702, Testing with '701'	Passed
Test: #703, Testing with '702'	Passed
Test: #704, Testing with '703'	Passed
Test: #705, Testing with '704'	Passed
Test: #706, Testing with '705'	Passed
Test: #707, Testing with '706'	Passed
Test: #708, Testing with '707'	Passed
Test: #709, Testing with '708'	Passed
Test: #710, Testing with '709'	Passed
Test: #711, Testing with '710'	Passed
Test: #712, Testing with '711'	Passed
Test: #713, Testing with '712'	Passed
Test: #714, Testing with '713'	Passed
Test: #715, Testing with '714'	Passed
Test: #716, Testing with '715'	Passed
Test: #717, Testing with '716'	Passed
Test: #718, Testing with '717'	Passed
Test: #719, Testing with '718'	Passed
Test: #720, Testing with '719'	Passed
Test: #721, Testing with '720'	Passed
Test: #722, Testing with '721'	Passed
Test: #723, Testing with '722'	Passed
Test: #724, Testing with '723'	Passed
Test: #725, Testing with '724'	Passed
Test: #726, Testing with '725'	Passed
Test: #727, Testing with '726'	Passed
Test: #728, Testing with '727'	Passed
Test: #729, Testing with '728'	Passed
Test: #730, Testing with '729'	Passed
Test: #731, Testing with '730'	Passed
Test: #732, Testing with '731'	Passed
Test: #733, Testing with '732'	Passed
Test: #734, Testing with '733'	Passed
Test: #735, Testing with '734'	Passed
Test: #736, Testing with '735'	Passed
Test: #737, Testing with '736'	Passed
Test: #738, Testing with '737'	Passed
Test: #739, Testing with '738'	Passed
Test: #740, Testing with '739'	Passed
Test: #741, Testing with '740'	Passed
Test: #742, Testing with '741'	Passed
Test: #743, Testing with '742'	Passed
Test: #744, Testing with '743'	Passed
Test: #745, Testing with '744'	Passed
Test: #746, Testing with '745'	Passed
Test: #747, Testing with '746'	Passed
Test: #748, Testing with '747'	Passed
Test: #749, Testing with '748'	Passed
Test: #750, Testing with '749'	Passed
Test: #751, Testing with '750'	Passed
Test: #752, Testing with '751'	Passed
Test: #753, Testing with '752'	Passed
Test: #754, Testing with '753'	Passed
Test: #755, Testing with '754'	Passed
Test: #756, Testing with '755'	Passed
Test: #757, Testing with '756'	Passed
Test: #758, Testing with '757'	Passed
Test: #759, Testing with '758'	Passed
Test: #760, Testing with '759'	Passed
Test: #761, Testing with '760'	Passed
Test: #762, Testing with '761'	Passed
Test: #763, Testing with '762'	Passed
Test: #764, Testing with '763'	Passed
Test: #765, Testing with '764'	Passed
Test: #766, Testing with '765'	Passed
Test: #767, Testing with '766'	Passed
Test: #768, Testing with '767'	Passed
Test: #769, Testing with '768'	Passed
Test: #770, Testing with '769'	Passed
Test: #771, Testing with '770'	Passed
Test: #772, Testing with '771'	Passed
Test: #773, Testing with '772'	Passed
Test: #774, Testing with '773'	Passed
Test: #775, Testing with '774'	Passed
Test: #776, Testing with '775'	Passed
Test: #777, Testing with '776'	Passed
Test: #778, Testing with '777'	Passed
Test: #779, Testing with '778'	Passed
Test: #780, Testing with '779'	Passed
Test: #781, Testing with '780'	Passed
Test: #782, Testing with '781'	Passed
Test: #783, Testing with '782'	Passed
Test: #784, Testing with '783'	Passed
Test: #785, Testing with '784'	Passed
Test: #786, Testing with '785'	Passed
Test: #787, Testing with '786'	Passed
Test: #788, Testing with '787'	Passed
Test: #789, Testing with '788'	Passed
Test: #790, Testing with '789'	Passed
Test: #791, Testing with '790'	Passed
Test: #792, Testing with '791'	Passed
Test: #793, Testing with '792'	Passed
Test: #794, Testing with '793'	Passed
Test: #795, Testing with '794'	Passed
Test: #796, Testing with '795'	Passed
Test: #797, Testing with '796'	Passed
Test: #798, Testing with '797'	Passed
Test: #799, Testing with '798'	Passed
Test: #800, Testing with '799'	Passed
Test: #801, Testing with '800'	Passed
Test: #802, Testing with '801'	Passed
Test: #803, Testing with '802'	Passed
Test: #804, Testing with '803'	Passed
Test: #805, Testing with '804'	Passed
Test: #806, Testing with '805'	Passed
Test: #807, Testing with '806'	Passed
Test: #808, Testing with '807'	Passed
Test: #809, Testing with '808'	Passed
Test: #810, Testing with '809'	Passed
Test: #811, Testing with '810'	Passed
Test: #812, Testing with '811'	Passed
Test: #813, Testing with '812'	Passed
Test: #814, Testing with '813'	Passed
Test: #815, Testing with '814'	Passed
Test: #816, Testing with '815'	Passed
Test: #817, Testing with '816'	Passed
Test: #818, Testing with '817'	Passed
Test: #819, Testing with '818'	Passed
Test: #820, Testing with '819'	Passed
Test: #821, Testing with '820'	Passed
Test: #822, Testing with '821'	Passed
Test: #823, Testing with '822'	Passed
Test: #824, Testing with '823'	Passed
Test: #825, Testing with '824'	Passed
Test: #826, Testing with '825'	Passed
Test: #827, Testing with '826'	Passed
Test: #828, Testing with '827'	Passed
Test: #829, Testing with '828'	Passed
Test: #830, Testing with '829'	Passed
Test: #831, Testing with '830'	Passed
Test: #832, Testing with '831'	Passed
Test: #833, Testing with '832'	Passed
Test: #834, Testing with '833'	Passed
Test: #835, Testing with '834'	Passed
Test: #836, Testing with '835'	Passed
Test: #837, Testing with '836'	Passed
Test: #838, Testing with '837'	Passed
Test: #839, Testing with '838'	Passed
Test: #840, Testing with '839'	Passed
Test: #841, Testing with '840'	Passed
Test: #842, Testing with '841'	Passed
Test: #843, Testing with '842'	Passed
Test: #844, Testing with '843'	Passed
Test: #845, Testing with '844'	Passed
Test: #846, Testing with '845'	Passed
Test: #847, Testing with '846'	Passed
Test: #848, Testing with '847'	Passed
Test: #849, Testing with '848'	Passed
Test: #850, Testing with '849'	Passed
Test: #851, Testing with '850'	Passed
Test: #852, Testing with '851'	Passed
Test: #853, Testing with '852'	Passed
Test: #854, Testing with '853'	Passed
Test: #855, Testing with '854'	Passed
Test: #856, Testing with '855'	Passed
Test: #857, Testing with '856'	Passed
Test: #858, Testing with '857'	Passed
Test: #859, Testing with '858'	Passed
Test: #860, Testing with '859'	Passed
Test: #861, Testing with '860'	Passed
Test: #862, Testing with '861'	Passed
Test: #863, Testing with '862'	Passed
Test: #864, Testing with '863'	Passed
Test: #865, Testing with '864'	Passed
Test: #866, Testing with '865'	Passed
Test: #867, Testing with '866'	Passed
Test: #868, Testing with '867'	Passed
Test: #869, Testing with '868'	Passed
Test: #870, Testing with '869'	Passed
Test: #871, Testing with '870'	Passed
Test: #872, Testing with '871'	Passed
Test: #873, Testing with '872'	Passed
Test: #874, Testing with '873'	Passed
Test: #875, Testing with '874'	Passed
Test: #876, Testing with '875'	Passed
Test: #877, Testing with '876'	Passed
Test: #878, Testing with '877'	Passed
Test: #879, Testing with '878'	Passed
Test: #880, Testing with '879'	Passed
Test: #881, Testing with '880'	Passed
Test: #882, Testing with '881'	Passed
Test: #883, Testing with '882'	Passed
Test: #884, Testing with '883'	Passed
Test: #885, Testing with '884'	Passed
Test: #886, Testing with '885'	Passed
Test: #887, Testing with '886'	Passed
Test: #888, Testing with '887'	Passed
Test: #889, Testing with '888'	Passed
Test: #890, Testing with '889'	Passed
Test: #891, Testing with '890'	Passed
Test: #892, Testing with '891'	Passed
Test: #893, Testing with '892'	Passed
Test: #894, Testing with '893'	Passed
Test: #895, Testing with '894'	Passed
Test: #896, Testing with '895'	Passed
Test: #897, Testing with '896'	Passed
Test: #898, Testing with '897'	Passed
Test: #899, Testing with '898'	Passed
Test: #900, Testing with '899'	Passed
Test: #901, Testing with '900'	Passed
Test: #902, Testing with '901'	Passed
Test: #903, Testing with '902'	Passed
Test: #904, Testing with '903'	Passed
Test: #905, Testing with '904'	Passed
Test: #906, Testing with '905'	Passed
Test: #907, Testing with '906'	Passed
Test: #908, Testing with '907'	Passed
Test: #909, Testing with '908'	Passed
Test: #910, Testing with '909'	Passed
Test: #911, Testing with '910'	Passed
Test: #912, Testing with '911'	Passed
Test: #913, Testing with '912'	Passed
Test: #914, Testing with '913'	Passed
Test: #915, Testing with '914'	Passed
Test: #916, Testing with '915'	Passed
Test: #917, Testing with '916'	Passed
Test: #918, Testing with '917'	Passed
Test: #919, Testing with '918'	Passed
Test: #920, Testing with '919'	Passed
Test: #921, Testing with '920'	Passed
Test: #922, Testing with '921'	Passed
Test: #923, Testing with '922'	Passed
Test: #924, Testing with '923'	Passed
Test: #925, Testing with '924'	Passed
Test: #926, Testing with '925'	Passed
Test: #927, Testing with '926'	Passed
Test: #928, Testing with '927'	Passed
Test: #929, Testing with '928'	Passed
Test: #930, Testing with '929'	Passed
Test: #931, Testing with '930'	Passed
Test: #932, Testing with '931'	Passed
Test: #933, Testing with '932'	Passed
Test: #934, Testing with '933'	Passed
Test: #935, Testing with '934'	Passed
Test: #936, Testing with '935'	Passed
Test: #937, Testing with '936'	Passed
Test: #938, Testing with '937'	Passed
Test: #939, Testing with '938'	Passed
Test: #940, Testing with '939'	Passed
Test: #941, Testing with '940'	Passed
Test: #942, Testing with '941'	Passed
Test: #943, Testing with '942'	Passed
Test: #944, Testing with '943'	Passed
Test: #945, Testing with '944'	Passed
Test: #946, Testing with '945'	Passed
Test: #947, Testing with '946'	Passed
Test: #948, Testing with '947'	Passed
Test: #949, Testing with '948'	Passed
Test: #950, Testing with '949'	Passed
Test: #951, Testing with '950'	Passed
Test: #952, Testing with '951'	Passed
Test: #953, Testing with '952'	Passed
Test: #954, Testing with '953'	Passed
Test: #955, Testing with '954'	Passed
Test: #956, Testing with '955'	Passed
Test: #957, Testing with '956'	Passed
Test: #958, Testing with '957'	Passed
Test: #959, Testing with '958'	Passed
Test: #960, Testing with '959'	Passed
Test: #961, Testing with '960'	Passed
Test: #962, Testing with '961'	Passed
Test: #963, Testing with '962'	Passed
Test: #964, Testing with '963'	Passed
Test: #965, Testing with '964'	Passed
Test: #966, Testing with '965'	Passed
Test: #967, Testing with '966'	Passed
Test: #968, Testing with '967'	Passed
Test: #969, Testing with '968'	Passed
Test: #970, Testing with '969'	Passed
Test: #971, Testing with '970'	Passed
Test: #972, Testing with '971'	Passed
Test: #973, Testing with '972'	Passed
Test: #974, Testing with '973'	Passed
Test: #975, Testing with '974'	Passed
Test: #976, Testing with '975'	Passed
Test: #977, Testing with '976'	Passed
Test: #978, Testing with '977'	Passed
Test: #979, Testing with '978'	Passed
Test: #980, Testing with '979'	Passed
Test: #981, Testing with '980'	Passed
Test: #982, Testing with '981'	Passed
Test: #983, Testing with '982'	Passed
Test: #984, Testing with '983'	Passed
Test: #985, Testing with '984'	Passed
Test: #986, Testing with '985'	Passed
Test: #987, Testing with '986'	Passed
Test: #988, Testing with '987'	Passed
Test: #989, Testing with '988'	Passed
Test: #990, Testing with '989'	Passed
Test: #991, Testing with '990'	Passed
Test: #992, Testing with '991'	Passed
Test: #993, Testing with '992'	Passed
Test: #994, Testing with '993'	Passed
Test: #995, Testing with '994'	Passed
Test: #996, Testing with '995'	Passed
Test: #997, Testing with '996'	Passed
Test: #998, Testing with '997'	Passed
Test: #999, Testing with '998'	Passed
Test: #1000, Testing with '999'	Passed
Test: #1001, Testing with '1000'	Passed
All tests passed!

Times ran: 1001 | Tests Failed: 0
File 'dominion.c'
Lines executed:17.86% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/***** Refactored cards - now with bugs!*****/
        -:    9:
        -:   10:/* Smithy */
        -:   11:/* Card Test 1 */
        -:   12:/* Random tester card1 */
    #####:   13:int play_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:   14:{
        -:   15:	int i;
        -:   16:
        -:   17:      //+3 Cards
    #####:   18:        for (i = 1; i < 3; i++) /* BUG: i = 1 instead of i = 0 */
        -:   19:	{
    #####:   20:	  drawCard(currentPlayer, state);
        -:   21:	}
        -:   22:			
        -:   23:      //discard card from hand
    #####:   24:      discardCard(handPos, currentPlayer, state, 0);
    #####:   25:      return 0;
        -:   26:}
        -:   27:
        -:   28:/* Adventurer */
        -:   29:/* Card Test 2 */
        -:   30:/* Random tester */
    #####:   31:int play_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:   32:{
        -:   33:	int cardDrawn;
        -:   34:
    #####:   35:	while(drawntreasure<2){
    #####:   36:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   37:		  shuffle(currentPlayer, state);
        -:   38:		}
    #####:   39:		drawCard(currentPlayer, state);
    #####:   40:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   41:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   42:		  drawntreasure++;
        -:   43:		else{
    #####:   44:		  temphand[z]=cardDrawn;
    #####:   45:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   46:		  z++;
        -:   47:		}
        -:   48:	      }
    #####:   49:	      while(z-1>0){ /* BUG: '>' instead of '>=' */
    #####:   50:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   51:		z=z-1;
        -:   52:	      }
    #####:   53:	      return 0;
        -:   54:}
        -:   55:
        -:   56:/* Council Room */
        -:   57:/* Card Test 3 */
    #####:   58:int play_council_room(int currentPlayer, struct gameState *state, int handPos)
        -:   59:{
        -:   60:	int i;
        -:   61:
        -:   62:      //+4 Cards
    #####:   63:      for (i = 0; i < 3; i++) /* BUG: draw 3 cards instead of 4 */
        -:   64:	{
    #####:   65:	  drawCard(currentPlayer, state);
        -:   66:	}
        -:   67:			
        -:   68:      //+1 Buy
    #####:   69:      state->numBuys++;
        -:   70:			
        -:   71:      //Each other player draws a card
    #####:   72:      for (i = 0; i < state->numPlayers; i++)
        -:   73:	{
    #####:   74:	  if ( i != currentPlayer )
        -:   75:	    {
    #####:   76:	      drawCard(i, state);
        -:   77:	    }
        -:   78:	}
        -:   79:			
        -:   80:      //put played card in played card pile
    #####:   81:      discardCard(handPos, currentPlayer, state, 0);
        -:   82:			
    #####:   83:      return 0;
        -:   84:}
        -:   85:
        -:   86:/* Mine */
    #####:   87:int play_mine(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:   88:{
        -:   89:	int i;
        -:   90:	int j;
        -:   91:
    #####:   92:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:   93:
    #####:   94:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:   95:	  {
    #####:   96:	    return -1;
        -:   97:	  }
        -:   98:		  
    #####:   99:	if (choice2 > treasure_map || choice2 < curse)
        -:  100:	  {
    #####:  101:	    return -1;
        -:  102:	  }
        -:  103:
    #####:  104:	if ( (getCost(state->hand[currentPlayer][choice1]) + 4) > getCost(choice2) ) /* BUG: Gain treasure costing up to 4 more instead of 3 */
        -:  105:	  {
    #####:  106:	    return -1;
        -:  107:	  }
        -:  108:
    #####:  109:	gainCard(choice2, state, 2, currentPlayer);
        -:  110:
        -:  111:	//discard card from hand
    #####:  112:	discardCard(handPos, currentPlayer, state, 0);
        -:  113:
        -:  114:	//discard trashed card
    #####:  115:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  116:	  {
    #####:  117:	    if (state->hand[currentPlayer][i] == j)
        -:  118:	      {
    #####:  119:		discardCard(i, currentPlayer, state, 0);			
    #####:  120:		break;
        -:  121:	      }
        -:  122:	  }
        -:  123:			  
    #####:  124:	return 0;
        -:  125:}
        -:  126:
        -:  127:/* Remodel */
    #####:  128:int play_remodel(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  129:{
        -:  130:	int i;
        -:  131:	int j;
        -:  132:
    #####:  133:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  134:
    #####:  135:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  136:	{
    #####:  137:	  return -1;
        -:  138:	}
        -:  139:
    #####:  140:      gainCard(choice2, state, 0, currentPlayer);
        -:  141:
        -:  142:      //discard card from hand
    #####:  143:      discardCard(handPos, currentPlayer, state, 0);
        -:  144:
        -:  145:      //discard trashed card
    #####:  146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  147:	{
    #####:  148:	  if (state->hand[currentPlayer][i] == j)
        -:  149:	    {
    #####:  150:	      discardCard(i, currentPlayer, state, 0);			
    #####:  151:	      break;
        -:  152:	    }
        -:  153:	}
        -:  154:
        -:  155:
    #####:  156:      return 0;
        -:  157:}
        -:  158:
        -:  159:/* Village */
        -:  160:/* Card Test 4 */
        -:  161:/* Random tester card 2 */
    #####:  162:int play_village(int currentPlayer, struct gameState *state, int handPos)
        -:  163:{
        -:  164:      //+1 Card
    #####:  165:      drawCard(currentPlayer, state);
        -:  166:			
        -:  167:      //+2 Actions
    #####:  168:      state->numActions = state->numActions + 2;
        -:  169:			
        -:  170:      //discard played card from hand
    #####:  171:      discardCard(handPos, currentPlayer, state, 0);
    #####:  172:      return 0;
        -:  173:}
        -:  174:
        -:  175:/***** End refactoring *****/
        -:  176:
        -:  177:
    42730:  178:int compare(const void* a, const void* b) {
    42730:  179:  if (*(int*)a > *(int*)b)
     4950:  180:    return 1;
    37780:  181:  if (*(int*)a < *(int*)b)
    13678:  182:    return -1;
    24102:  183:  return 0;
        -:  184:}
        -:  185:
    #####:  186:struct gameState* newGame() {
    #####:  187:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  188:  return g;
        -:  189:}
        -:  190:
    #####:  191:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  192:		  int k8, int k9, int k10) {
    #####:  193:  int* k = malloc(10 * sizeof(int));
    #####:  194:  k[0] = k1;
    #####:  195:  k[1] = k2;
    #####:  196:  k[2] = k3;
    #####:  197:  k[3] = k4;
    #####:  198:  k[4] = k5;
    #####:  199:  k[5] = k6;
    #####:  200:  k[6] = k7;
    #####:  201:  k[7] = k8;
    #####:  202:  k[8] = k9;
    #####:  203:  k[9] = k10;
    #####:  204:  return k;
        -:  205:}
        -:  206:
     1091:  207:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  208:		   struct gameState *state) {
        -:  209:
        -:  210:  int i;
        -:  211:  int j;
        -:  212:  int it;			
        -:  213:  //set up random number generator
     1091:  214:  SelectStream(1);
     1091:  215:  PutSeed((long)randomSeed);
        -:  216:  
        -:  217:  //check number of players
     1091:  218:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  219:    {
    #####:  220:      return -1;
        -:  221:    }
        -:  222:
        -:  223:  //set number of players
     1091:  224:  state->numPlayers = numPlayers;
        -:  225:
        -:  226:  //check selected kingdom cards are different
    12001:  227:  for (i = 0; i < 10; i++)
        -:  228:    {
   120010:  229:      for (j = 0; j < 10; j++)
        -:  230:        {
   109100:  231:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  232:	    {
    #####:  233:	      return -1;
        -:  234:	    }
        -:  235:        }
        -:  236:    }
        -:  237:
        -:  238:
        -:  239:  //initialize supply
        -:  240:  ///////////////////////////////
        -:  241:
        -:  242:  //set number of Curse cards
     1091:  243:  if (numPlayers == 2)
        -:  244:    {
     1091:  245:      state->supplyCount[curse] = 10;
        -:  246:    }
    #####:  247:  else if (numPlayers == 3)
        -:  248:    {
    #####:  249:      state->supplyCount[curse] = 20;
        -:  250:    }
        -:  251:  else
        -:  252:    {
    #####:  253:      state->supplyCount[curse] = 30;
        -:  254:    }
        -:  255:
        -:  256:  //set number of Victory cards
     1091:  257:  if (numPlayers == 2)
        -:  258:    {
     1091:  259:      state->supplyCount[estate] = 8;
     1091:  260:      state->supplyCount[duchy] = 8;
     1091:  261:      state->supplyCount[province] = 8;
        -:  262:    }
        -:  263:  else
        -:  264:    {
    #####:  265:      state->supplyCount[estate] = 12;
    #####:  266:      state->supplyCount[duchy] = 12;
    #####:  267:      state->supplyCount[province] = 12;
        -:  268:    }
        -:  269:
        -:  270:  //set number of Treasure cards
     1091:  271:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1091:  272:  state->supplyCount[silver] = 40;
     1091:  273:  state->supplyCount[gold] = 30;
        -:  274:
        -:  275:  //set number of Kingdom cards
    22911:  276:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  277:    {
   180015:  278:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  279:	{
   169105:  280:	  if (kingdomCards[j] == i)
        -:  281:	    {
        -:  282:	      //check if card is a 'Victory' Kingdom card
    10910:  283:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  284:		{
     4364:  285:		  if (numPlayers == 2){ 
     2182:  286:		    state->supplyCount[i] = 8; 
        -:  287:		  }
    #####:  288:		  else{ state->supplyCount[i] = 12; }
        -:  289:		}
        -:  290:	      else
        -:  291:		{
     8728:  292:		  state->supplyCount[i] = 10;
        -:  293:		}
    10910:  294:	      break;
        -:  295:	    }
        -:  296:	  else    //card is not in the set choosen for the game
        -:  297:	    {
   158195:  298:	      state->supplyCount[i] = -1;
        -:  299:	    }
        -:  300:	}
        -:  301:
        -:  302:    }
        -:  303:
        -:  304:  ////////////////////////
        -:  305:  //supply intilization complete
        -:  306:
        -:  307:  //set player decks
     3273:  308:  for (i = 0; i < numPlayers; i++)
        -:  309:    {
     2182:  310:      state->deckCount[i] = 0;
     8728:  311:      for (j = 0; j < 3; j++)
        -:  312:	{
     6546:  313:	  state->deck[i][j] = estate;
     6546:  314:	  state->deckCount[i]++;
        -:  315:	}
    17456:  316:      for (j = 3; j < 10; j++)
        -:  317:	{
    15274:  318:	  state->deck[i][j] = copper;
    15274:  319:	  state->deckCount[i]++;		
        -:  320:	}
        -:  321:    }
        -:  322:
        -:  323:  //shuffle player decks
     3273:  324:  for (i = 0; i < numPlayers; i++)
        -:  325:    {
     2182:  326:      if ( shuffle(i, state) < 0 )
        -:  327:	{
    #####:  328:	  return -1;
        -:  329:	}
        -:  330:    }
        -:  331:
        -:  332:  //draw player hands
     3273:  333:  for (i = 0; i < numPlayers; i++)
        -:  334:    {  
        -:  335:      //initialize hand size to zero
     2182:  336:      state->handCount[i] = 0;
     2182:  337:      state->discardCount[i] = 0;
        -:  338:      //draw 5 cards
        -:  339:      // for (j = 0; j < 5; j++)
        -:  340:      //	{
        -:  341:      //	  drawCard(i, state);
        -:  342:      //	}
        -:  343:    }
        -:  344:  
        -:  345:  //set embargo tokens to 0 for all supply piles
    30548:  346:  for (i = 0; i <= treasure_map; i++)
        -:  347:    {
    29457:  348:      state->embargoTokens[i] = 0;
        -:  349:    }
        -:  350:
        -:  351:  //initialize first player's turn
     1091:  352:  state->outpostPlayed = 0;
     1091:  353:  state->phase = 0;
     1091:  354:  state->numActions = 1;
     1091:  355:  state->numBuys = 1;
     1091:  356:  state->playedCardCount = 0;
     1091:  357:  state->whoseTurn = 0;
     1091:  358:  state->handCount[state->whoseTurn] = 0;
        -:  359:  //int it; move to top
        -:  360:
        -:  361:  //Moved draw cards to here, only drawing at the start of a turn
     6546:  362:  for (it = 0; it < 5; it++){
     5455:  363:    drawCard(state->whoseTurn, state);
        -:  364:  }
        -:  365:
     1091:  366:  updateCoins(state->whoseTurn, state, 0);
        -:  367:
     1091:  368:  return 0;
        -:  369:}
        -:  370:
     2182:  371:int shuffle(int player, struct gameState *state) {
        -:  372: 
        -:  373:
        -:  374:  int newDeck[MAX_DECK];
     2182:  375:  int newDeckPos = 0;
        -:  376:  int card;
        -:  377:  int i;
        -:  378:
     2182:  379:  if (state->deckCount[player] < 1)
    #####:  380:    return -1;
     2182:  381:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  382:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  383:
    26184:  384:  while (state->deckCount[player] > 0) {
    21820:  385:    card = floor(Random() * state->deckCount[player]);
    21820:  386:    newDeck[newDeckPos] = state->deck[player][card];
    21820:  387:    newDeckPos++;
    76370:  388:    for (i = card; i < state->deckCount[player]-1; i++) {
    54550:  389:      state->deck[player][i] = state->deck[player][i+1];
        -:  390:    }
    21820:  391:    state->deckCount[player]--;
        -:  392:  }
    24002:  393:  for (i = 0; i < newDeckPos; i++) {
    21820:  394:    state->deck[player][i] = newDeck[i];
    21820:  395:    state->deckCount[player]++;
        -:  396:  }
        -:  397:
     2182:  398:  return 0;
        -:  399:}
        -:  400:
    #####:  401:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  402:{	
        -:  403:  int card;
    #####:  404:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  405:
        -:  406:  //check if it is the right phase
    #####:  407:  if (state->phase != 0)
        -:  408:    {
    #####:  409:      return -1;
        -:  410:    }
        -:  411:	
        -:  412:  //check if player has enough actions
    #####:  413:  if ( state->numActions < 1 )
        -:  414:    {
    #####:  415:      return -1;
        -:  416:    }
        -:  417:	
        -:  418:  //get card played
    #####:  419:  card = handCard(handPos, state);
        -:  420:	
        -:  421:  //check if selected card is an action
    #####:  422:  if ( card < adventurer || card > treasure_map )
        -:  423:    {
    #####:  424:      return -1;
        -:  425:    }
        -:  426:	
        -:  427:  //play card
    #####:  428:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  429:    {
    #####:  430:      return -1;
        -:  431:    }
        -:  432:	
        -:  433:  //reduce number of actions
    #####:  434:  state->numActions--;
        -:  435:
        -:  436:  //update coins (Treasure cards may be added with card draws)
    #####:  437:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  438:	
    #####:  439:  return 0;
        -:  440:}
        -:  441:
    #####:  442:int buyCard(int supplyPos, struct gameState *state) {
        -:  443:  int who;
        -:  444:  if (DEBUG){
        -:  445:    printf("Entering buyCard...\n");
        -:  446:  }
        -:  447:
        -:  448:  // I don't know what to do about the phase thing.
        -:  449:
    #####:  450:  who = state->whoseTurn;
        -:  451:
    #####:  452:  if (state->numBuys < 1){
        -:  453:    if (DEBUG)
        -:  454:      printf("You do not have any buys left\n");
    #####:  455:    return -1;
    #####:  456:  } else if (supplyCount(supplyPos, state) <1){
        -:  457:    if (DEBUG)
        -:  458:      printf("There are not any of that type of card left\n");
    #####:  459:    return -1;
    #####:  460:  } else if (state->coins < getCost(supplyPos)){
        -:  461:    if (DEBUG) 
        -:  462:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  463:    return -1;
        -:  464:  } else {
    #####:  465:    state->phase=1;
        -:  466:    //state->supplyCount[supplyPos]--;
    #####:  467:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  468:  
    #####:  469:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  470:    state->numBuys--;
        -:  471:    if (DEBUG)
        -:  472:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  473:  }
        -:  474:
        -:  475:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  476:  //state->discardCount[who]++;
        -:  477:    
    #####:  478:  return 0;
        -:  479:}
        -:  480:
        -:  481:/***** Use this function for Unit test 4 *****/
    #####:  482:int numHandCards(struct gameState *state) {
    #####:  483:  return state->handCount[ whoseTurn(state) ];
        -:  484:}
        -:  485:
    #####:  486:int handCard(int handPos, struct gameState *state) {
    #####:  487:  int currentPlayer = whoseTurn(state);
    #####:  488:  return state->hand[currentPlayer][handPos];
        -:  489:}
        -:  490:
        -:  491:/***** Use this function for Unit test 3 *****/
    #####:  492:int supplyCount(int card, struct gameState *state) {
    #####:  493:  return state->supplyCount[card];
        -:  494:}
        -:  495:
    #####:  496:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  497:  int i;
    #####:  498:  int count = 0;
        -:  499:
    #####:  500:  for (i = 0; i < state->deckCount[player]; i++)
        -:  501:    {
    #####:  502:      if (state->deck[player][i] == card) count++;
        -:  503:    }
        -:  504:
    #####:  505:  for (i = 0; i < state->handCount[player]; i++)
        -:  506:    {
    #####:  507:      if (state->hand[player][i] == card) count++;
        -:  508:    }
        -:  509:
    #####:  510:  for (i = 0; i < state->discardCount[player]; i++)
        -:  511:    {
    #####:  512:      if (state->discard[player][i] == card) count++;
        -:  513:    }
        -:  514:
    #####:  515:  return count;
        -:  516:}
        -:  517:
    #####:  518:int whoseTurn(struct gameState *state) {
    #####:  519:  return state->whoseTurn;
        -:  520:}
        -:  521:
    #####:  522:int endTurn(struct gameState *state) {
        -:  523:  int k;
        -:  524:  int i;
    #####:  525:  int currentPlayer = whoseTurn(state);
        -:  526:  
        -:  527:  //Discard hand
    #####:  528:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  529:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  530:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  531:  }
    #####:  532:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  533:    
        -:  534:  //Code for determining the player
    #####:  535:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  536:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  537:  }
        -:  538:  else{
    #####:  539:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  540:  }
        -:  541:
    #####:  542:  state->outpostPlayed = 0;
    #####:  543:  state->phase = 0;
    #####:  544:  state->numActions = 1;
    #####:  545:  state->coins = 0;
    #####:  546:  state->numBuys = 1;
    #####:  547:  state->playedCardCount = 0;
    #####:  548:  state->handCount[state->whoseTurn] = 0;
        -:  549:
        -:  550:  //int k; move to top
        -:  551:  //Next player draws hand
    #####:  552:  for (k = 0; k < 5; k++){
    #####:  553:    drawCard(state->whoseTurn, state);//Draw a card
        -:  554:  }
        -:  555:
        -:  556:  //Update money
    #####:  557:  updateCoins(state->whoseTurn, state , 0);
        -:  558:
    #####:  559:  return 0;
        -:  560:}
        -:  561:
        -:  562:/***** Use this function for Unit test 1 *****/
       90:  563:int isGameOver(struct gameState *state) {
        -:  564:  int i;
        -:  565:  int j;
        -:  566:	
        -:  567:  //if stack of Province cards is empty, the game ends
       90:  568:  if (state->supplyCount[province] == 0)
        -:  569:    {
       26:  570:      return 1;
        -:  571:    }
        -:  572:
        -:  573:  //if three supply pile are at 0, the game ends
       64:  574:  j = 0;
     1664:  575:  for (i = 0; i < 25; i++)
        -:  576:    {
     1600:  577:      if (state->supplyCount[i] == 0)
        -:  578:	{
       96:  579:	  j++;
        -:  580:	}
        -:  581:    }
       64:  582:  if ( j >= 3)
        -:  583:    {
       16:  584:      return 1;
        -:  585:    }
        -:  586:
       48:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int scoreFor (int player, struct gameState *state) {
        -:  591:
        -:  592:  int i;
    #####:  593:  int score = 0;
        -:  594:  //score from hand
    #####:  595:  for (i = 0; i < state->handCount[player]; i++)
        -:  596:    {
    #####:  597:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  598:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  599:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  600:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  601:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  602:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  603:    }
        -:  604:
        -:  605:  //score from discard
    #####:  606:  for (i = 0; i < state->discardCount[player]; i++)
        -:  607:    {
    #####:  608:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  609:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  610:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  611:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  612:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  613:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  614:    }
        -:  615:
        -:  616:  //score from deck
    #####:  617:  for (i = 0; i < state->discardCount[player]; i++)
        -:  618:    {
    #####:  619:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  620:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  621:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  622:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  623:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  624:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  625:    }
        -:  626:
    #####:  627:  return score;
        -:  628:}
        -:  629:
    #####:  630:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  631:  int i;	
        -:  632:  int j;
        -:  633:  int highScore;
        -:  634:  int currentPlayer;
        -:  635:
        -:  636:  //get score for each player
    #####:  637:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  638:    {
        -:  639:      //set unused player scores to -9999
    #####:  640:      if (i >= state->numPlayers)
        -:  641:	{
    #####:  642:	  players[i] = -9999;
        -:  643:	}
        -:  644:      else
        -:  645:	{
    #####:  646:	  players[i] = scoreFor (i, state);
        -:  647:	}
        -:  648:    }
        -:  649:
        -:  650:  //find highest score
    #####:  651:  j = 0;
    #####:  652:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  653:    {
    #####:  654:      if (players[i] > players[j])
        -:  655:	{
    #####:  656:	  j = i;
        -:  657:	}
        -:  658:    }
    #####:  659:  highScore = players[j];
        -:  660:
        -:  661:  //add 1 to players who had less turns
    #####:  662:  currentPlayer = whoseTurn(state);
    #####:  663:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  664:    {
    #####:  665:      if ( players[i] == highScore && i > currentPlayer )
        -:  666:	{
    #####:  667:	  players[i]++;
        -:  668:	}
        -:  669:    }
        -:  670:
        -:  671:  //find new highest score
    #####:  672:  j = 0;
    #####:  673:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  674:    {
    #####:  675:      if ( players[i] > players[j] )
        -:  676:	{
    #####:  677:	  j = i;
        -:  678:	}
        -:  679:    }
    #####:  680:  highScore = players[j];
        -:  681:
        -:  682:  //set winners in array to 1 and rest to 0
    #####:  683:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  684:    {
    #####:  685:      if ( players[i] == highScore )
        -:  686:	{
    #####:  687:	  players[i] = 1;
        -:  688:	}
        -:  689:      else
        -:  690:	{
    #####:  691:	  players[i] = 0;
        -:  692:	}
        -:  693:    }
        -:  694:
    #####:  695:  return 0;
        -:  696:}
        -:  697:
     5455:  698:int drawCard(int player, struct gameState *state)
        -:  699:{	int count;
        -:  700:  int deckCounter;
     5455:  701:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  702:    
        -:  703:    //Step 1 Shuffle the discard pile back into a deck
        -:  704:    int i;
        -:  705:    //Move discard to deck
    #####:  706:    for (i = 0; i < state->discardCount[player];i++){
    #####:  707:      state->deck[player][i] = state->discard[player][i];
    #####:  708:      state->discard[player][i] = -1;
        -:  709:    }
        -:  710:
    #####:  711:    state->deckCount[player] = state->discardCount[player];
    #####:  712:    state->discardCount[player] = 0;//Reset discard
        -:  713:
        -:  714:    //Shufffle the deck
    #####:  715:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  716:   
        -:  717:    if (DEBUG){//Debug statements
        -:  718:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  719:    }
        -:  720:    
    #####:  721:    state->discardCount[player] = 0;
        -:  722:
        -:  723:    //Step 2 Draw Card
    #####:  724:    count = state->handCount[player];//Get current player's hand count
        -:  725:    
        -:  726:    if (DEBUG){//Debug statements
        -:  727:      printf("Current hand count: %d\n", count);
        -:  728:    }
        -:  729:    
    #####:  730:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  731:
    #####:  732:    if (deckCounter == 0)
    #####:  733:      return -1;
        -:  734:
    #####:  735:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  736:    state->deckCount[player]--;
    #####:  737:    state->handCount[player]++;//Increment hand count
        -:  738:  }
        -:  739:
        -:  740:  else{
     5455:  741:    int count = state->handCount[player];//Get current hand count for player
        -:  742:    int deckCounter;
        -:  743:    if (DEBUG){//Debug statements
        -:  744:      printf("Current hand count: %d\n", count);
        -:  745:    }
        -:  746:
     5455:  747:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5455:  748:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5455:  749:    state->deckCount[player]--;
     5455:  750:    state->handCount[player]++;//Increment hand count
        -:  751:  }
        -:  752:
     5455:  753:  return 0;
        -:  754:}
        -:  755:
    #####:  756:int getCost(int cardNumber)
        -:  757:{
    #####:  758:  switch( cardNumber ) 
        -:  759:    {
        -:  760:    case curse:
    #####:  761:      return 0;
        -:  762:    case estate:
    #####:  763:      return 2;
        -:  764:    case duchy:
    #####:  765:      return 5;
        -:  766:    case province:
    #####:  767:      return 8;
        -:  768:    case copper:
    #####:  769:      return 0;
        -:  770:    case silver:
    #####:  771:      return 3;
        -:  772:    case gold:
    #####:  773:      return 6;
        -:  774:    case adventurer:
    #####:  775:      return 6;
        -:  776:    case council_room:
    #####:  777:      return 5;
        -:  778:    case feast:
    #####:  779:      return 4;
        -:  780:    case gardens:
    #####:  781:      return 4;
        -:  782:    case mine:
    #####:  783:      return 5;
        -:  784:    case remodel:
    #####:  785:      return 4;
        -:  786:    case smithy:
    #####:  787:      return 4;
        -:  788:    case village:
    #####:  789:      return 3;
        -:  790:    case baron:
    #####:  791:      return 4;
        -:  792:    case great_hall:
    #####:  793:      return 3;
        -:  794:    case minion:
    #####:  795:      return 5;
        -:  796:    case steward:
    #####:  797:      return 3;
        -:  798:    case tribute:
    #####:  799:      return 5;
        -:  800:    case ambassador:
    #####:  801:      return 3;
        -:  802:    case cutpurse:
    #####:  803:      return 4;
        -:  804:    case embargo: 
    #####:  805:      return 2;
        -:  806:    case outpost:
    #####:  807:      return 5;
        -:  808:    case salvager:
    #####:  809:      return 4;
        -:  810:    case sea_hag:
    #####:  811:      return 4;
        -:  812:    case treasure_map:
    #####:  813:      return 4;
        -:  814:    }
        -:  815:	
    #####:  816:  return -1;
        -:  817:}
        -:  818:
        -:  819:/********** BEGINNING of cardEffct **********/
        -:  820:/* This is where the refactor and bug additions will be done for assignment-2 */
    #####:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
    #####:  828:  int currentPlayer = whoseTurn(state);
    #####:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
    #####:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND];// moved above the if statement
    #####:  833:  int drawntreasure=0;
        -:  834:  int cardDrawn;
    #####:  835:  int z = 0;// this is the counter for the temp hand
    #####:  836:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  837:    nextPlayer = 0;
        -:  838:  }
        -:  839:  
        -:  840:  /* Refactoring switch statement so cards are implemented in their own functions */
        -:  841:  //uses switch to select card and perform actions
    #####:  842:  switch( card ) 
        -:  843:    {
        -:  844:
        -:  845:    /***** Refactor adventurer *****/
        -:  846:    case adventurer:
    #####:  847:	    return play_adventurer(drawntreasure, state, currentPlayer, temphand, z);
        -:  848:      /*
        -:  849:      while(drawntreasure<2){
        -:  850:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  851:	  shuffle(currentPlayer, state);
        -:  852:	}
        -:  853:	drawCard(currentPlayer, state);
        -:  854:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  855:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  856:	  drawntreasure++;
        -:  857:	else{
        -:  858:	  temphand[z]=cardDrawn;
        -:  859:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  860:	  z++;
        -:  861:	}
        -:  862:      }
        -:  863:      while(z-1>=0){
        -:  864:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  865:	z=z-1;
        -:  866:      }
        -:  867:      return 0;
        -:  868:      */
        -:  869:			
        -:  870:    /***** Refactor council room*****/
        -:  871:    case council_room:
    #####:  872:       	return play_council_room(currentPlayer, state, handPos);
        -:  873:      /*
        -:  874:      //+4 Cards
        -:  875:      for (i = 0; i < 4; i++)
        -:  876:	{
        -:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
        -:  879:			
        -:  880:      //+1 Buy
        -:  881:      state->numBuys++;
        -:  882:			
        -:  883:      //Each other player draws a card
        -:  884:      for (i = 0; i < state->numPlayers; i++)
        -:  885:	{
        -:  886:	  if ( i != currentPlayer )
        -:  887:	    {
        -:  888:	      drawCard(i, state);
        -:  889:	    }
        -:  890:	}
        -:  891:			
        -:  892:      //put played card in played card pile
        -:  893:      discardCard(handPos, currentPlayer, state, 0);
        -:  894:			
        -:  895:      return 0;
        -:  896:      */
        -:  897:			
        -:  898:    case feast:
        -:  899:      //gain card with cost up to 5
        -:  900:      //Backup hand
    #####:  901:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  902:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  903:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  904:      }
        -:  905:      //Backup hand
        -:  906:
        -:  907:      //Update Coins for Buy
    #####:  908:      updateCoins(currentPlayer, state, 5);
    #####:  909:      x = 1;//Condition to loop on
    #####:  910:      while( x == 1) {//Buy one card
    #####:  911:	if (supplyCount(choice1, state) <= 0){
        -:  912:	  if (DEBUG)
        -:  913:	    printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:	  if (DEBUG){
        -:  916:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  917:	  }
        -:  918:	}
    #####:  919:	else if (state->coins < getCost(choice1)){
    #####:  920:	  printf("That card is too expensive!\n");
        -:  921:
        -:  922:	  if (DEBUG){
        -:  923:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  924:	  }
        -:  925:	}
        -:  926:	else{
        -:  927:
        -:  928:	  if (DEBUG){
        -:  929:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:	  }
        -:  931:
    #####:  932:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  933:	  x = 0;//No more buying cards
        -:  934:
        -:  935:	  if (DEBUG){
        -:  936:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:	  }
        -:  938:
        -:  939:	}
        -:  940:      }     
        -:  941:
        -:  942:      //Reset Hand
    #####:  943:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  944:	state->hand[currentPlayer][i] = temphand[i];
    #####:  945:	temphand[i] = -1;
        -:  946:      }
        -:  947:      //Reset Hand
        -:  948:      			
    #####:  949:      return 0;
        -:  950:			
        -:  951:    case gardens:
    #####:  952:      return -1;
        -:  953:			
        -:  954:    /***** Refactor mine*****/
        -:  955:    case mine:
    #####:  956:	return play_mine(state, choice1, choice2, currentPlayer, handPos);
        -:  957:      /*
        -:  958:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
        -:  960:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  961:	{
        -:  962:	  return -1;
        -:  963:	}
        -:  964:		
        -:  965:      if (choice2 > treasure_map || choice2 < curse)
        -:  966:	{
        -:  967:	  return -1;
        -:  968:	}
        -:  969:
        -:  970:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  971:	{
        -:  972:	  return -1;
        -:  973:	}
        -:  974:
        -:  975:      gainCard(choice2, state, 2, currentPlayer);
        -:  976:
        -:  977:      //discard card from hand
        -:  978:      discardCard(handPos, currentPlayer, state, 0);
        -:  979:
        -:  980:      //discard trashed card
        -:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:	{
        -:  983:	  if (state->hand[currentPlayer][i] == j)
        -:  984:	    {
        -:  985:	      discardCard(i, currentPlayer, state, 0);			
        -:  986:	      break;
        -:  987:	    }
        -:  988:	}
        -:  989:			
        -:  990:      return 0;
        -:  991:      */
        -:  992:			
        -:  993:    /***** Refactor remodel*****/
        -:  994:    case remodel:
    #####:  995:      return play_remodel(state, choice1, choice2, currentPlayer, handPos);
        -:  996:      /*
        -:  997:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  998:
        -:  999:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1000:	{
        -: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
        -: 1004:      gainCard(choice2, state, 0, currentPlayer);
        -: 1005:
        -: 1006:      //discard card from hand
        -: 1007:      discardCard(handPos, currentPlayer, state, 0);
        -: 1008:
        -: 1009:      //discard trashed card
        -: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1011:	{
        -: 1012:	  if (state->hand[currentPlayer][i] == j)
        -: 1013:	    {
        -: 1014:	      discardCard(i, currentPlayer, state, 0);			
        -: 1015:	      break;
        -: 1016:	    }
        -: 1017:	}
        -: 1018:
        -: 1019:
        -: 1020:      return 0;
        -: 1021:      */
        -: 1022:		
        -: 1023:    /***** Refactor smithy *****/
        -: 1024:    case smithy:
    #####: 1025:      return play_smithy(currentPlayer, state, handPos);
        -: 1026:      /* 
        -: 1027:      //+3 Cards
        -: 1028:      for (i = 0; i < 3; i++)
        -: 1029:	{
        -: 1030:	  drawCard(currentPlayer, state);
        -: 1031:	}
        -: 1032:			
        -: 1033:      //discard card from hand
        -: 1034:      discardCard(handPos, currentPlayer, state, 0);
        -: 1035:      return 0;
        -: 1036:      */
        -: 1037:		
        -: 1038:
        -: 1039:    /***** Refactored village for assignment-3 (no new bugs introduced) *****/
        -: 1040:    case village:
    #####: 1041:      return play_village(currentPlayer, state, handPos);
        -: 1042:      /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:      */
        -: 1053:		
        -: 1054:    case baron:
    #####: 1055:      state->numBuys++;//Increase buys by 1!
    #####: 1056:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1057:	int p = 0;//Iterator for hand!
    #####: 1058:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1059:	while(card_not_discarded){
    #####: 1060:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1061:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1062:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1063:	    state->discardCount[currentPlayer]++;
    #####: 1064:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1065:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1066:	    }
    #####: 1067:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1068:	    state->handCount[currentPlayer]--;
    #####: 1069:	    card_not_discarded = 0;//Exit the loop
        -: 1070:	  }
    #####: 1071:	  else if (p > state->handCount[currentPlayer]){
        -: 1072:	    if(DEBUG) {
        -: 1073:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1074:	      printf("Must gain an estate if there are any\n");
        -: 1075:	    }
    #####: 1076:	    if (supplyCount(estate, state) > 0){
    #####: 1077:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1078:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1079:	      if (supplyCount(estate, state) == 0){
    #####: 1080:		isGameOver(state);
        -: 1081:	      }
        -: 1082:	    }
    #####: 1083:	    card_not_discarded = 0;//Exit the loop
        -: 1084:	  }
        -: 1085:			    
        -: 1086:	  else{
    #####: 1087:	    p++;//Next card
        -: 1088:	  }
        -: 1089:	}
        -: 1090:      }
        -: 1091:			    
        -: 1092:      else{
    #####: 1093:	if (supplyCount(estate, state) > 0){
    #####: 1094:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1095:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1096:	  if (supplyCount(estate, state) == 0){
    #####: 1097:	    isGameOver(state);
        -: 1098:	  }
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
        -: 1102:      
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case great_hall:
        -: 1106:      //+1 Card
    #####: 1107:      drawCard(currentPlayer, state);
        -: 1108:			
        -: 1109:      //+1 Actions
    #####: 1110:      state->numActions++;
        -: 1111:			
        -: 1112:      //discard card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case minion:
        -: 1117:      //+1 action
    #####: 1118:      state->numActions++;
        -: 1119:			
        -: 1120:      //discard card from hand
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
        -: 1122:			
    #####: 1123:      if (choice1)		//+2 coins
        -: 1124:	{
    #####: 1125:	  state->coins = state->coins + 2;
        -: 1126:	}
        -: 1127:			
    #####: 1128:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1129:	{
        -: 1130:	  //discard hand
    #####: 1131:	  while(numHandCards(state) > 0)
        -: 1132:	    {
    #####: 1133:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //draw 4
    #####: 1137:	  for (i = 0; i < 4; i++)
        -: 1138:	    {
    #####: 1139:	      drawCard(currentPlayer, state);
        -: 1140:	    }
        -: 1141:				
        -: 1142:	  //other players discard hand and redraw if hand size > 4
    #####: 1143:	  for (i = 0; i < state->numPlayers; i++)
        -: 1144:	    {
    #####: 1145:	      if (i != currentPlayer)
        -: 1146:		{
    #####: 1147:		  if ( state->handCount[i] > 4 )
        -: 1148:		    {
        -: 1149:		      //discard hand
    #####: 1150:		      while( state->handCount[i] > 0 )
        -: 1151:			{
    #####: 1152:			  discardCard(handPos, i, state, 0);
        -: 1153:			}
        -: 1154:							
        -: 1155:		      //draw 4
    #####: 1156:		      for (j = 0; j < 4; j++)
        -: 1157:			{
    #####: 1158:			  drawCard(i, state);
        -: 1159:			}
        -: 1160:		    }
        -: 1161:		}
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case steward:
    #####: 1168:      if (choice1 == 1)
        -: 1169:	{
        -: 1170:	  //+2 cards
    #####: 1171:	  drawCard(currentPlayer, state);
    #####: 1172:	  drawCard(currentPlayer, state);
        -: 1173:	}
    #####: 1174:      else if (choice1 == 2)
        -: 1175:	{
        -: 1176:	  //+2 coins
    #####: 1177:	  state->coins = state->coins + 2;
        -: 1178:	}
        -: 1179:      else
        -: 1180:	{
        -: 1181:	  //trash 2 cards in hand
    #####: 1182:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1183:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:			
        -: 1186:      //discard card from hand
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case tribute:
    #####: 1191:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1192:	if (state->deckCount[nextPlayer] > 0){
    #####: 1193:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1194:	  state->deckCount[nextPlayer]--;
        -: 1195:	}
    #####: 1196:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1197:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1198:	  state->discardCount[nextPlayer]--;
        -: 1199:	}
        -: 1200:	else{
        -: 1201:	  //No Card to Reveal
        -: 1202:	  if (DEBUG){
        -: 1203:	    printf("No cards to reveal\n");
        -: 1204:	  }
        -: 1205:	}
        -: 1206:      }
        -: 1207:	    
        -: 1208:      else{
    #####: 1209:	if (state->deckCount[nextPlayer] == 0){
    #####: 1210:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1211:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1212:	    state->deckCount[nextPlayer]++;
    #####: 1213:	    state->discard[nextPlayer][i] = -1;
    #####: 1214:	    state->discardCount[nextPlayer]--;
        -: 1215:	  }
        -: 1216:			    
    #####: 1217:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1218:	} 
    #####: 1219:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1220:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1221:	state->deckCount[nextPlayer]--;
    #####: 1222:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1223:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1224:	state->deckCount[nextPlayer]--;
        -: 1225:      }    
        -: 1226:		       
    #####: 1227:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1228:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1229:	state->playedCardCount++;
    #####: 1230:	tributeRevealedCards[1] = -1;
        -: 1231:      }
        -: 1232:
    #####: 1233:      for (i = 0; i <= 2; i ++){
    #####: 1234:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1235:	  state->coins += 2;
        -: 1236:	}
        -: 1237:		    
    #####: 1238:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1239:	  drawCard(currentPlayer, state);
    #####: 1240:	  drawCard(currentPlayer, state);
        -: 1241:	}
        -: 1242:	else{//Action Card
    #####: 1243:	  state->numActions = state->numActions + 2;
        -: 1244:	}
        -: 1245:      }
        -: 1246:	    
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case ambassador:
    #####: 1250:      j = 0;		//used to check if player has enough cards to discard
        -: 1251:
    #####: 1252:      if (choice2 > 2 || choice2 < 0)
        -: 1253:	{
    #####: 1254:	  return -1;				
        -: 1255:	}
        -: 1256:
    #####: 1257:      if (choice1 == handPos)
        -: 1258:	{
    #####: 1259:	  return -1;
        -: 1260:	}
        -: 1261:
    #####: 1262:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1263:	{
    #####: 1264:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1265:	    {
    #####: 1266:	      j++;
        -: 1267:	    }
        -: 1268:	}
    #####: 1269:      if (j < choice2)
        -: 1270:	{
    #####: 1271:	  return -1;				
        -: 1272:	}
        -: 1273:
        -: 1274:      if (DEBUG) 
        -: 1275:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1276:
        -: 1277:      //increase supply count for choosen card by amount being discarded
    #####: 1278:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1279:			
        -: 1280:      //each other player gains a copy of revealed card
    #####: 1281:      for (i = 0; i < state->numPlayers; i++)
        -: 1282:	{
    #####: 1283:	  if (i != currentPlayer)
        -: 1284:	    {
    #####: 1285:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1286:	    }
        -: 1287:	}
        -: 1288:
        -: 1289:      //discard played card from hand
    #####: 1290:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1291:
        -: 1292:      //trash copies of cards returned to supply
    #####: 1293:      for (j = 0; j < choice2; j++)
        -: 1294:	{
    #####: 1295:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1296:	    {
    #####: 1297:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1298:		{
    #####: 1299:		  discardCard(i, currentPlayer, state, 1);
    #####: 1300:		  break;
        -: 1301:		}
        -: 1302:	    }
        -: 1303:	}			
        -: 1304:
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case cutpurse:
        -: 1308:
    #####: 1309:      updateCoins(currentPlayer, state, 2);
    #####: 1310:      for (i = 0; i < state->numPlayers; i++)
        -: 1311:	{
    #####: 1312:	  if (i != currentPlayer)
        -: 1313:	    {
    #####: 1314:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1315:		{
    #####: 1316:		  if (state->hand[i][j] == copper)
        -: 1317:		    {
    #####: 1318:		      discardCard(j, i, state, 0);
    #####: 1319:		      break;
        -: 1320:		    }
    #####: 1321:		  if (j == state->handCount[i])
        -: 1322:		    {
    #####: 1323:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1324:			{
        -: 1325:			  if (DEBUG)
        -: 1326:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1327:			}	
    #####: 1328:		      break;
        -: 1329:		    }		
        -: 1330:		}
        -: 1331:					
        -: 1332:	    }
        -: 1333:				
        -: 1334:	}				
        -: 1335:
        -: 1336:      //discard played card from hand
    #####: 1337:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1338:
    #####: 1339:      return 0;
        -: 1340:
        -: 1341:		
        -: 1342:    case embargo: 
        -: 1343:      //+2 Coins
    #####: 1344:      state->coins = state->coins + 2;
        -: 1345:			
        -: 1346:      //see if selected pile is in play
    #####: 1347:      if ( state->supplyCount[choice1] == -1 )
        -: 1348:	{
    #####: 1349:	  return -1;
        -: 1350:	}
        -: 1351:			
        -: 1352:      //add embargo token to selected supply pile
    #####: 1353:      state->embargoTokens[choice1]++;
        -: 1354:			
        -: 1355:      //trash card
    #####: 1356:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1357:      return 0;
        -: 1358:		
        -: 1359:    case outpost:
        -: 1360:      //set outpost flag
    #####: 1361:      state->outpostPlayed++;
        -: 1362:			
        -: 1363:      //discard card
    #####: 1364:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:      return 0;
        -: 1366:		
        -: 1367:    case salvager:
        -: 1368:      //+1 buy
    #####: 1369:      state->numBuys++;
        -: 1370:			
    #####: 1371:      if (choice1)
        -: 1372:	{
        -: 1373:	  //gain coins equal to trashed card
    #####: 1374:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1375:	  //trash card
    #####: 1376:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1377:	}
        -: 1378:			
        -: 1379:      //discard card
    #####: 1380:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1381:      return 0;
        -: 1382:		
        -: 1383:    case sea_hag:
    #####: 1384:      for (i = 0; i < state->numPlayers; i++){
    #####: 1385:	if (i != currentPlayer){
    #####: 1386:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1387:	  state->discardCount[i]++;
    #####: 1388:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1389:	}
        -: 1390:      }
    #####: 1391:      return 0;
        -: 1392:		
        -: 1393:    case treasure_map:
        -: 1394:      //search hand for another treasure_map
    #####: 1395:      index = -1;
    #####: 1396:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1397:	{
    #####: 1398:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1399:	    {
    #####: 1400:	      index = i;
    #####: 1401:	      break;
        -: 1402:	    }
        -: 1403:	}
    #####: 1404:      if (index > -1)
        -: 1405:	{
        -: 1406:	  //trash both treasure cards
    #####: 1407:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1408:	  discardCard(index, currentPlayer, state, 1);
        -: 1409:
        -: 1410:	  //gain 4 Gold cards
    #####: 1411:	  for (i = 0; i < 4; i++)
        -: 1412:	    {
    #####: 1413:	      gainCard(gold, state, 1, currentPlayer);
        -: 1414:	    }
        -: 1415:				
        -: 1416:	  //return success
    #####: 1417:	  return 1;
        -: 1418:	}
        -: 1419:			
        -: 1420:      //no second treasure_map found in hand
    #####: 1421:      return -1;
        -: 1422:    }
        -: 1423:	
    #####: 1424:  return -1;
        -: 1425:}
        -: 1426:
        -: 1427:/********** END of cardEffct **********/
        -: 1428:
    #####: 1429:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1430:{
        -: 1431:	
        -: 1432:  //if card is not trashed, added to Played pile 
    #####: 1433:  if (trashFlag < 1)
        -: 1434:    {
        -: 1435:      //add card to played pile
    #####: 1436:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1437:      state->playedCardCount++;
        -: 1438:    }
        -: 1439:	
        -: 1440:  //set played card to -1
    #####: 1441:  state->hand[currentPlayer][handPos] = -1;
        -: 1442:	
        -: 1443:  //remove card from player's hand
    #####: 1444:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1445:    {
        -: 1446:      //reduce number of cards in hand
    #####: 1447:      state->handCount[currentPlayer]--;
        -: 1448:    }
    #####: 1449:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1450:    {
        -: 1451:      //reduce number of cards in hand
    #####: 1452:      state->handCount[currentPlayer]--;
        -: 1453:    }
        -: 1454:  else 	
        -: 1455:    {
        -: 1456:      //replace discarded card with last card in hand
    #####: 1457:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1458:      //set last card to -1
    #####: 1459:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1460:      //reduce number of cards in hand
    #####: 1461:      state->handCount[currentPlayer]--;
        -: 1462:    }
        -: 1463:	
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
    #####: 1467:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1468:{
        -: 1469:  //Note: supplyPos is enum of choosen card
        -: 1470:	
        -: 1471:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1472:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1473:    {
    #####: 1474:      return -1;
        -: 1475:    }
        -: 1476:	
        -: 1477:  //added card for [whoseTurn] current player:
        -: 1478:  // toFlag = 0 : add to discard
        -: 1479:  // toFlag = 1 : add to deck
        -: 1480:  // toFlag = 2 : add to hand
        -: 1481:
    #####: 1482:  if (toFlag == 1)
        -: 1483:    {
    #####: 1484:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1485:      state->deckCount[player]++;
        -: 1486:    }
    #####: 1487:  else if (toFlag == 2)
        -: 1488:    {
    #####: 1489:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1490:      state->handCount[player]++;
        -: 1491:    }
        -: 1492:  else
        -: 1493:    {
    #####: 1494:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1495:      state->discardCount[player]++;
        -: 1496:    }
        -: 1497:	
        -: 1498:  //decrease number in supply pile
    #####: 1499:  state->supplyCount[supplyPos]--;
        -: 1500:	 
    #####: 1501:  return 0;
        -: 1502:}
        -: 1503:
        -: 1504:/***** Use this function for Unit test 2 *****/
     1091: 1505:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1506:{
        -: 1507:  int i;
        -: 1508:	
        -: 1509:  //reset coin count
     1091: 1510:  state->coins = 0;
        -: 1511:
        -: 1512:  //add coins for each Treasure card in player's hand
     6546: 1513:  for (i = 0; i < state->handCount[player]; i++)
        -: 1514:    {
     5455: 1515:      if (state->hand[player][i] == copper)
        -: 1516:	{
     4364: 1517:	  state->coins += 1;
        -: 1518:	}
     1091: 1519:      else if (state->hand[player][i] == silver)
        -: 1520:	{
    #####: 1521:	  state->coins += 2;
        -: 1522:	}
     1091: 1523:      else if (state->hand[player][i] == gold)
        -: 1524:	{
    #####: 1525:	  state->coins += 3;
        -: 1526:	}	
        -: 1527:    }	
        -: 1528:
        -: 1529:  //add bonus
     1091: 1530:  state->coins += bonus;
        -: 1531:
     1091: 1532:  return 0;
        -: 1533:}
        -: 1534:
        -: 1535:
        -: 1536://end of dominion.c
        -: 1537:
TESTING Adventuer_card():
Player: 0, Hand Size: 0, Deck Size: 0, Discard Size: 0, Expected: 0, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 0, Discard Size: 1, Expected: 1, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 0, Discard Size: 2, Expected: 2, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 0, Discard Size: 3, Expected: 3, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 0, Discard Size: 4, Expected: 4, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 0, Discard Size: 5, Expected: 5, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 0, Discard Size: 6, Expected: 6, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 0, Discard Size: 7, Expected: 7, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 0, Discard Size: 8, Expected: 8, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 0, Discard Size: 9, Expected: 9, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 0, Discard Size: 10, Expected: 10, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 1, Discard Size: 0, Expected: 1, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 1, Discard Size: 1, Expected: 2, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 1, Discard Size: 2, Expected: 3, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 1, Discard Size: 3, Expected: 4, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 1, Discard Size: 4, Expected: 5, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 1, Discard Size: 5, Expected: 6, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 1, Discard Size: 6, Expected: 7, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 1, Discard Size: 7, Expected: 8, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 1, Discard Size: 8, Expected: 9, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 1, Discard Size: 9, Expected: 10, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 1, Discard Size: 10, Expected: 11, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 2, Discard Size: 0, Expected: 2, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 2, Discard Size: 1, Expected: 3, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 2, Discard Size: 2, Expected: 4, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 2, Discard Size: 3, Expected: 5, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 2, Discard Size: 4, Expected: 6, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 2, Discard Size: 5, Expected: 7, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 2, Discard Size: 6, Expected: 8, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 2, Discard Size: 7, Expected: 9, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 2, Discard Size: 8, Expected: 10, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 2, Discard Size: 9, Expected: 11, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 2, Discard Size: 10, Expected: 12, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 3, Discard Size: 0, Expected: 3, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 3, Discard Size: 1, Expected: 4, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 3, Discard Size: 2, Expected: 5, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 3, Discard Size: 3, Expected: 6, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 3, Discard Size: 4, Expected: 7, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 3, Discard Size: 5, Expected: 8, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 3, Discard Size: 6, Expected: 9, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 3, Discard Size: 7, Expected: 10, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 3, Discard Size: 8, Expected: 11, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 3, Discard Size: 9, Expected: 12, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 3, Discard Size: 10, Expected: 13, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 4, Discard Size: 0, Expected: 4, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 4, Discard Size: 1, Expected: 5, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 4, Discard Size: 2, Expected: 6, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 4, Discard Size: 3, Expected: 7, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 4, Discard Size: 4, Expected: 8, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 4, Discard Size: 5, Expected: 9, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 4, Discard Size: 6, Expected: 10, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 4, Discard Size: 7, Expected: 11, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 4, Discard Size: 8, Expected: 12, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 4, Discard Size: 9, Expected: 13, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 4, Discard Size: 10, Expected: 14, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 5, Discard Size: 0, Expected: 5, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 5, Discard Size: 1, Expected: 6, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 5, Discard Size: 2, Expected: 7, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 5, Discard Size: 3, Expected: 8, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 5, Discard Size: 4, Expected: 9, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 5, Discard Size: 5, Expected: 10, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 5, Discard Size: 6, Expected: 11, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 5, Discard Size: 7, Expected: 12, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 5, Discard Size: 8, Expected: 13, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 5, Discard Size: 9, Expected: 14, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 5, Discard Size: 10, Expected: 15, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 6, Discard Size: 0, Expected: 6, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 6, Discard Size: 1, Expected: 7, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 6, Discard Size: 2, Expected: 8, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 6, Discard Size: 3, Expected: 9, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 6, Discard Size: 4, Expected: 10, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 6, Discard Size: 5, Expected: 11, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 6, Discard Size: 6, Expected: 12, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 6, Discard Size: 7, Expected: 13, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 6, Discard Size: 8, Expected: 14, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 6, Discard Size: 9, Expected: 15, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 6, Discard Size: 10, Expected: 16, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 7, Discard Size: 0, Expected: 7, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 7, Discard Size: 1, Expected: 8, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 7, Discard Size: 2, Expected: 9, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 7, Discard Size: 3, Expected: 10, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 7, Discard Size: 4, Expected: 11, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 7, Discard Size: 5, Expected: 12, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 7, Discard Size: 6, Expected: 13, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 7, Discard Size: 7, Expected: 14, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 7, Discard Size: 8, Expected: 15, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 7, Discard Size: 9, Expected: 16, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 7, Discard Size: 10, Expected: 17, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 8, Discard Size: 0, Expected: 8, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 8, Discard Size: 1, Expected: 9, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 8, Discard Size: 2, Expected: 10, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 8, Discard Size: 3, Expected: 11, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 8, Discard Size: 4, Expected: 12, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 8, Discard Size: 5, Expected: 13, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 8, Discard Size: 6, Expected: 14, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 8, Discard Size: 7, Expected: 15, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 8, Discard Size: 8, Expected: 16, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 8, Discard Size: 9, Expected: 17, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 8, Discard Size: 10, Expected: 18, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 9, Discard Size: 0, Expected: 9, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 9, Discard Size: 1, Expected: 10, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 9, Discard Size: 2, Expected: 11, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 9, Discard Size: 3, Expected: 12, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 9, Discard Size: 4, Expected: 13, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 9, Discard Size: 5, Expected: 14, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 9, Discard Size: 6, Expected: 15, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 9, Discard Size: 7, Expected: 16, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 9, Discard Size: 8, Expected: 17, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 9, Discard Size: 9, Expected: 18, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 9, Discard Size: 10, Expected: 19, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 10, Discard Size: 0, Expected: 10, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 10, Discard Size: 1, Expected: 11, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 10, Discard Size: 2, Expected: 12, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 10, Discard Size: 3, Expected: 13, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 10, Discard Size: 4, Expected: 14, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 10, Discard Size: 5, Expected: 15, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 10, Discard Size: 6, Expected: 16, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 10, Discard Size: 7, Expected: 17, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 10, Discard Size: 8, Expected: 18, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 10, Discard Size: 9, Expected: 19, Result: Passed
Player: 0, Hand Size: 0, Deck Size: 10, Discard Size: 10, Expected: 20, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 0, Discard Size: 0, Expected: 1, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 0, Discard Size: 1, Expected: 2, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 0, Discard Size: 2, Expected: 3, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 0, Discard Size: 3, Expected: 4, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 0, Discard Size: 4, Expected: 5, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 0, Discard Size: 5, Expected: 6, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 0, Discard Size: 6, Expected: 7, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 0, Discard Size: 7, Expected: 8, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 0, Discard Size: 8, Expected: 9, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 0, Discard Size: 9, Expected: 10, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 0, Discard Size: 10, Expected: 11, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 1, Discard Size: 0, Expected: 2, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 1, Discard Size: 1, Expected: 3, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 1, Discard Size: 2, Expected: 4, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 1, Discard Size: 3, Expected: 5, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 1, Discard Size: 4, Expected: 6, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 1, Discard Size: 5, Expected: 7, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 1, Discard Size: 6, Expected: 8, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 1, Discard Size: 7, Expected: 9, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 1, Discard Size: 8, Expected: 10, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 1, Discard Size: 9, Expected: 11, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 1, Discard Size: 10, Expected: 12, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 2, Discard Size: 0, Expected: 3, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 2, Discard Size: 1, Expected: 4, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 2, Discard Size: 2, Expected: 5, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 2, Discard Size: 3, Expected: 6, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 2, Discard Size: 4, Expected: 7, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 2, Discard Size: 5, Expected: 8, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 2, Discard Size: 6, Expected: 9, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 2, Discard Size: 7, Expected: 10, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 2, Discard Size: 8, Expected: 11, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 2, Discard Size: 9, Expected: 12, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 2, Discard Size: 10, Expected: 13, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 3, Discard Size: 0, Expected: 4, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 3, Discard Size: 1, Expected: 5, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 3, Discard Size: 2, Expected: 6, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 3, Discard Size: 3, Expected: 7, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 3, Discard Size: 4, Expected: 8, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 3, Discard Size: 5, Expected: 9, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 3, Discard Size: 6, Expected: 10, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 3, Discard Size: 7, Expected: 11, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 3, Discard Size: 8, Expected: 12, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 3, Discard Size: 9, Expected: 13, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 3, Discard Size: 10, Expected: 14, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 4, Discard Size: 0, Expected: 5, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 4, Discard Size: 1, Expected: 6, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 4, Discard Size: 2, Expected: 7, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 4, Discard Size: 3, Expected: 8, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 4, Discard Size: 4, Expected: 9, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 4, Discard Size: 5, Expected: 10, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 4, Discard Size: 6, Expected: 11, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 4, Discard Size: 7, Expected: 12, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 4, Discard Size: 8, Expected: 13, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 4, Discard Size: 9, Expected: 14, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 4, Discard Size: 10, Expected: 15, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 5, Discard Size: 0, Expected: 6, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 5, Discard Size: 1, Expected: 7, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 5, Discard Size: 2, Expected: 8, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 5, Discard Size: 3, Expected: 9, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 5, Discard Size: 4, Expected: 10, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 5, Discard Size: 5, Expected: 11, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 5, Discard Size: 6, Expected: 12, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 5, Discard Size: 7, Expected: 13, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 5, Discard Size: 8, Expected: 14, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 5, Discard Size: 9, Expected: 15, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 5, Discard Size: 10, Expected: 16, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 6, Discard Size: 0, Expected: 7, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 6, Discard Size: 1, Expected: 8, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 6, Discard Size: 2, Expected: 9, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 6, Discard Size: 3, Expected: 10, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 6, Discard Size: 4, Expected: 11, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 6, Discard Size: 5, Expected: 12, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 6, Discard Size: 6, Expected: 13, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 6, Discard Size: 7, Expected: 14, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 6, Discard Size: 8, Expected: 15, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 6, Discard Size: 9, Expected: 16, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 6, Discard Size: 10, Expected: 17, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 7, Discard Size: 0, Expected: 8, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 7, Discard Size: 1, Expected: 9, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 7, Discard Size: 2, Expected: 10, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 7, Discard Size: 3, Expected: 11, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 7, Discard Size: 4, Expected: 12, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 7, Discard Size: 5, Expected: 13, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 7, Discard Size: 6, Expected: 14, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 7, Discard Size: 7, Expected: 15, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 7, Discard Size: 8, Expected: 16, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 7, Discard Size: 9, Expected: 17, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 7, Discard Size: 10, Expected: 18, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 8, Discard Size: 0, Expected: 9, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 8, Discard Size: 1, Expected: 10, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 8, Discard Size: 2, Expected: 11, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 8, Discard Size: 3, Expected: 12, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 8, Discard Size: 4, Expected: 13, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 8, Discard Size: 5, Expected: 14, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 8, Discard Size: 6, Expected: 15, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 8, Discard Size: 7, Expected: 16, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 8, Discard Size: 8, Expected: 17, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 8, Discard Size: 9, Expected: 18, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 8, Discard Size: 10, Expected: 19, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 9, Discard Size: 0, Expected: 10, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 9, Discard Size: 1, Expected: 11, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 9, Discard Size: 2, Expected: 12, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 9, Discard Size: 3, Expected: 13, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 9, Discard Size: 4, Expected: 14, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 9, Discard Size: 5, Expected: 15, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 9, Discard Size: 6, Expected: 16, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 9, Discard Size: 7, Expected: 17, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 9, Discard Size: 8, Expected: 18, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 9, Discard Size: 9, Expected: 19, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 9, Discard Size: 10, Expected: 20, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 10, Discard Size: 0, Expected: 11, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 10, Discard Size: 1, Expected: 12, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 10, Discard Size: 2, Expected: 13, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 10, Discard Size: 3, Expected: 14, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 10, Discard Size: 4, Expected: 15, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 10, Discard Size: 5, Expected: 16, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 10, Discard Size: 6, Expected: 17, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 10, Discard Size: 7, Expected: 18, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 10, Discard Size: 8, Expected: 19, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 10, Discard Size: 9, Expected: 20, Result: Passed
Player: 0, Hand Size: 1, Deck Size: 10, Discard Size: 10, Expected: 21, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 0, Discard Size: 0, Expected: 2, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 0, Discard Size: 1, Expected: 3, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 0, Discard Size: 2, Expected: 4, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 0, Discard Size: 3, Expected: 5, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 0, Discard Size: 4, Expected: 6, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 0, Discard Size: 5, Expected: 7, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 0, Discard Size: 6, Expected: 8, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 0, Discard Size: 7, Expected: 9, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 0, Discard Size: 8, Expected: 10, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 0, Discard Size: 9, Expected: 11, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 0, Discard Size: 10, Expected: 12, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 1, Discard Size: 0, Expected: 3, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 1, Discard Size: 1, Expected: 4, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 1, Discard Size: 2, Expected: 5, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 1, Discard Size: 3, Expected: 6, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 1, Discard Size: 4, Expected: 7, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 1, Discard Size: 5, Expected: 8, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 1, Discard Size: 6, Expected: 9, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 1, Discard Size: 7, Expected: 10, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 1, Discard Size: 8, Expected: 11, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 1, Discard Size: 9, Expected: 12, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 1, Discard Size: 10, Expected: 13, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 2, Discard Size: 0, Expected: 4, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 2, Discard Size: 1, Expected: 5, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 2, Discard Size: 2, Expected: 6, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 2, Discard Size: 3, Expected: 7, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 2, Discard Size: 4, Expected: 8, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 2, Discard Size: 5, Expected: 9, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 2, Discard Size: 6, Expected: 10, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 2, Discard Size: 7, Expected: 11, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 2, Discard Size: 8, Expected: 12, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 2, Discard Size: 9, Expected: 13, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 2, Discard Size: 10, Expected: 14, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 3, Discard Size: 0, Expected: 5, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 3, Discard Size: 1, Expected: 6, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 3, Discard Size: 2, Expected: 7, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 3, Discard Size: 3, Expected: 8, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 3, Discard Size: 4, Expected: 9, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 3, Discard Size: 5, Expected: 10, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 3, Discard Size: 6, Expected: 11, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 3, Discard Size: 7, Expected: 12, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 3, Discard Size: 8, Expected: 13, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 3, Discard Size: 9, Expected: 14, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 3, Discard Size: 10, Expected: 15, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 4, Discard Size: 0, Expected: 6, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 4, Discard Size: 1, Expected: 7, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 4, Discard Size: 2, Expected: 8, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 4, Discard Size: 3, Expected: 9, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 4, Discard Size: 4, Expected: 10, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 4, Discard Size: 5, Expected: 11, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 4, Discard Size: 6, Expected: 12, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 4, Discard Size: 7, Expected: 13, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 4, Discard Size: 8, Expected: 14, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 4, Discard Size: 9, Expected: 15, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 4, Discard Size: 10, Expected: 16, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 5, Discard Size: 0, Expected: 7, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 5, Discard Size: 1, Expected: 8, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 5, Discard Size: 2, Expected: 9, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 5, Discard Size: 3, Expected: 10, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 5, Discard Size: 4, Expected: 11, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 5, Discard Size: 5, Expected: 12, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 5, Discard Size: 6, Expected: 13, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 5, Discard Size: 7, Expected: 14, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 5, Discard Size: 8, Expected: 15, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 5, Discard Size: 9, Expected: 16, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 5, Discard Size: 10, Expected: 17, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 6, Discard Size: 0, Expected: 8, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 6, Discard Size: 1, Expected: 9, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 6, Discard Size: 2, Expected: 10, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 6, Discard Size: 3, Expected: 11, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 6, Discard Size: 4, Expected: 12, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 6, Discard Size: 5, Expected: 13, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 6, Discard Size: 6, Expected: 14, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 6, Discard Size: 7, Expected: 15, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 6, Discard Size: 8, Expected: 16, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 6, Discard Size: 9, Expected: 17, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 6, Discard Size: 10, Expected: 18, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 7, Discard Size: 0, Expected: 9, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 7, Discard Size: 1, Expected: 10, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 7, Discard Size: 2, Expected: 11, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 7, Discard Size: 3, Expected: 12, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 7, Discard Size: 4, Expected: 13, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 7, Discard Size: 5, Expected: 14, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 7, Discard Size: 6, Expected: 15, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 7, Discard Size: 7, Expected: 16, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 7, Discard Size: 8, Expected: 17, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 7, Discard Size: 9, Expected: 18, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 7, Discard Size: 10, Expected: 19, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 8, Discard Size: 0, Expected: 10, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 8, Discard Size: 1, Expected: 11, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 8, Discard Size: 2, Expected: 12, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 8, Discard Size: 3, Expected: 13, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 8, Discard Size: 4, Expected: 14, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 8, Discard Size: 5, Expected: 15, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 8, Discard Size: 6, Expected: 16, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 8, Discard Size: 7, Expected: 17, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 8, Discard Size: 8, Expected: 18, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 8, Discard Size: 9, Expected: 19, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 8, Discard Size: 10, Expected: 20, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 9, Discard Size: 0, Expected: 11, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 9, Discard Size: 1, Expected: 12, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 9, Discard Size: 2, Expected: 13, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 9, Discard Size: 3, Expected: 14, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 9, Discard Size: 4, Expected: 15, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 9, Discard Size: 5, Expected: 16, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 9, Discard Size: 6, Expected: 17, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 9, Discard Size: 7, Expected: 18, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 9, Discard Size: 8, Expected: 19, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 9, Discard Size: 9, Expected: 20, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 9, Discard Size: 10, Expected: 21, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 10, Discard Size: 0, Expected: 12, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 10, Discard Size: 1, Expected: 13, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 10, Discard Size: 2, Expected: 14, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 10, Discard Size: 3, Expected: 15, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 10, Discard Size: 4, Expected: 16, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 10, Discard Size: 5, Expected: 17, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 10, Discard Size: 6, Expected: 18, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 10, Discard Size: 7, Expected: 19, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 10, Discard Size: 8, Expected: 20, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 10, Discard Size: 9, Expected: 21, Result: Passed
Player: 0, Hand Size: 2, Deck Size: 10, Discard Size: 10, Expected: 22, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 0, Discard Size: 0, Expected: 3, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 0, Discard Size: 1, Expected: 4, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 0, Discard Size: 2, Expected: 5, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 0, Discard Size: 3, Expected: 6, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 0, Discard Size: 4, Expected: 7, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 0, Discard Size: 5, Expected: 8, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 0, Discard Size: 6, Expected: 9, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 0, Discard Size: 7, Expected: 10, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 0, Discard Size: 8, Expected: 11, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 0, Discard Size: 9, Expected: 12, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 0, Discard Size: 10, Expected: 13, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 1, Discard Size: 0, Expected: 4, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 1, Discard Size: 1, Expected: 5, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 1, Discard Size: 2, Expected: 6, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 1, Discard Size: 3, Expected: 7, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 1, Discard Size: 4, Expected: 8, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 1, Discard Size: 5, Expected: 9, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 1, Discard Size: 6, Expected: 10, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 1, Discard Size: 7, Expected: 11, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 1, Discard Size: 8, Expected: 12, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 1, Discard Size: 9, Expected: 13, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 1, Discard Size: 10, Expected: 14, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 2, Discard Size: 0, Expected: 5, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 2, Discard Size: 1, Expected: 6, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 2, Discard Size: 2, Expected: 7, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 2, Discard Size: 3, Expected: 8, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 2, Discard Size: 4, Expected: 9, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 2, Discard Size: 5, Expected: 10, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 2, Discard Size: 6, Expected: 11, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 2, Discard Size: 7, Expected: 12, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 2, Discard Size: 8, Expected: 13, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 2, Discard Size: 9, Expected: 14, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 2, Discard Size: 10, Expected: 15, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 3, Discard Size: 0, Expected: 6, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 3, Discard Size: 1, Expected: 7, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 3, Discard Size: 2, Expected: 8, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 3, Discard Size: 3, Expected: 9, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 3, Discard Size: 4, Expected: 10, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 3, Discard Size: 5, Expected: 11, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 3, Discard Size: 6, Expected: 12, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 3, Discard Size: 7, Expected: 13, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 3, Discard Size: 8, Expected: 14, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 3, Discard Size: 9, Expected: 15, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 3, Discard Size: 10, Expected: 16, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 4, Discard Size: 0, Expected: 7, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 4, Discard Size: 1, Expected: 8, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 4, Discard Size: 2, Expected: 9, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 4, Discard Size: 3, Expected: 10, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 4, Discard Size: 4, Expected: 11, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 4, Discard Size: 5, Expected: 12, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 4, Discard Size: 6, Expected: 13, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 4, Discard Size: 7, Expected: 14, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 4, Discard Size: 8, Expected: 15, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 4, Discard Size: 9, Expected: 16, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 4, Discard Size: 10, Expected: 17, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 5, Discard Size: 0, Expected: 8, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 5, Discard Size: 1, Expected: 9, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 5, Discard Size: 2, Expected: 10, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 5, Discard Size: 3, Expected: 11, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 5, Discard Size: 4, Expected: 12, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 5, Discard Size: 5, Expected: 13, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 5, Discard Size: 6, Expected: 14, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 5, Discard Size: 7, Expected: 15, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 5, Discard Size: 8, Expected: 16, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 5, Discard Size: 9, Expected: 17, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 5, Discard Size: 10, Expected: 18, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 6, Discard Size: 0, Expected: 9, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 6, Discard Size: 1, Expected: 10, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 6, Discard Size: 2, Expected: 11, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 6, Discard Size: 3, Expected: 12, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 6, Discard Size: 4, Expected: 13, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 6, Discard Size: 5, Expected: 14, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 6, Discard Size: 6, Expected: 15, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 6, Discard Size: 7, Expected: 16, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 6, Discard Size: 8, Expected: 17, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 6, Discard Size: 9, Expected: 18, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 6, Discard Size: 10, Expected: 19, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 7, Discard Size: 0, Expected: 10, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 7, Discard Size: 1, Expected: 11, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 7, Discard Size: 2, Expected: 12, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 7, Discard Size: 3, Expected: 13, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 7, Discard Size: 4, Expected: 14, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 7, Discard Size: 5, Expected: 15, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 7, Discard Size: 6, Expected: 16, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 7, Discard Size: 7, Expected: 17, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 7, Discard Size: 8, Expected: 18, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 7, Discard Size: 9, Expected: 19, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 7, Discard Size: 10, Expected: 20, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 8, Discard Size: 0, Expected: 11, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 8, Discard Size: 1, Expected: 12, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 8, Discard Size: 2, Expected: 13, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 8, Discard Size: 3, Expected: 14, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 8, Discard Size: 4, Expected: 15, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 8, Discard Size: 5, Expected: 16, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 8, Discard Size: 6, Expected: 17, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 8, Discard Size: 7, Expected: 18, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 8, Discard Size: 8, Expected: 19, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 8, Discard Size: 9, Expected: 20, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 8, Discard Size: 10, Expected: 21, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 9, Discard Size: 0, Expected: 12, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 9, Discard Size: 1, Expected: 13, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 9, Discard Size: 2, Expected: 14, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 9, Discard Size: 3, Expected: 15, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 9, Discard Size: 4, Expected: 16, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 9, Discard Size: 5, Expected: 17, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 9, Discard Size: 6, Expected: 18, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 9, Discard Size: 7, Expected: 19, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 9, Discard Size: 8, Expected: 20, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 9, Discard Size: 9, Expected: 21, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 9, Discard Size: 10, Expected: 22, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 10, Discard Size: 0, Expected: 13, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 10, Discard Size: 1, Expected: 14, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 10, Discard Size: 2, Expected: 15, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 10, Discard Size: 3, Expected: 16, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 10, Discard Size: 4, Expected: 17, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 10, Discard Size: 5, Expected: 18, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 10, Discard Size: 6, Expected: 19, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 10, Discard Size: 7, Expected: 20, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 10, Discard Size: 8, Expected: 21, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 10, Discard Size: 9, Expected: 22, Result: Passed
Player: 0, Hand Size: 3, Deck Size: 10, Discard Size: 10, Expected: 23, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 0, Discard Size: 0, Expected: 4, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 0, Discard Size: 1, Expected: 5, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 0, Discard Size: 2, Expected: 6, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 0, Discard Size: 3, Expected: 7, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 0, Discard Size: 4, Expected: 8, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 0, Discard Size: 5, Expected: 9, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 0, Discard Size: 6, Expected: 10, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 0, Discard Size: 7, Expected: 11, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 0, Discard Size: 8, Expected: 12, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 0, Discard Size: 9, Expected: 13, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 0, Discard Size: 10, Expected: 14, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 1, Discard Size: 0, Expected: 5, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 1, Discard Size: 1, Expected: 6, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 1, Discard Size: 2, Expected: 7, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 1, Discard Size: 3, Expected: 8, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 1, Discard Size: 4, Expected: 9, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 1, Discard Size: 5, Expected: 10, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 1, Discard Size: 6, Expected: 11, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 1, Discard Size: 7, Expected: 12, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 1, Discard Size: 8, Expected: 13, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 1, Discard Size: 9, Expected: 14, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 1, Discard Size: 10, Expected: 15, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 2, Discard Size: 0, Expected: 6, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 2, Discard Size: 1, Expected: 7, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 2, Discard Size: 2, Expected: 8, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 2, Discard Size: 3, Expected: 9, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 2, Discard Size: 4, Expected: 10, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 2, Discard Size: 5, Expected: 11, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 2, Discard Size: 6, Expected: 12, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 2, Discard Size: 7, Expected: 13, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 2, Discard Size: 8, Expected: 14, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 2, Discard Size: 9, Expected: 15, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 2, Discard Size: 10, Expected: 16, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 3, Discard Size: 0, Expected: 7, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 3, Discard Size: 1, Expected: 8, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 3, Discard Size: 2, Expected: 9, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 3, Discard Size: 3, Expected: 10, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 3, Discard Size: 4, Expected: 11, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 3, Discard Size: 5, Expected: 12, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 3, Discard Size: 6, Expected: 13, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 3, Discard Size: 7, Expected: 14, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 3, Discard Size: 8, Expected: 15, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 3, Discard Size: 9, Expected: 16, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 3, Discard Size: 10, Expected: 17, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 4, Discard Size: 0, Expected: 8, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 4, Discard Size: 1, Expected: 9, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 4, Discard Size: 2, Expected: 10, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 4, Discard Size: 3, Expected: 11, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 4, Discard Size: 4, Expected: 12, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 4, Discard Size: 5, Expected: 13, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 4, Discard Size: 6, Expected: 14, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 4, Discard Size: 7, Expected: 15, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 4, Discard Size: 8, Expected: 16, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 4, Discard Size: 9, Expected: 17, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 4, Discard Size: 10, Expected: 18, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 5, Discard Size: 0, Expected: 9, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 5, Discard Size: 1, Expected: 10, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 5, Discard Size: 2, Expected: 11, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 5, Discard Size: 3, Expected: 12, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 5, Discard Size: 4, Expected: 13, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 5, Discard Size: 5, Expected: 14, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 5, Discard Size: 6, Expected: 15, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 5, Discard Size: 7, Expected: 16, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 5, Discard Size: 8, Expected: 17, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 5, Discard Size: 9, Expected: 18, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 5, Discard Size: 10, Expected: 19, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 6, Discard Size: 0, Expected: 10, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 6, Discard Size: 1, Expected: 11, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 6, Discard Size: 2, Expected: 12, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 6, Discard Size: 3, Expected: 13, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 6, Discard Size: 4, Expected: 14, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 6, Discard Size: 5, Expected: 15, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 6, Discard Size: 6, Expected: 16, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 6, Discard Size: 7, Expected: 17, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 6, Discard Size: 8, Expected: 18, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 6, Discard Size: 9, Expected: 19, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 6, Discard Size: 10, Expected: 20, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 7, Discard Size: 0, Expected: 11, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 7, Discard Size: 1, Expected: 12, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 7, Discard Size: 2, Expected: 13, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 7, Discard Size: 3, Expected: 14, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 7, Discard Size: 4, Expected: 15, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 7, Discard Size: 5, Expected: 16, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 7, Discard Size: 6, Expected: 17, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 7, Discard Size: 7, Expected: 18, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 7, Discard Size: 8, Expected: 19, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 7, Discard Size: 9, Expected: 20, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 7, Discard Size: 10, Expected: 21, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 8, Discard Size: 0, Expected: 12, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 8, Discard Size: 1, Expected: 13, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 8, Discard Size: 2, Expected: 14, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 8, Discard Size: 3, Expected: 15, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 8, Discard Size: 4, Expected: 16, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 8, Discard Size: 5, Expected: 17, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 8, Discard Size: 6, Expected: 18, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 8, Discard Size: 7, Expected: 19, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 8, Discard Size: 8, Expected: 20, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 8, Discard Size: 9, Expected: 21, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 8, Discard Size: 10, Expected: 22, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 9, Discard Size: 0, Expected: 13, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 9, Discard Size: 1, Expected: 14, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 9, Discard Size: 2, Expected: 15, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 9, Discard Size: 3, Expected: 16, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 9, Discard Size: 4, Expected: 17, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 9, Discard Size: 5, Expected: 18, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 9, Discard Size: 6, Expected: 19, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 9, Discard Size: 7, Expected: 20, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 9, Discard Size: 8, Expected: 21, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 9, Discard Size: 9, Expected: 22, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 9, Discard Size: 10, Expected: 23, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 10, Discard Size: 0, Expected: 14, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 10, Discard Size: 1, Expected: 15, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 10, Discard Size: 2, Expected: 16, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 10, Discard Size: 3, Expected: 17, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 10, Discard Size: 4, Expected: 18, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 10, Discard Size: 5, Expected: 19, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 10, Discard Size: 6, Expected: 20, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 10, Discard Size: 7, Expected: 21, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 10, Discard Size: 8, Expected: 22, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 10, Discard Size: 9, Expected: 23, Result: Passed
Player: 0, Hand Size: 4, Deck Size: 10, Discard Size: 10, Expected: 24, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 0, Discard Size: 0, Expected: 5, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 0, Discard Size: 1, Expected: 6, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 0, Discard Size: 2, Expected: 7, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 0, Discard Size: 3, Expected: 8, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 0, Discard Size: 4, Expected: 9, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 0, Discard Size: 5, Expected: 10, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 0, Discard Size: 6, Expected: 11, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 0, Discard Size: 7, Expected: 12, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 0, Discard Size: 8, Expected: 13, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 0, Discard Size: 9, Expected: 14, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 0, Discard Size: 10, Expected: 15, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 1, Discard Size: 0, Expected: 6, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 1, Discard Size: 1, Expected: 7, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 1, Discard Size: 2, Expected: 8, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 1, Discard Size: 3, Expected: 9, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 1, Discard Size: 4, Expected: 10, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 1, Discard Size: 5, Expected: 11, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 1, Discard Size: 6, Expected: 12, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 1, Discard Size: 7, Expected: 13, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 1, Discard Size: 8, Expected: 14, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 1, Discard Size: 9, Expected: 15, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 1, Discard Size: 10, Expected: 16, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 2, Discard Size: 0, Expected: 7, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 2, Discard Size: 1, Expected: 8, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 2, Discard Size: 2, Expected: 9, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 2, Discard Size: 3, Expected: 10, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 2, Discard Size: 4, Expected: 11, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 2, Discard Size: 5, Expected: 12, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 2, Discard Size: 6, Expected: 13, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 2, Discard Size: 7, Expected: 14, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 2, Discard Size: 8, Expected: 15, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 2, Discard Size: 9, Expected: 16, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 2, Discard Size: 10, Expected: 17, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 3, Discard Size: 0, Expected: 8, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 3, Discard Size: 1, Expected: 9, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 3, Discard Size: 2, Expected: 10, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 3, Discard Size: 3, Expected: 11, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 3, Discard Size: 4, Expected: 12, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 3, Discard Size: 5, Expected: 13, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 3, Discard Size: 6, Expected: 14, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 3, Discard Size: 7, Expected: 15, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 3, Discard Size: 8, Expected: 16, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 3, Discard Size: 9, Expected: 17, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 3, Discard Size: 10, Expected: 18, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 4, Discard Size: 0, Expected: 9, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 4, Discard Size: 1, Expected: 10, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 4, Discard Size: 2, Expected: 11, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 4, Discard Size: 3, Expected: 12, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 4, Discard Size: 4, Expected: 13, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 4, Discard Size: 5, Expected: 14, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 4, Discard Size: 6, Expected: 15, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 4, Discard Size: 7, Expected: 16, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 4, Discard Size: 8, Expected: 17, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 4, Discard Size: 9, Expected: 18, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 4, Discard Size: 10, Expected: 19, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 5, Discard Size: 0, Expected: 10, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 5, Discard Size: 1, Expected: 11, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 5, Discard Size: 2, Expected: 12, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 5, Discard Size: 3, Expected: 13, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 5, Discard Size: 4, Expected: 14, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 5, Discard Size: 5, Expected: 15, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 5, Discard Size: 6, Expected: 16, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 5, Discard Size: 7, Expected: 17, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 5, Discard Size: 8, Expected: 18, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 5, Discard Size: 9, Expected: 19, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 5, Discard Size: 10, Expected: 20, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 6, Discard Size: 0, Expected: 11, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 6, Discard Size: 1, Expected: 12, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 6, Discard Size: 2, Expected: 13, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 6, Discard Size: 3, Expected: 14, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 6, Discard Size: 4, Expected: 15, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 6, Discard Size: 5, Expected: 16, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 6, Discard Size: 6, Expected: 17, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 6, Discard Size: 7, Expected: 18, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 6, Discard Size: 8, Expected: 19, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 6, Discard Size: 9, Expected: 20, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 6, Discard Size: 10, Expected: 21, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 7, Discard Size: 0, Expected: 12, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 7, Discard Size: 1, Expected: 13, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 7, Discard Size: 2, Expected: 14, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 7, Discard Size: 3, Expected: 15, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 7, Discard Size: 4, Expected: 16, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 7, Discard Size: 5, Expected: 17, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 7, Discard Size: 6, Expected: 18, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 7, Discard Size: 7, Expected: 19, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 7, Discard Size: 8, Expected: 20, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 7, Discard Size: 9, Expected: 21, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 7, Discard Size: 10, Expected: 22, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 8, Discard Size: 0, Expected: 13, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 8, Discard Size: 1, Expected: 14, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 8, Discard Size: 2, Expected: 15, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 8, Discard Size: 3, Expected: 16, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 8, Discard Size: 4, Expected: 17, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 8, Discard Size: 5, Expected: 18, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 8, Discard Size: 6, Expected: 19, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 8, Discard Size: 7, Expected: 20, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 8, Discard Size: 8, Expected: 21, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 8, Discard Size: 9, Expected: 22, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 8, Discard Size: 10, Expected: 23, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 9, Discard Size: 0, Expected: 14, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 9, Discard Size: 1, Expected: 15, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 9, Discard Size: 2, Expected: 16, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 9, Discard Size: 3, Expected: 17, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 9, Discard Size: 4, Expected: 18, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 9, Discard Size: 5, Expected: 19, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 9, Discard Size: 6, Expected: 20, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 9, Discard Size: 7, Expected: 21, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 9, Discard Size: 8, Expected: 22, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 9, Discard Size: 9, Expected: 23, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 9, Discard Size: 10, Expected: 24, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 10, Discard Size: 0, Expected: 15, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 10, Discard Size: 1, Expected: 16, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 10, Discard Size: 2, Expected: 17, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 10, Discard Size: 3, Expected: 18, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 10, Discard Size: 4, Expected: 19, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 10, Discard Size: 5, Expected: 20, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 10, Discard Size: 6, Expected: 21, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 10, Discard Size: 7, Expected: 22, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 10, Discard Size: 8, Expected: 23, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 10, Discard Size: 9, Expected: 24, Result: Passed
Player: 0, Hand Size: 5, Deck Size: 10, Discard Size: 10, Expected: 25, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 0, Discard Size: 0, Expected: 6, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 0, Discard Size: 1, Expected: 7, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 0, Discard Size: 2, Expected: 8, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 0, Discard Size: 3, Expected: 9, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 0, Discard Size: 4, Expected: 10, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 0, Discard Size: 5, Expected: 11, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 0, Discard Size: 6, Expected: 12, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 0, Discard Size: 7, Expected: 13, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 0, Discard Size: 8, Expected: 14, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 0, Discard Size: 9, Expected: 15, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 0, Discard Size: 10, Expected: 16, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 1, Discard Size: 0, Expected: 7, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 1, Discard Size: 1, Expected: 8, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 1, Discard Size: 2, Expected: 9, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 1, Discard Size: 3, Expected: 10, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 1, Discard Size: 4, Expected: 11, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 1, Discard Size: 5, Expected: 12, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 1, Discard Size: 6, Expected: 13, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 1, Discard Size: 7, Expected: 14, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 1, Discard Size: 8, Expected: 15, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 1, Discard Size: 9, Expected: 16, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 1, Discard Size: 10, Expected: 17, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 2, Discard Size: 0, Expected: 8, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 2, Discard Size: 1, Expected: 9, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 2, Discard Size: 2, Expected: 10, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 2, Discard Size: 3, Expected: 11, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 2, Discard Size: 4, Expected: 12, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 2, Discard Size: 5, Expected: 13, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 2, Discard Size: 6, Expected: 14, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 2, Discard Size: 7, Expected: 15, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 2, Discard Size: 8, Expected: 16, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 2, Discard Size: 9, Expected: 17, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 2, Discard Size: 10, Expected: 18, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 3, Discard Size: 0, Expected: 9, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 3, Discard Size: 1, Expected: 10, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 3, Discard Size: 2, Expected: 11, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 3, Discard Size: 3, Expected: 12, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 3, Discard Size: 4, Expected: 13, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 3, Discard Size: 5, Expected: 14, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 3, Discard Size: 6, Expected: 15, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 3, Discard Size: 7, Expected: 16, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 3, Discard Size: 8, Expected: 17, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 3, Discard Size: 9, Expected: 18, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 3, Discard Size: 10, Expected: 19, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 4, Discard Size: 0, Expected: 10, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 4, Discard Size: 1, Expected: 11, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 4, Discard Size: 2, Expected: 12, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 4, Discard Size: 3, Expected: 13, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 4, Discard Size: 4, Expected: 14, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 4, Discard Size: 5, Expected: 15, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 4, Discard Size: 6, Expected: 16, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 4, Discard Size: 7, Expected: 17, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 4, Discard Size: 8, Expected: 18, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 4, Discard Size: 9, Expected: 19, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 4, Discard Size: 10, Expected: 20, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 5, Discard Size: 0, Expected: 11, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 5, Discard Size: 1, Expected: 12, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 5, Discard Size: 2, Expected: 13, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 5, Discard Size: 3, Expected: 14, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 5, Discard Size: 4, Expected: 15, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 5, Discard Size: 5, Expected: 16, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 5, Discard Size: 6, Expected: 17, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 5, Discard Size: 7, Expected: 18, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 5, Discard Size: 8, Expected: 19, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 5, Discard Size: 9, Expected: 20, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 5, Discard Size: 10, Expected: 21, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 6, Discard Size: 0, Expected: 12, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 6, Discard Size: 1, Expected: 13, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 6, Discard Size: 2, Expected: 14, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 6, Discard Size: 3, Expected: 15, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 6, Discard Size: 4, Expected: 16, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 6, Discard Size: 5, Expected: 17, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 6, Discard Size: 6, Expected: 18, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 6, Discard Size: 7, Expected: 19, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 6, Discard Size: 8, Expected: 20, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 6, Discard Size: 9, Expected: 21, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 6, Discard Size: 10, Expected: 22, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 7, Discard Size: 0, Expected: 13, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 7, Discard Size: 1, Expected: 14, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 7, Discard Size: 2, Expected: 15, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 7, Discard Size: 3, Expected: 16, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 7, Discard Size: 4, Expected: 17, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 7, Discard Size: 5, Expected: 18, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 7, Discard Size: 6, Expected: 19, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 7, Discard Size: 7, Expected: 20, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 7, Discard Size: 8, Expected: 21, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 7, Discard Size: 9, Expected: 22, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 7, Discard Size: 10, Expected: 23, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 8, Discard Size: 0, Expected: 14, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 8, Discard Size: 1, Expected: 15, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 8, Discard Size: 2, Expected: 16, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 8, Discard Size: 3, Expected: 17, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 8, Discard Size: 4, Expected: 18, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 8, Discard Size: 5, Expected: 19, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 8, Discard Size: 6, Expected: 20, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 8, Discard Size: 7, Expected: 21, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 8, Discard Size: 8, Expected: 22, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 8, Discard Size: 9, Expected: 23, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 8, Discard Size: 10, Expected: 24, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 9, Discard Size: 0, Expected: 15, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 9, Discard Size: 1, Expected: 16, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 9, Discard Size: 2, Expected: 17, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 9, Discard Size: 3, Expected: 18, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 9, Discard Size: 4, Expected: 19, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 9, Discard Size: 5, Expected: 20, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 9, Discard Size: 6, Expected: 21, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 9, Discard Size: 7, Expected: 22, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 9, Discard Size: 8, Expected: 23, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 9, Discard Size: 9, Expected: 24, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 9, Discard Size: 10, Expected: 25, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 10, Discard Size: 0, Expected: 16, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 10, Discard Size: 1, Expected: 17, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 10, Discard Size: 2, Expected: 18, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 10, Discard Size: 3, Expected: 19, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 10, Discard Size: 4, Expected: 20, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 10, Discard Size: 5, Expected: 21, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 10, Discard Size: 6, Expected: 22, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 10, Discard Size: 7, Expected: 23, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 10, Discard Size: 8, Expected: 24, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 10, Discard Size: 9, Expected: 25, Result: Passed
Player: 0, Hand Size: 6, Deck Size: 10, Discard Size: 10, Expected: 26, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 0, Discard Size: 0, Expected: 7, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 0, Discard Size: 1, Expected: 8, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 0, Discard Size: 2, Expected: 9, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 0, Discard Size: 3, Expected: 10, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 0, Discard Size: 4, Expected: 11, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 0, Discard Size: 5, Expected: 12, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 0, Discard Size: 6, Expected: 13, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 0, Discard Size: 7, Expected: 14, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 0, Discard Size: 8, Expected: 15, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 0, Discard Size: 9, Expected: 16, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 0, Discard Size: 10, Expected: 17, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 1, Discard Size: 0, Expected: 8, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 1, Discard Size: 1, Expected: 9, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 1, Discard Size: 2, Expected: 10, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 1, Discard Size: 3, Expected: 11, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 1, Discard Size: 4, Expected: 12, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 1, Discard Size: 5, Expected: 13, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 1, Discard Size: 6, Expected: 14, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 1, Discard Size: 7, Expected: 15, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 1, Discard Size: 8, Expected: 16, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 1, Discard Size: 9, Expected: 17, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 1, Discard Size: 10, Expected: 18, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 2, Discard Size: 0, Expected: 9, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 2, Discard Size: 1, Expected: 10, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 2, Discard Size: 2, Expected: 11, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 2, Discard Size: 3, Expected: 12, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 2, Discard Size: 4, Expected: 13, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 2, Discard Size: 5, Expected: 14, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 2, Discard Size: 6, Expected: 15, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 2, Discard Size: 7, Expected: 16, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 2, Discard Size: 8, Expected: 17, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 2, Discard Size: 9, Expected: 18, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 2, Discard Size: 10, Expected: 19, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 3, Discard Size: 0, Expected: 10, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 3, Discard Size: 1, Expected: 11, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 3, Discard Size: 2, Expected: 12, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 3, Discard Size: 3, Expected: 13, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 3, Discard Size: 4, Expected: 14, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 3, Discard Size: 5, Expected: 15, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 3, Discard Size: 6, Expected: 16, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 3, Discard Size: 7, Expected: 17, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 3, Discard Size: 8, Expected: 18, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 3, Discard Size: 9, Expected: 19, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 3, Discard Size: 10, Expected: 20, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 4, Discard Size: 0, Expected: 11, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 4, Discard Size: 1, Expected: 12, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 4, Discard Size: 2, Expected: 13, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 4, Discard Size: 3, Expected: 14, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 4, Discard Size: 4, Expected: 15, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 4, Discard Size: 5, Expected: 16, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 4, Discard Size: 6, Expected: 17, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 4, Discard Size: 7, Expected: 18, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 4, Discard Size: 8, Expected: 19, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 4, Discard Size: 9, Expected: 20, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 4, Discard Size: 10, Expected: 21, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 5, Discard Size: 0, Expected: 12, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 5, Discard Size: 1, Expected: 13, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 5, Discard Size: 2, Expected: 14, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 5, Discard Size: 3, Expected: 15, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 5, Discard Size: 4, Expected: 16, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 5, Discard Size: 5, Expected: 17, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 5, Discard Size: 6, Expected: 18, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 5, Discard Size: 7, Expected: 19, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 5, Discard Size: 8, Expected: 20, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 5, Discard Size: 9, Expected: 21, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 5, Discard Size: 10, Expected: 22, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 6, Discard Size: 0, Expected: 13, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 6, Discard Size: 1, Expected: 14, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 6, Discard Size: 2, Expected: 15, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 6, Discard Size: 3, Expected: 16, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 6, Discard Size: 4, Expected: 17, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 6, Discard Size: 5, Expected: 18, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 6, Discard Size: 6, Expected: 19, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 6, Discard Size: 7, Expected: 20, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 6, Discard Size: 8, Expected: 21, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 6, Discard Size: 9, Expected: 22, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 6, Discard Size: 10, Expected: 23, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 7, Discard Size: 0, Expected: 14, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 7, Discard Size: 1, Expected: 15, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 7, Discard Size: 2, Expected: 16, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 7, Discard Size: 3, Expected: 17, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 7, Discard Size: 4, Expected: 18, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 7, Discard Size: 5, Expected: 19, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 7, Discard Size: 6, Expected: 20, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 7, Discard Size: 7, Expected: 21, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 7, Discard Size: 8, Expected: 22, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 7, Discard Size: 9, Expected: 23, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 7, Discard Size: 10, Expected: 24, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 8, Discard Size: 0, Expected: 15, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 8, Discard Size: 1, Expected: 16, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 8, Discard Size: 2, Expected: 17, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 8, Discard Size: 3, Expected: 18, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 8, Discard Size: 4, Expected: 19, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 8, Discard Size: 5, Expected: 20, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 8, Discard Size: 6, Expected: 21, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 8, Discard Size: 7, Expected: 22, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 8, Discard Size: 8, Expected: 23, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 8, Discard Size: 9, Expected: 24, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 8, Discard Size: 10, Expected: 25, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 9, Discard Size: 0, Expected: 16, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 9, Discard Size: 1, Expected: 17, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 9, Discard Size: 2, Expected: 18, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 9, Discard Size: 3, Expected: 19, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 9, Discard Size: 4, Expected: 20, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 9, Discard Size: 5, Expected: 21, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 9, Discard Size: 6, Expected: 22, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 9, Discard Size: 7, Expected: 23, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 9, Discard Size: 8, Expected: 24, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 9, Discard Size: 9, Expected: 25, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 9, Discard Size: 10, Expected: 26, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 10, Discard Size: 0, Expected: 17, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 10, Discard Size: 1, Expected: 18, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 10, Discard Size: 2, Expected: 19, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 10, Discard Size: 3, Expected: 20, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 10, Discard Size: 4, Expected: 21, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 10, Discard Size: 5, Expected: 22, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 10, Discard Size: 6, Expected: 23, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 10, Discard Size: 7, Expected: 24, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 10, Discard Size: 8, Expected: 25, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 10, Discard Size: 9, Expected: 26, Result: Passed
Player: 0, Hand Size: 7, Deck Size: 10, Discard Size: 10, Expected: 27, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 0, Discard Size: 0, Expected: 8, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 0, Discard Size: 1, Expected: 9, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 0, Discard Size: 2, Expected: 10, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 0, Discard Size: 3, Expected: 11, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 0, Discard Size: 4, Expected: 12, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 0, Discard Size: 5, Expected: 13, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 0, Discard Size: 6, Expected: 14, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 0, Discard Size: 7, Expected: 15, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 0, Discard Size: 8, Expected: 16, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 0, Discard Size: 9, Expected: 17, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 0, Discard Size: 10, Expected: 18, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 1, Discard Size: 0, Expected: 9, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 1, Discard Size: 1, Expected: 10, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 1, Discard Size: 2, Expected: 11, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 1, Discard Size: 3, Expected: 12, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 1, Discard Size: 4, Expected: 13, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 1, Discard Size: 5, Expected: 14, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 1, Discard Size: 6, Expected: 15, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 1, Discard Size: 7, Expected: 16, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 1, Discard Size: 8, Expected: 17, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 1, Discard Size: 9, Expected: 18, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 1, Discard Size: 10, Expected: 19, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 2, Discard Size: 0, Expected: 10, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 2, Discard Size: 1, Expected: 11, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 2, Discard Size: 2, Expected: 12, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 2, Discard Size: 3, Expected: 13, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 2, Discard Size: 4, Expected: 14, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 2, Discard Size: 5, Expected: 15, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 2, Discard Size: 6, Expected: 16, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 2, Discard Size: 7, Expected: 17, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 2, Discard Size: 8, Expected: 18, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 2, Discard Size: 9, Expected: 19, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 2, Discard Size: 10, Expected: 20, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 3, Discard Size: 0, Expected: 11, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 3, Discard Size: 1, Expected: 12, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 3, Discard Size: 2, Expected: 13, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 3, Discard Size: 3, Expected: 14, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 3, Discard Size: 4, Expected: 15, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 3, Discard Size: 5, Expected: 16, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 3, Discard Size: 6, Expected: 17, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 3, Discard Size: 7, Expected: 18, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 3, Discard Size: 8, Expected: 19, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 3, Discard Size: 9, Expected: 20, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 3, Discard Size: 10, Expected: 21, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 4, Discard Size: 0, Expected: 12, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 4, Discard Size: 1, Expected: 13, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 4, Discard Size: 2, Expected: 14, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 4, Discard Size: 3, Expected: 15, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 4, Discard Size: 4, Expected: 16, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 4, Discard Size: 5, Expected: 17, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 4, Discard Size: 6, Expected: 18, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 4, Discard Size: 7, Expected: 19, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 4, Discard Size: 8, Expected: 20, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 4, Discard Size: 9, Expected: 21, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 4, Discard Size: 10, Expected: 22, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 5, Discard Size: 0, Expected: 13, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 5, Discard Size: 1, Expected: 14, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 5, Discard Size: 2, Expected: 15, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 5, Discard Size: 3, Expected: 16, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 5, Discard Size: 4, Expected: 17, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 5, Discard Size: 5, Expected: 18, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 5, Discard Size: 6, Expected: 19, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 5, Discard Size: 7, Expected: 20, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 5, Discard Size: 8, Expected: 21, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 5, Discard Size: 9, Expected: 22, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 5, Discard Size: 10, Expected: 23, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 6, Discard Size: 0, Expected: 14, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 6, Discard Size: 1, Expected: 15, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 6, Discard Size: 2, Expected: 16, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 6, Discard Size: 3, Expected: 17, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 6, Discard Size: 4, Expected: 18, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 6, Discard Size: 5, Expected: 19, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 6, Discard Size: 6, Expected: 20, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 6, Discard Size: 7, Expected: 21, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 6, Discard Size: 8, Expected: 22, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 6, Discard Size: 9, Expected: 23, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 6, Discard Size: 10, Expected: 24, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 7, Discard Size: 0, Expected: 15, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 7, Discard Size: 1, Expected: 16, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 7, Discard Size: 2, Expected: 17, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 7, Discard Size: 3, Expected: 18, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 7, Discard Size: 4, Expected: 19, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 7, Discard Size: 5, Expected: 20, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 7, Discard Size: 6, Expected: 21, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 7, Discard Size: 7, Expected: 22, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 7, Discard Size: 8, Expected: 23, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 7, Discard Size: 9, Expected: 24, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 7, Discard Size: 10, Expected: 25, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 8, Discard Size: 0, Expected: 16, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 8, Discard Size: 1, Expected: 17, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 8, Discard Size: 2, Expected: 18, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 8, Discard Size: 3, Expected: 19, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 8, Discard Size: 4, Expected: 20, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 8, Discard Size: 5, Expected: 21, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 8, Discard Size: 6, Expected: 22, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 8, Discard Size: 7, Expected: 23, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 8, Discard Size: 8, Expected: 24, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 8, Discard Size: 9, Expected: 25, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 8, Discard Size: 10, Expected: 26, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 9, Discard Size: 0, Expected: 17, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 9, Discard Size: 1, Expected: 18, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 9, Discard Size: 2, Expected: 19, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 9, Discard Size: 3, Expected: 20, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 9, Discard Size: 4, Expected: 21, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 9, Discard Size: 5, Expected: 22, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 9, Discard Size: 6, Expected: 23, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 9, Discard Size: 7, Expected: 24, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 9, Discard Size: 8, Expected: 25, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 9, Discard Size: 9, Expected: 26, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 9, Discard Size: 10, Expected: 27, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 10, Discard Size: 0, Expected: 18, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 10, Discard Size: 1, Expected: 19, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 10, Discard Size: 2, Expected: 20, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 10, Discard Size: 3, Expected: 21, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 10, Discard Size: 4, Expected: 22, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 10, Discard Size: 5, Expected: 23, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 10, Discard Size: 6, Expected: 24, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 10, Discard Size: 7, Expected: 25, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 10, Discard Size: 8, Expected: 26, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 10, Discard Size: 9, Expected: 27, Result: Passed
Player: 0, Hand Size: 8, Deck Size: 10, Discard Size: 10, Expected: 28, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 0, Discard Size: 0, Expected: 9, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 0, Discard Size: 1, Expected: 10, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 0, Discard Size: 2, Expected: 11, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 0, Discard Size: 3, Expected: 12, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 0, Discard Size: 4, Expected: 13, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 0, Discard Size: 5, Expected: 14, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 0, Discard Size: 6, Expected: 15, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 0, Discard Size: 7, Expected: 16, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 0, Discard Size: 8, Expected: 17, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 0, Discard Size: 9, Expected: 18, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 0, Discard Size: 10, Expected: 19, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 1, Discard Size: 0, Expected: 10, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 1, Discard Size: 1, Expected: 11, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 1, Discard Size: 2, Expected: 12, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 1, Discard Size: 3, Expected: 13, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 1, Discard Size: 4, Expected: 14, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 1, Discard Size: 5, Expected: 15, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 1, Discard Size: 6, Expected: 16, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 1, Discard Size: 7, Expected: 17, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 1, Discard Size: 8, Expected: 18, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 1, Discard Size: 9, Expected: 19, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 1, Discard Size: 10, Expected: 20, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 2, Discard Size: 0, Expected: 11, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 2, Discard Size: 1, Expected: 12, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 2, Discard Size: 2, Expected: 13, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 2, Discard Size: 3, Expected: 14, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 2, Discard Size: 4, Expected: 15, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 2, Discard Size: 5, Expected: 16, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 2, Discard Size: 6, Expected: 17, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 2, Discard Size: 7, Expected: 18, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 2, Discard Size: 8, Expected: 19, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 2, Discard Size: 9, Expected: 20, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 2, Discard Size: 10, Expected: 21, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 3, Discard Size: 0, Expected: 12, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 3, Discard Size: 1, Expected: 13, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 3, Discard Size: 2, Expected: 14, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 3, Discard Size: 3, Expected: 15, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 3, Discard Size: 4, Expected: 16, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 3, Discard Size: 5, Expected: 17, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 3, Discard Size: 6, Expected: 18, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 3, Discard Size: 7, Expected: 19, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 3, Discard Size: 8, Expected: 20, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 3, Discard Size: 9, Expected: 21, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 3, Discard Size: 10, Expected: 22, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 4, Discard Size: 0, Expected: 13, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 4, Discard Size: 1, Expected: 14, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 4, Discard Size: 2, Expected: 15, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 4, Discard Size: 3, Expected: 16, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 4, Discard Size: 4, Expected: 17, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 4, Discard Size: 5, Expected: 18, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 4, Discard Size: 6, Expected: 19, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 4, Discard Size: 7, Expected: 20, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 4, Discard Size: 8, Expected: 21, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 4, Discard Size: 9, Expected: 22, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 4, Discard Size: 10, Expected: 23, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 5, Discard Size: 0, Expected: 14, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 5, Discard Size: 1, Expected: 15, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 5, Discard Size: 2, Expected: 16, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 5, Discard Size: 3, Expected: 17, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 5, Discard Size: 4, Expected: 18, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 5, Discard Size: 5, Expected: 19, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 5, Discard Size: 6, Expected: 20, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 5, Discard Size: 7, Expected: 21, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 5, Discard Size: 8, Expected: 22, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 5, Discard Size: 9, Expected: 23, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 5, Discard Size: 10, Expected: 24, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 6, Discard Size: 0, Expected: 15, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 6, Discard Size: 1, Expected: 16, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 6, Discard Size: 2, Expected: 17, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 6, Discard Size: 3, Expected: 18, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 6, Discard Size: 4, Expected: 19, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 6, Discard Size: 5, Expected: 20, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 6, Discard Size: 6, Expected: 21, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 6, Discard Size: 7, Expected: 22, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 6, Discard Size: 8, Expected: 23, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 6, Discard Size: 9, Expected: 24, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 6, Discard Size: 10, Expected: 25, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 7, Discard Size: 0, Expected: 16, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 7, Discard Size: 1, Expected: 17, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 7, Discard Size: 2, Expected: 18, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 7, Discard Size: 3, Expected: 19, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 7, Discard Size: 4, Expected: 20, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 7, Discard Size: 5, Expected: 21, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 7, Discard Size: 6, Expected: 22, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 7, Discard Size: 7, Expected: 23, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 7, Discard Size: 8, Expected: 24, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 7, Discard Size: 9, Expected: 25, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 7, Discard Size: 10, Expected: 26, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 8, Discard Size: 0, Expected: 17, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 8, Discard Size: 1, Expected: 18, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 8, Discard Size: 2, Expected: 19, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 8, Discard Size: 3, Expected: 20, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 8, Discard Size: 4, Expected: 21, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 8, Discard Size: 5, Expected: 22, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 8, Discard Size: 6, Expected: 23, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 8, Discard Size: 7, Expected: 24, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 8, Discard Size: 8, Expected: 25, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 8, Discard Size: 9, Expected: 26, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 8, Discard Size: 10, Expected: 27, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 9, Discard Size: 0, Expected: 18, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 9, Discard Size: 1, Expected: 19, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 9, Discard Size: 2, Expected: 20, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 9, Discard Size: 3, Expected: 21, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 9, Discard Size: 4, Expected: 22, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 9, Discard Size: 5, Expected: 23, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 9, Discard Size: 6, Expected: 24, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 9, Discard Size: 7, Expected: 25, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 9, Discard Size: 8, Expected: 26, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 9, Discard Size: 9, Expected: 27, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 9, Discard Size: 10, Expected: 28, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 10, Discard Size: 0, Expected: 19, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 10, Discard Size: 1, Expected: 20, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 10, Discard Size: 2, Expected: 21, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 10, Discard Size: 3, Expected: 22, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 10, Discard Size: 4, Expected: 23, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 10, Discard Size: 5, Expected: 24, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 10, Discard Size: 6, Expected: 25, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 10, Discard Size: 7, Expected: 26, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 10, Discard Size: 8, Expected: 27, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 10, Discard Size: 9, Expected: 28, Result: Passed
Player: 0, Hand Size: 9, Deck Size: 10, Discard Size: 10, Expected: 29, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 0, Discard Size: 0, Expected: 10, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 0, Discard Size: 1, Expected: 11, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 0, Discard Size: 2, Expected: 12, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 0, Discard Size: 3, Expected: 13, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 0, Discard Size: 4, Expected: 14, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 0, Discard Size: 5, Expected: 15, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 0, Discard Size: 6, Expected: 16, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 0, Discard Size: 7, Expected: 17, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 0, Discard Size: 8, Expected: 18, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 0, Discard Size: 9, Expected: 19, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 0, Discard Size: 10, Expected: 20, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 1, Discard Size: 0, Expected: 11, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 1, Discard Size: 1, Expected: 12, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 1, Discard Size: 2, Expected: 13, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 1, Discard Size: 3, Expected: 14, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 1, Discard Size: 4, Expected: 15, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 1, Discard Size: 5, Expected: 16, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 1, Discard Size: 6, Expected: 17, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 1, Discard Size: 7, Expected: 18, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 1, Discard Size: 8, Expected: 19, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 1, Discard Size: 9, Expected: 20, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 1, Discard Size: 10, Expected: 21, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 2, Discard Size: 0, Expected: 12, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 2, Discard Size: 1, Expected: 13, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 2, Discard Size: 2, Expected: 14, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 2, Discard Size: 3, Expected: 15, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 2, Discard Size: 4, Expected: 16, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 2, Discard Size: 5, Expected: 17, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 2, Discard Size: 6, Expected: 18, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 2, Discard Size: 7, Expected: 19, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 2, Discard Size: 8, Expected: 20, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 2, Discard Size: 9, Expected: 21, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 2, Discard Size: 10, Expected: 22, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 3, Discard Size: 0, Expected: 13, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 3, Discard Size: 1, Expected: 14, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 3, Discard Size: 2, Expected: 15, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 3, Discard Size: 3, Expected: 16, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 3, Discard Size: 4, Expected: 17, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 3, Discard Size: 5, Expected: 18, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 3, Discard Size: 6, Expected: 19, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 3, Discard Size: 7, Expected: 20, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 3, Discard Size: 8, Expected: 21, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 3, Discard Size: 9, Expected: 22, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 3, Discard Size: 10, Expected: 23, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 4, Discard Size: 0, Expected: 14, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 4, Discard Size: 1, Expected: 15, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 4, Discard Size: 2, Expected: 16, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 4, Discard Size: 3, Expected: 17, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 4, Discard Size: 4, Expected: 18, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 4, Discard Size: 5, Expected: 19, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 4, Discard Size: 6, Expected: 20, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 4, Discard Size: 7, Expected: 21, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 4, Discard Size: 8, Expected: 22, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 4, Discard Size: 9, Expected: 23, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 4, Discard Size: 10, Expected: 24, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 5, Discard Size: 0, Expected: 15, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 5, Discard Size: 1, Expected: 16, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 5, Discard Size: 2, Expected: 17, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 5, Discard Size: 3, Expected: 18, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 5, Discard Size: 4, Expected: 19, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 5, Discard Size: 5, Expected: 20, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 5, Discard Size: 6, Expected: 21, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 5, Discard Size: 7, Expected: 22, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 5, Discard Size: 8, Expected: 23, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 5, Discard Size: 9, Expected: 24, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 5, Discard Size: 10, Expected: 25, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 6, Discard Size: 0, Expected: 16, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 6, Discard Size: 1, Expected: 17, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 6, Discard Size: 2, Expected: 18, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 6, Discard Size: 3, Expected: 19, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 6, Discard Size: 4, Expected: 20, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 6, Discard Size: 5, Expected: 21, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 6, Discard Size: 6, Expected: 22, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 6, Discard Size: 7, Expected: 23, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 6, Discard Size: 8, Expected: 24, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 6, Discard Size: 9, Expected: 25, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 6, Discard Size: 10, Expected: 26, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 7, Discard Size: 0, Expected: 17, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 7, Discard Size: 1, Expected: 18, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 7, Discard Size: 2, Expected: 19, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 7, Discard Size: 3, Expected: 20, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 7, Discard Size: 4, Expected: 21, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 7, Discard Size: 5, Expected: 22, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 7, Discard Size: 6, Expected: 23, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 7, Discard Size: 7, Expected: 24, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 7, Discard Size: 8, Expected: 25, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 7, Discard Size: 9, Expected: 26, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 7, Discard Size: 10, Expected: 27, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 8, Discard Size: 0, Expected: 18, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 8, Discard Size: 1, Expected: 19, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 8, Discard Size: 2, Expected: 20, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 8, Discard Size: 3, Expected: 21, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 8, Discard Size: 4, Expected: 22, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 8, Discard Size: 5, Expected: 23, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 8, Discard Size: 6, Expected: 24, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 8, Discard Size: 7, Expected: 25, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 8, Discard Size: 8, Expected: 26, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 8, Discard Size: 9, Expected: 27, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 8, Discard Size: 10, Expected: 28, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 9, Discard Size: 0, Expected: 19, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 9, Discard Size: 1, Expected: 20, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 9, Discard Size: 2, Expected: 21, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 9, Discard Size: 3, Expected: 22, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 9, Discard Size: 4, Expected: 23, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 9, Discard Size: 5, Expected: 24, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 9, Discard Size: 6, Expected: 25, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 9, Discard Size: 7, Expected: 26, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 9, Discard Size: 8, Expected: 27, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 9, Discard Size: 9, Expected: 28, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 9, Discard Size: 10, Expected: 29, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 10, Discard Size: 0, Expected: 20, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 10, Discard Size: 1, Expected: 21, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 10, Discard Size: 2, Expected: 22, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 10, Discard Size: 3, Expected: 23, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 10, Discard Size: 4, Expected: 24, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 10, Discard Size: 5, Expected: 25, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 10, Discard Size: 6, Expected: 26, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 10, Discard Size: 7, Expected: 27, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 10, Discard Size: 8, Expected: 28, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 10, Discard Size: 9, Expected: 29, Result: Passed
Player: 0, Hand Size: 10, Deck Size: 10, Discard Size: 10, Expected: 30, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 0, Discard Size: 0, Expected: 0, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 0, Discard Size: 1, Expected: 1, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 0, Discard Size: 2, Expected: 2, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 0, Discard Size: 3, Expected: 3, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 0, Discard Size: 4, Expected: 4, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 0, Discard Size: 5, Expected: 5, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 0, Discard Size: 6, Expected: 6, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 0, Discard Size: 7, Expected: 7, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 0, Discard Size: 8, Expected: 8, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 0, Discard Size: 9, Expected: 9, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 0, Discard Size: 10, Expected: 10, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 1, Discard Size: 0, Expected: 1, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 1, Discard Size: 1, Expected: 2, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 1, Discard Size: 2, Expected: 3, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 1, Discard Size: 3, Expected: 4, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 1, Discard Size: 4, Expected: 5, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 1, Discard Size: 5, Expected: 6, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 1, Discard Size: 6, Expected: 7, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 1, Discard Size: 7, Expected: 8, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 1, Discard Size: 8, Expected: 9, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 1, Discard Size: 9, Expected: 10, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 1, Discard Size: 10, Expected: 11, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 2, Discard Size: 0, Expected: 2, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 2, Discard Size: 1, Expected: 3, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 2, Discard Size: 2, Expected: 4, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 2, Discard Size: 3, Expected: 5, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 2, Discard Size: 4, Expected: 6, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 2, Discard Size: 5, Expected: 7, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 2, Discard Size: 6, Expected: 8, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 2, Discard Size: 7, Expected: 9, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 2, Discard Size: 8, Expected: 10, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 2, Discard Size: 9, Expected: 11, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 2, Discard Size: 10, Expected: 12, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 3, Discard Size: 0, Expected: 3, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 3, Discard Size: 1, Expected: 4, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 3, Discard Size: 2, Expected: 5, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 3, Discard Size: 3, Expected: 6, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 3, Discard Size: 4, Expected: 7, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 3, Discard Size: 5, Expected: 8, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 3, Discard Size: 6, Expected: 9, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 3, Discard Size: 7, Expected: 10, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 3, Discard Size: 8, Expected: 11, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 3, Discard Size: 9, Expected: 12, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 3, Discard Size: 10, Expected: 13, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 4, Discard Size: 0, Expected: 4, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 4, Discard Size: 1, Expected: 5, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 4, Discard Size: 2, Expected: 6, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 4, Discard Size: 3, Expected: 7, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 4, Discard Size: 4, Expected: 8, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 4, Discard Size: 5, Expected: 9, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 4, Discard Size: 6, Expected: 10, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 4, Discard Size: 7, Expected: 11, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 4, Discard Size: 8, Expected: 12, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 4, Discard Size: 9, Expected: 13, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 4, Discard Size: 10, Expected: 14, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 5, Discard Size: 0, Expected: 5, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 5, Discard Size: 1, Expected: 6, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 5, Discard Size: 2, Expected: 7, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 5, Discard Size: 3, Expected: 8, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 5, Discard Size: 4, Expected: 9, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 5, Discard Size: 5, Expected: 10, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 5, Discard Size: 6, Expected: 11, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 5, Discard Size: 7, Expected: 12, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 5, Discard Size: 8, Expected: 13, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 5, Discard Size: 9, Expected: 14, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 5, Discard Size: 10, Expected: 15, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 6, Discard Size: 0, Expected: 6, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 6, Discard Size: 1, Expected: 7, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 6, Discard Size: 2, Expected: 8, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 6, Discard Size: 3, Expected: 9, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 6, Discard Size: 4, Expected: 10, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 6, Discard Size: 5, Expected: 11, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 6, Discard Size: 6, Expected: 12, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 6, Discard Size: 7, Expected: 13, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 6, Discard Size: 8, Expected: 14, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 6, Discard Size: 9, Expected: 15, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 6, Discard Size: 10, Expected: 16, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 7, Discard Size: 0, Expected: 7, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 7, Discard Size: 1, Expected: 8, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 7, Discard Size: 2, Expected: 9, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 7, Discard Size: 3, Expected: 10, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 7, Discard Size: 4, Expected: 11, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 7, Discard Size: 5, Expected: 12, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 7, Discard Size: 6, Expected: 13, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 7, Discard Size: 7, Expected: 14, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 7, Discard Size: 8, Expected: 15, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 7, Discard Size: 9, Expected: 16, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 7, Discard Size: 10, Expected: 17, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 8, Discard Size: 0, Expected: 8, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 8, Discard Size: 1, Expected: 9, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 8, Discard Size: 2, Expected: 10, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 8, Discard Size: 3, Expected: 11, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 8, Discard Size: 4, Expected: 12, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 8, Discard Size: 5, Expected: 13, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 8, Discard Size: 6, Expected: 14, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 8, Discard Size: 7, Expected: 15, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 8, Discard Size: 8, Expected: 16, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 8, Discard Size: 9, Expected: 17, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 8, Discard Size: 10, Expected: 18, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 9, Discard Size: 0, Expected: 9, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 9, Discard Size: 1, Expected: 10, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 9, Discard Size: 2, Expected: 11, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 9, Discard Size: 3, Expected: 12, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 9, Discard Size: 4, Expected: 13, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 9, Discard Size: 5, Expected: 14, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 9, Discard Size: 6, Expected: 15, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 9, Discard Size: 7, Expected: 16, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 9, Discard Size: 8, Expected: 17, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 9, Discard Size: 9, Expected: 18, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 9, Discard Size: 10, Expected: 19, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 10, Discard Size: 0, Expected: 10, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 10, Discard Size: 1, Expected: 11, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 10, Discard Size: 2, Expected: 12, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 10, Discard Size: 3, Expected: 13, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 10, Discard Size: 4, Expected: 14, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 10, Discard Size: 5, Expected: 15, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 10, Discard Size: 6, Expected: 16, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 10, Discard Size: 7, Expected: 17, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 10, Discard Size: 8, Expected: 18, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 10, Discard Size: 9, Expected: 19, Result: Passed
Player: 1, Hand Size: 0, Deck Size: 10, Discard Size: 10, Expected: 20, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 0, Discard Size: 0, Expected: 1, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 0, Discard Size: 1, Expected: 2, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 0, Discard Size: 2, Expected: 3, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 0, Discard Size: 3, Expected: 4, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 0, Discard Size: 4, Expected: 5, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 0, Discard Size: 5, Expected: 6, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 0, Discard Size: 6, Expected: 7, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 0, Discard Size: 7, Expected: 8, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 0, Discard Size: 8, Expected: 9, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 0, Discard Size: 9, Expected: 10, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 0, Discard Size: 10, Expected: 11, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 1, Discard Size: 0, Expected: 2, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 1, Discard Size: 1, Expected: 3, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 1, Discard Size: 2, Expected: 4, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 1, Discard Size: 3, Expected: 5, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 1, Discard Size: 4, Expected: 6, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 1, Discard Size: 5, Expected: 7, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 1, Discard Size: 6, Expected: 8, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 1, Discard Size: 7, Expected: 9, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 1, Discard Size: 8, Expected: 10, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 1, Discard Size: 9, Expected: 11, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 1, Discard Size: 10, Expected: 12, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 2, Discard Size: 0, Expected: 3, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 2, Discard Size: 1, Expected: 4, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 2, Discard Size: 2, Expected: 5, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 2, Discard Size: 3, Expected: 6, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 2, Discard Size: 4, Expected: 7, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 2, Discard Size: 5, Expected: 8, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 2, Discard Size: 6, Expected: 9, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 2, Discard Size: 7, Expected: 10, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 2, Discard Size: 8, Expected: 11, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 2, Discard Size: 9, Expected: 12, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 2, Discard Size: 10, Expected: 13, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 3, Discard Size: 0, Expected: 4, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 3, Discard Size: 1, Expected: 5, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 3, Discard Size: 2, Expected: 6, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 3, Discard Size: 3, Expected: 7, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 3, Discard Size: 4, Expected: 8, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 3, Discard Size: 5, Expected: 9, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 3, Discard Size: 6, Expected: 10, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 3, Discard Size: 7, Expected: 11, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 3, Discard Size: 8, Expected: 12, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 3, Discard Size: 9, Expected: 13, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 3, Discard Size: 10, Expected: 14, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 4, Discard Size: 0, Expected: 5, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 4, Discard Size: 1, Expected: 6, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 4, Discard Size: 2, Expected: 7, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 4, Discard Size: 3, Expected: 8, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 4, Discard Size: 4, Expected: 9, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 4, Discard Size: 5, Expected: 10, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 4, Discard Size: 6, Expected: 11, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 4, Discard Size: 7, Expected: 12, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 4, Discard Size: 8, Expected: 13, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 4, Discard Size: 9, Expected: 14, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 4, Discard Size: 10, Expected: 15, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 5, Discard Size: 0, Expected: 6, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 5, Discard Size: 1, Expected: 7, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 5, Discard Size: 2, Expected: 8, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 5, Discard Size: 3, Expected: 9, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 5, Discard Size: 4, Expected: 10, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 5, Discard Size: 5, Expected: 11, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 5, Discard Size: 6, Expected: 12, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 5, Discard Size: 7, Expected: 13, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 5, Discard Size: 8, Expected: 14, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 5, Discard Size: 9, Expected: 15, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 5, Discard Size: 10, Expected: 16, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 6, Discard Size: 0, Expected: 7, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 6, Discard Size: 1, Expected: 8, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 6, Discard Size: 2, Expected: 9, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 6, Discard Size: 3, Expected: 10, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 6, Discard Size: 4, Expected: 11, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 6, Discard Size: 5, Expected: 12, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 6, Discard Size: 6, Expected: 13, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 6, Discard Size: 7, Expected: 14, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 6, Discard Size: 8, Expected: 15, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 6, Discard Size: 9, Expected: 16, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 6, Discard Size: 10, Expected: 17, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 7, Discard Size: 0, Expected: 8, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 7, Discard Size: 1, Expected: 9, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 7, Discard Size: 2, Expected: 10, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 7, Discard Size: 3, Expected: 11, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 7, Discard Size: 4, Expected: 12, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 7, Discard Size: 5, Expected: 13, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 7, Discard Size: 6, Expected: 14, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 7, Discard Size: 7, Expected: 15, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 7, Discard Size: 8, Expected: 16, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 7, Discard Size: 9, Expected: 17, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 7, Discard Size: 10, Expected: 18, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 8, Discard Size: 0, Expected: 9, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 8, Discard Size: 1, Expected: 10, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 8, Discard Size: 2, Expected: 11, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 8, Discard Size: 3, Expected: 12, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 8, Discard Size: 4, Expected: 13, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 8, Discard Size: 5, Expected: 14, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 8, Discard Size: 6, Expected: 15, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 8, Discard Size: 7, Expected: 16, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 8, Discard Size: 8, Expected: 17, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 8, Discard Size: 9, Expected: 18, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 8, Discard Size: 10, Expected: 19, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 9, Discard Size: 0, Expected: 10, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 9, Discard Size: 1, Expected: 11, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 9, Discard Size: 2, Expected: 12, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 9, Discard Size: 3, Expected: 13, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 9, Discard Size: 4, Expected: 14, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 9, Discard Size: 5, Expected: 15, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 9, Discard Size: 6, Expected: 16, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 9, Discard Size: 7, Expected: 17, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 9, Discard Size: 8, Expected: 18, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 9, Discard Size: 9, Expected: 19, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 9, Discard Size: 10, Expected: 20, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 10, Discard Size: 0, Expected: 11, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 10, Discard Size: 1, Expected: 12, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 10, Discard Size: 2, Expected: 13, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 10, Discard Size: 3, Expected: 14, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 10, Discard Size: 4, Expected: 15, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 10, Discard Size: 5, Expected: 16, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 10, Discard Size: 6, Expected: 17, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 10, Discard Size: 7, Expected: 18, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 10, Discard Size: 8, Expected: 19, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 10, Discard Size: 9, Expected: 20, Result: Passed
Player: 1, Hand Size: 1, Deck Size: 10, Discard Size: 10, Expected: 21, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 0, Discard Size: 0, Expected: 2, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 0, Discard Size: 1, Expected: 3, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 0, Discard Size: 2, Expected: 4, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 0, Discard Size: 3, Expected: 5, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 0, Discard Size: 4, Expected: 6, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 0, Discard Size: 5, Expected: 7, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 0, Discard Size: 6, Expected: 8, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 0, Discard Size: 7, Expected: 9, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 0, Discard Size: 8, Expected: 10, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 0, Discard Size: 9, Expected: 11, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 0, Discard Size: 10, Expected: 12, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 1, Discard Size: 0, Expected: 3, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 1, Discard Size: 1, Expected: 4, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 1, Discard Size: 2, Expected: 5, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 1, Discard Size: 3, Expected: 6, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 1, Discard Size: 4, Expected: 7, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 1, Discard Size: 5, Expected: 8, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 1, Discard Size: 6, Expected: 9, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 1, Discard Size: 7, Expected: 10, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 1, Discard Size: 8, Expected: 11, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 1, Discard Size: 9, Expected: 12, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 1, Discard Size: 10, Expected: 13, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 2, Discard Size: 0, Expected: 4, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 2, Discard Size: 1, Expected: 5, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 2, Discard Size: 2, Expected: 6, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 2, Discard Size: 3, Expected: 7, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 2, Discard Size: 4, Expected: 8, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 2, Discard Size: 5, Expected: 9, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 2, Discard Size: 6, Expected: 10, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 2, Discard Size: 7, Expected: 11, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 2, Discard Size: 8, Expected: 12, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 2, Discard Size: 9, Expected: 13, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 2, Discard Size: 10, Expected: 14, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 3, Discard Size: 0, Expected: 5, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 3, Discard Size: 1, Expected: 6, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 3, Discard Size: 2, Expected: 7, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 3, Discard Size: 3, Expected: 8, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 3, Discard Size: 4, Expected: 9, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 3, Discard Size: 5, Expected: 10, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 3, Discard Size: 6, Expected: 11, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 3, Discard Size: 7, Expected: 12, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 3, Discard Size: 8, Expected: 13, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 3, Discard Size: 9, Expected: 14, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 3, Discard Size: 10, Expected: 15, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 4, Discard Size: 0, Expected: 6, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 4, Discard Size: 1, Expected: 7, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 4, Discard Size: 2, Expected: 8, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 4, Discard Size: 3, Expected: 9, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 4, Discard Size: 4, Expected: 10, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 4, Discard Size: 5, Expected: 11, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 4, Discard Size: 6, Expected: 12, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 4, Discard Size: 7, Expected: 13, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 4, Discard Size: 8, Expected: 14, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 4, Discard Size: 9, Expected: 15, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 4, Discard Size: 10, Expected: 16, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 5, Discard Size: 0, Expected: 7, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 5, Discard Size: 1, Expected: 8, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 5, Discard Size: 2, Expected: 9, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 5, Discard Size: 3, Expected: 10, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 5, Discard Size: 4, Expected: 11, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 5, Discard Size: 5, Expected: 12, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 5, Discard Size: 6, Expected: 13, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 5, Discard Size: 7, Expected: 14, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 5, Discard Size: 8, Expected: 15, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 5, Discard Size: 9, Expected: 16, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 5, Discard Size: 10, Expected: 17, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 6, Discard Size: 0, Expected: 8, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 6, Discard Size: 1, Expected: 9, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 6, Discard Size: 2, Expected: 10, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 6, Discard Size: 3, Expected: 11, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 6, Discard Size: 4, Expected: 12, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 6, Discard Size: 5, Expected: 13, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 6, Discard Size: 6, Expected: 14, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 6, Discard Size: 7, Expected: 15, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 6, Discard Size: 8, Expected: 16, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 6, Discard Size: 9, Expected: 17, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 6, Discard Size: 10, Expected: 18, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 7, Discard Size: 0, Expected: 9, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 7, Discard Size: 1, Expected: 10, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 7, Discard Size: 2, Expected: 11, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 7, Discard Size: 3, Expected: 12, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 7, Discard Size: 4, Expected: 13, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 7, Discard Size: 5, Expected: 14, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 7, Discard Size: 6, Expected: 15, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 7, Discard Size: 7, Expected: 16, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 7, Discard Size: 8, Expected: 17, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 7, Discard Size: 9, Expected: 18, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 7, Discard Size: 10, Expected: 19, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 8, Discard Size: 0, Expected: 10, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 8, Discard Size: 1, Expected: 11, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 8, Discard Size: 2, Expected: 12, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 8, Discard Size: 3, Expected: 13, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 8, Discard Size: 4, Expected: 14, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 8, Discard Size: 5, Expected: 15, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 8, Discard Size: 6, Expected: 16, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 8, Discard Size: 7, Expected: 17, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 8, Discard Size: 8, Expected: 18, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 8, Discard Size: 9, Expected: 19, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 8, Discard Size: 10, Expected: 20, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 9, Discard Size: 0, Expected: 11, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 9, Discard Size: 1, Expected: 12, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 9, Discard Size: 2, Expected: 13, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 9, Discard Size: 3, Expected: 14, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 9, Discard Size: 4, Expected: 15, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 9, Discard Size: 5, Expected: 16, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 9, Discard Size: 6, Expected: 17, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 9, Discard Size: 7, Expected: 18, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 9, Discard Size: 8, Expected: 19, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 9, Discard Size: 9, Expected: 20, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 9, Discard Size: 10, Expected: 21, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 10, Discard Size: 0, Expected: 12, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 10, Discard Size: 1, Expected: 13, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 10, Discard Size: 2, Expected: 14, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 10, Discard Size: 3, Expected: 15, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 10, Discard Size: 4, Expected: 16, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 10, Discard Size: 5, Expected: 17, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 10, Discard Size: 6, Expected: 18, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 10, Discard Size: 7, Expected: 19, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 10, Discard Size: 8, Expected: 20, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 10, Discard Size: 9, Expected: 21, Result: Passed
Player: 1, Hand Size: 2, Deck Size: 10, Discard Size: 10, Expected: 22, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 0, Discard Size: 0, Expected: 3, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 0, Discard Size: 1, Expected: 4, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 0, Discard Size: 2, Expected: 5, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 0, Discard Size: 3, Expected: 6, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 0, Discard Size: 4, Expected: 7, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 0, Discard Size: 5, Expected: 8, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 0, Discard Size: 6, Expected: 9, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 0, Discard Size: 7, Expected: 10, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 0, Discard Size: 8, Expected: 11, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 0, Discard Size: 9, Expected: 12, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 0, Discard Size: 10, Expected: 13, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 1, Discard Size: 0, Expected: 4, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 1, Discard Size: 1, Expected: 5, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 1, Discard Size: 2, Expected: 6, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 1, Discard Size: 3, Expected: 7, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 1, Discard Size: 4, Expected: 8, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 1, Discard Size: 5, Expected: 9, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 1, Discard Size: 6, Expected: 10, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 1, Discard Size: 7, Expected: 11, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 1, Discard Size: 8, Expected: 12, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 1, Discard Size: 9, Expected: 13, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 1, Discard Size: 10, Expected: 14, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 2, Discard Size: 0, Expected: 5, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 2, Discard Size: 1, Expected: 6, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 2, Discard Size: 2, Expected: 7, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 2, Discard Size: 3, Expected: 8, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 2, Discard Size: 4, Expected: 9, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 2, Discard Size: 5, Expected: 10, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 2, Discard Size: 6, Expected: 11, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 2, Discard Size: 7, Expected: 12, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 2, Discard Size: 8, Expected: 13, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 2, Discard Size: 9, Expected: 14, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 2, Discard Size: 10, Expected: 15, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 3, Discard Size: 0, Expected: 6, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 3, Discard Size: 1, Expected: 7, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 3, Discard Size: 2, Expected: 8, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 3, Discard Size: 3, Expected: 9, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 3, Discard Size: 4, Expected: 10, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 3, Discard Size: 5, Expected: 11, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 3, Discard Size: 6, Expected: 12, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 3, Discard Size: 7, Expected: 13, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 3, Discard Size: 8, Expected: 14, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 3, Discard Size: 9, Expected: 15, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 3, Discard Size: 10, Expected: 16, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 4, Discard Size: 0, Expected: 7, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 4, Discard Size: 1, Expected: 8, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 4, Discard Size: 2, Expected: 9, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 4, Discard Size: 3, Expected: 10, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 4, Discard Size: 4, Expected: 11, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 4, Discard Size: 5, Expected: 12, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 4, Discard Size: 6, Expected: 13, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 4, Discard Size: 7, Expected: 14, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 4, Discard Size: 8, Expected: 15, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 4, Discard Size: 9, Expected: 16, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 4, Discard Size: 10, Expected: 17, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 5, Discard Size: 0, Expected: 8, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 5, Discard Size: 1, Expected: 9, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 5, Discard Size: 2, Expected: 10, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 5, Discard Size: 3, Expected: 11, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 5, Discard Size: 4, Expected: 12, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 5, Discard Size: 5, Expected: 13, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 5, Discard Size: 6, Expected: 14, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 5, Discard Size: 7, Expected: 15, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 5, Discard Size: 8, Expected: 16, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 5, Discard Size: 9, Expected: 17, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 5, Discard Size: 10, Expected: 18, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 6, Discard Size: 0, Expected: 9, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 6, Discard Size: 1, Expected: 10, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 6, Discard Size: 2, Expected: 11, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 6, Discard Size: 3, Expected: 12, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 6, Discard Size: 4, Expected: 13, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 6, Discard Size: 5, Expected: 14, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 6, Discard Size: 6, Expected: 15, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 6, Discard Size: 7, Expected: 16, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 6, Discard Size: 8, Expected: 17, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 6, Discard Size: 9, Expected: 18, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 6, Discard Size: 10, Expected: 19, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 7, Discard Size: 0, Expected: 10, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 7, Discard Size: 1, Expected: 11, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 7, Discard Size: 2, Expected: 12, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 7, Discard Size: 3, Expected: 13, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 7, Discard Size: 4, Expected: 14, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 7, Discard Size: 5, Expected: 15, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 7, Discard Size: 6, Expected: 16, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 7, Discard Size: 7, Expected: 17, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 7, Discard Size: 8, Expected: 18, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 7, Discard Size: 9, Expected: 19, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 7, Discard Size: 10, Expected: 20, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 8, Discard Size: 0, Expected: 11, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 8, Discard Size: 1, Expected: 12, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 8, Discard Size: 2, Expected: 13, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 8, Discard Size: 3, Expected: 14, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 8, Discard Size: 4, Expected: 15, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 8, Discard Size: 5, Expected: 16, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 8, Discard Size: 6, Expected: 17, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 8, Discard Size: 7, Expected: 18, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 8, Discard Size: 8, Expected: 19, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 8, Discard Size: 9, Expected: 20, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 8, Discard Size: 10, Expected: 21, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 9, Discard Size: 0, Expected: 12, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 9, Discard Size: 1, Expected: 13, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 9, Discard Size: 2, Expected: 14, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 9, Discard Size: 3, Expected: 15, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 9, Discard Size: 4, Expected: 16, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 9, Discard Size: 5, Expected: 17, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 9, Discard Size: 6, Expected: 18, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 9, Discard Size: 7, Expected: 19, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 9, Discard Size: 8, Expected: 20, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 9, Discard Size: 9, Expected: 21, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 9, Discard Size: 10, Expected: 22, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 10, Discard Size: 0, Expected: 13, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 10, Discard Size: 1, Expected: 14, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 10, Discard Size: 2, Expected: 15, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 10, Discard Size: 3, Expected: 16, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 10, Discard Size: 4, Expected: 17, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 10, Discard Size: 5, Expected: 18, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 10, Discard Size: 6, Expected: 19, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 10, Discard Size: 7, Expected: 20, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 10, Discard Size: 8, Expected: 21, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 10, Discard Size: 9, Expected: 22, Result: Passed
Player: 1, Hand Size: 3, Deck Size: 10, Discard Size: 10, Expected: 23, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 0, Discard Size: 0, Expected: 4, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 0, Discard Size: 1, Expected: 5, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 0, Discard Size: 2, Expected: 6, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 0, Discard Size: 3, Expected: 7, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 0, Discard Size: 4, Expected: 8, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 0, Discard Size: 5, Expected: 9, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 0, Discard Size: 6, Expected: 10, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 0, Discard Size: 7, Expected: 11, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 0, Discard Size: 8, Expected: 12, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 0, Discard Size: 9, Expected: 13, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 0, Discard Size: 10, Expected: 14, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 1, Discard Size: 0, Expected: 5, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 1, Discard Size: 1, Expected: 6, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 1, Discard Size: 2, Expected: 7, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 1, Discard Size: 3, Expected: 8, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 1, Discard Size: 4, Expected: 9, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 1, Discard Size: 5, Expected: 10, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 1, Discard Size: 6, Expected: 11, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 1, Discard Size: 7, Expected: 12, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 1, Discard Size: 8, Expected: 13, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 1, Discard Size: 9, Expected: 14, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 1, Discard Size: 10, Expected: 15, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 2, Discard Size: 0, Expected: 6, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 2, Discard Size: 1, Expected: 7, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 2, Discard Size: 2, Expected: 8, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 2, Discard Size: 3, Expected: 9, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 2, Discard Size: 4, Expected: 10, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 2, Discard Size: 5, Expected: 11, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 2, Discard Size: 6, Expected: 12, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 2, Discard Size: 7, Expected: 13, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 2, Discard Size: 8, Expected: 14, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 2, Discard Size: 9, Expected: 15, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 2, Discard Size: 10, Expected: 16, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 3, Discard Size: 0, Expected: 7, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 3, Discard Size: 1, Expected: 8, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 3, Discard Size: 2, Expected: 9, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 3, Discard Size: 3, Expected: 10, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 3, Discard Size: 4, Expected: 11, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 3, Discard Size: 5, Expected: 12, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 3, Discard Size: 6, Expected: 13, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 3, Discard Size: 7, Expected: 14, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 3, Discard Size: 8, Expected: 15, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 3, Discard Size: 9, Expected: 16, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 3, Discard Size: 10, Expected: 17, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 4, Discard Size: 0, Expected: 8, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 4, Discard Size: 1, Expected: 9, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 4, Discard Size: 2, Expected: 10, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 4, Discard Size: 3, Expected: 11, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 4, Discard Size: 4, Expected: 12, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 4, Discard Size: 5, Expected: 13, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 4, Discard Size: 6, Expected: 14, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 4, Discard Size: 7, Expected: 15, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 4, Discard Size: 8, Expected: 16, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 4, Discard Size: 9, Expected: 17, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 4, Discard Size: 10, Expected: 18, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 5, Discard Size: 0, Expected: 9, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 5, Discard Size: 1, Expected: 10, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 5, Discard Size: 2, Expected: 11, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 5, Discard Size: 3, Expected: 12, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 5, Discard Size: 4, Expected: 13, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 5, Discard Size: 5, Expected: 14, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 5, Discard Size: 6, Expected: 15, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 5, Discard Size: 7, Expected: 16, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 5, Discard Size: 8, Expected: 17, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 5, Discard Size: 9, Expected: 18, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 5, Discard Size: 10, Expected: 19, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 6, Discard Size: 0, Expected: 10, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 6, Discard Size: 1, Expected: 11, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 6, Discard Size: 2, Expected: 12, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 6, Discard Size: 3, Expected: 13, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 6, Discard Size: 4, Expected: 14, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 6, Discard Size: 5, Expected: 15, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 6, Discard Size: 6, Expected: 16, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 6, Discard Size: 7, Expected: 17, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 6, Discard Size: 8, Expected: 18, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 6, Discard Size: 9, Expected: 19, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 6, Discard Size: 10, Expected: 20, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 7, Discard Size: 0, Expected: 11, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 7, Discard Size: 1, Expected: 12, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 7, Discard Size: 2, Expected: 13, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 7, Discard Size: 3, Expected: 14, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 7, Discard Size: 4, Expected: 15, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 7, Discard Size: 5, Expected: 16, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 7, Discard Size: 6, Expected: 17, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 7, Discard Size: 7, Expected: 18, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 7, Discard Size: 8, Expected: 19, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 7, Discard Size: 9, Expected: 20, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 7, Discard Size: 10, Expected: 21, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 8, Discard Size: 0, Expected: 12, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 8, Discard Size: 1, Expected: 13, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 8, Discard Size: 2, Expected: 14, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 8, Discard Size: 3, Expected: 15, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 8, Discard Size: 4, Expected: 16, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 8, Discard Size: 5, Expected: 17, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 8, Discard Size: 6, Expected: 18, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 8, Discard Size: 7, Expected: 19, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 8, Discard Size: 8, Expected: 20, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 8, Discard Size: 9, Expected: 21, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 8, Discard Size: 10, Expected: 22, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 9, Discard Size: 0, Expected: 13, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 9, Discard Size: 1, Expected: 14, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 9, Discard Size: 2, Expected: 15, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 9, Discard Size: 3, Expected: 16, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 9, Discard Size: 4, Expected: 17, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 9, Discard Size: 5, Expected: 18, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 9, Discard Size: 6, Expected: 19, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 9, Discard Size: 7, Expected: 20, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 9, Discard Size: 8, Expected: 21, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 9, Discard Size: 9, Expected: 22, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 9, Discard Size: 10, Expected: 23, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 10, Discard Size: 0, Expected: 14, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 10, Discard Size: 1, Expected: 15, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 10, Discard Size: 2, Expected: 16, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 10, Discard Size: 3, Expected: 17, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 10, Discard Size: 4, Expected: 18, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 10, Discard Size: 5, Expected: 19, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 10, Discard Size: 6, Expected: 20, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 10, Discard Size: 7, Expected: 21, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 10, Discard Size: 8, Expected: 22, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 10, Discard Size: 9, Expected: 23, Result: Passed
Player: 1, Hand Size: 4, Deck Size: 10, Discard Size: 10, Expected: 24, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 0, Discard Size: 0, Expected: 5, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 0, Discard Size: 1, Expected: 6, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 0, Discard Size: 2, Expected: 7, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 0, Discard Size: 3, Expected: 8, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 0, Discard Size: 4, Expected: 9, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 0, Discard Size: 5, Expected: 10, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 0, Discard Size: 6, Expected: 11, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 0, Discard Size: 7, Expected: 12, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 0, Discard Size: 8, Expected: 13, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 0, Discard Size: 9, Expected: 14, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 0, Discard Size: 10, Expected: 15, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 1, Discard Size: 0, Expected: 6, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 1, Discard Size: 1, Expected: 7, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 1, Discard Size: 2, Expected: 8, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 1, Discard Size: 3, Expected: 9, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 1, Discard Size: 4, Expected: 10, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 1, Discard Size: 5, Expected: 11, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 1, Discard Size: 6, Expected: 12, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 1, Discard Size: 7, Expected: 13, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 1, Discard Size: 8, Expected: 14, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 1, Discard Size: 9, Expected: 15, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 1, Discard Size: 10, Expected: 16, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 2, Discard Size: 0, Expected: 7, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 2, Discard Size: 1, Expected: 8, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 2, Discard Size: 2, Expected: 9, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 2, Discard Size: 3, Expected: 10, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 2, Discard Size: 4, Expected: 11, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 2, Discard Size: 5, Expected: 12, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 2, Discard Size: 6, Expected: 13, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 2, Discard Size: 7, Expected: 14, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 2, Discard Size: 8, Expected: 15, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 2, Discard Size: 9, Expected: 16, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 2, Discard Size: 10, Expected: 17, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 3, Discard Size: 0, Expected: 8, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 3, Discard Size: 1, Expected: 9, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 3, Discard Size: 2, Expected: 10, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 3, Discard Size: 3, Expected: 11, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 3, Discard Size: 4, Expected: 12, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 3, Discard Size: 5, Expected: 13, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 3, Discard Size: 6, Expected: 14, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 3, Discard Size: 7, Expected: 15, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 3, Discard Size: 8, Expected: 16, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 3, Discard Size: 9, Expected: 17, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 3, Discard Size: 10, Expected: 18, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 4, Discard Size: 0, Expected: 9, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 4, Discard Size: 1, Expected: 10, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 4, Discard Size: 2, Expected: 11, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 4, Discard Size: 3, Expected: 12, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 4, Discard Size: 4, Expected: 13, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 4, Discard Size: 5, Expected: 14, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 4, Discard Size: 6, Expected: 15, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 4, Discard Size: 7, Expected: 16, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 4, Discard Size: 8, Expected: 17, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 4, Discard Size: 9, Expected: 18, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 4, Discard Size: 10, Expected: 19, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 5, Discard Size: 0, Expected: 10, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 5, Discard Size: 1, Expected: 11, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 5, Discard Size: 2, Expected: 12, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 5, Discard Size: 3, Expected: 13, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 5, Discard Size: 4, Expected: 14, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 5, Discard Size: 5, Expected: 15, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 5, Discard Size: 6, Expected: 16, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 5, Discard Size: 7, Expected: 17, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 5, Discard Size: 8, Expected: 18, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 5, Discard Size: 9, Expected: 19, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 5, Discard Size: 10, Expected: 20, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 6, Discard Size: 0, Expected: 11, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 6, Discard Size: 1, Expected: 12, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 6, Discard Size: 2, Expected: 13, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 6, Discard Size: 3, Expected: 14, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 6, Discard Size: 4, Expected: 15, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 6, Discard Size: 5, Expected: 16, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 6, Discard Size: 6, Expected: 17, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 6, Discard Size: 7, Expected: 18, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 6, Discard Size: 8, Expected: 19, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 6, Discard Size: 9, Expected: 20, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 6, Discard Size: 10, Expected: 21, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 7, Discard Size: 0, Expected: 12, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 7, Discard Size: 1, Expected: 13, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 7, Discard Size: 2, Expected: 14, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 7, Discard Size: 3, Expected: 15, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 7, Discard Size: 4, Expected: 16, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 7, Discard Size: 5, Expected: 17, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 7, Discard Size: 6, Expected: 18, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 7, Discard Size: 7, Expected: 19, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 7, Discard Size: 8, Expected: 20, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 7, Discard Size: 9, Expected: 21, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 7, Discard Size: 10, Expected: 22, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 8, Discard Size: 0, Expected: 13, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 8, Discard Size: 1, Expected: 14, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 8, Discard Size: 2, Expected: 15, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 8, Discard Size: 3, Expected: 16, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 8, Discard Size: 4, Expected: 17, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 8, Discard Size: 5, Expected: 18, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 8, Discard Size: 6, Expected: 19, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 8, Discard Size: 7, Expected: 20, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 8, Discard Size: 8, Expected: 21, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 8, Discard Size: 9, Expected: 22, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 8, Discard Size: 10, Expected: 23, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 9, Discard Size: 0, Expected: 14, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 9, Discard Size: 1, Expected: 15, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 9, Discard Size: 2, Expected: 16, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 9, Discard Size: 3, Expected: 17, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 9, Discard Size: 4, Expected: 18, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 9, Discard Size: 5, Expected: 19, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 9, Discard Size: 6, Expected: 20, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 9, Discard Size: 7, Expected: 21, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 9, Discard Size: 8, Expected: 22, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 9, Discard Size: 9, Expected: 23, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 9, Discard Size: 10, Expected: 24, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 10, Discard Size: 0, Expected: 15, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 10, Discard Size: 1, Expected: 16, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 10, Discard Size: 2, Expected: 17, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 10, Discard Size: 3, Expected: 18, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 10, Discard Size: 4, Expected: 19, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 10, Discard Size: 5, Expected: 20, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 10, Discard Size: 6, Expected: 21, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 10, Discard Size: 7, Expected: 22, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 10, Discard Size: 8, Expected: 23, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 10, Discard Size: 9, Expected: 24, Result: Passed
Player: 1, Hand Size: 5, Deck Size: 10, Discard Size: 10, Expected: 25, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 0, Discard Size: 0, Expected: 6, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 0, Discard Size: 1, Expected: 7, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 0, Discard Size: 2, Expected: 8, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 0, Discard Size: 3, Expected: 9, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 0, Discard Size: 4, Expected: 10, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 0, Discard Size: 5, Expected: 11, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 0, Discard Size: 6, Expected: 12, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 0, Discard Size: 7, Expected: 13, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 0, Discard Size: 8, Expected: 14, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 0, Discard Size: 9, Expected: 15, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 0, Discard Size: 10, Expected: 16, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 1, Discard Size: 0, Expected: 7, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 1, Discard Size: 1, Expected: 8, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 1, Discard Size: 2, Expected: 9, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 1, Discard Size: 3, Expected: 10, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 1, Discard Size: 4, Expected: 11, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 1, Discard Size: 5, Expected: 12, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 1, Discard Size: 6, Expected: 13, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 1, Discard Size: 7, Expected: 14, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 1, Discard Size: 8, Expected: 15, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 1, Discard Size: 9, Expected: 16, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 1, Discard Size: 10, Expected: 17, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 2, Discard Size: 0, Expected: 8, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 2, Discard Size: 1, Expected: 9, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 2, Discard Size: 2, Expected: 10, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 2, Discard Size: 3, Expected: 11, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 2, Discard Size: 4, Expected: 12, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 2, Discard Size: 5, Expected: 13, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 2, Discard Size: 6, Expected: 14, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 2, Discard Size: 7, Expected: 15, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 2, Discard Size: 8, Expected: 16, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 2, Discard Size: 9, Expected: 17, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 2, Discard Size: 10, Expected: 18, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 3, Discard Size: 0, Expected: 9, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 3, Discard Size: 1, Expected: 10, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 3, Discard Size: 2, Expected: 11, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 3, Discard Size: 3, Expected: 12, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 3, Discard Size: 4, Expected: 13, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 3, Discard Size: 5, Expected: 14, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 3, Discard Size: 6, Expected: 15, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 3, Discard Size: 7, Expected: 16, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 3, Discard Size: 8, Expected: 17, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 3, Discard Size: 9, Expected: 18, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 3, Discard Size: 10, Expected: 19, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 4, Discard Size: 0, Expected: 10, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 4, Discard Size: 1, Expected: 11, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 4, Discard Size: 2, Expected: 12, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 4, Discard Size: 3, Expected: 13, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 4, Discard Size: 4, Expected: 14, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 4, Discard Size: 5, Expected: 15, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 4, Discard Size: 6, Expected: 16, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 4, Discard Size: 7, Expected: 17, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 4, Discard Size: 8, Expected: 18, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 4, Discard Size: 9, Expected: 19, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 4, Discard Size: 10, Expected: 20, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 5, Discard Size: 0, Expected: 11, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 5, Discard Size: 1, Expected: 12, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 5, Discard Size: 2, Expected: 13, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 5, Discard Size: 3, Expected: 14, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 5, Discard Size: 4, Expected: 15, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 5, Discard Size: 5, Expected: 16, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 5, Discard Size: 6, Expected: 17, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 5, Discard Size: 7, Expected: 18, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 5, Discard Size: 8, Expected: 19, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 5, Discard Size: 9, Expected: 20, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 5, Discard Size: 10, Expected: 21, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 6, Discard Size: 0, Expected: 12, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 6, Discard Size: 1, Expected: 13, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 6, Discard Size: 2, Expected: 14, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 6, Discard Size: 3, Expected: 15, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 6, Discard Size: 4, Expected: 16, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 6, Discard Size: 5, Expected: 17, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 6, Discard Size: 6, Expected: 18, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 6, Discard Size: 7, Expected: 19, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 6, Discard Size: 8, Expected: 20, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 6, Discard Size: 9, Expected: 21, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 6, Discard Size: 10, Expected: 22, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 7, Discard Size: 0, Expected: 13, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 7, Discard Size: 1, Expected: 14, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 7, Discard Size: 2, Expected: 15, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 7, Discard Size: 3, Expected: 16, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 7, Discard Size: 4, Expected: 17, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 7, Discard Size: 5, Expected: 18, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 7, Discard Size: 6, Expected: 19, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 7, Discard Size: 7, Expected: 20, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 7, Discard Size: 8, Expected: 21, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 7, Discard Size: 9, Expected: 22, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 7, Discard Size: 10, Expected: 23, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 8, Discard Size: 0, Expected: 14, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 8, Discard Size: 1, Expected: 15, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 8, Discard Size: 2, Expected: 16, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 8, Discard Size: 3, Expected: 17, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 8, Discard Size: 4, Expected: 18, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 8, Discard Size: 5, Expected: 19, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 8, Discard Size: 6, Expected: 20, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 8, Discard Size: 7, Expected: 21, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 8, Discard Size: 8, Expected: 22, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 8, Discard Size: 9, Expected: 23, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 8, Discard Size: 10, Expected: 24, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 9, Discard Size: 0, Expected: 15, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 9, Discard Size: 1, Expected: 16, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 9, Discard Size: 2, Expected: 17, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 9, Discard Size: 3, Expected: 18, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 9, Discard Size: 4, Expected: 19, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 9, Discard Size: 5, Expected: 20, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 9, Discard Size: 6, Expected: 21, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 9, Discard Size: 7, Expected: 22, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 9, Discard Size: 8, Expected: 23, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 9, Discard Size: 9, Expected: 24, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 9, Discard Size: 10, Expected: 25, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 10, Discard Size: 0, Expected: 16, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 10, Discard Size: 1, Expected: 17, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 10, Discard Size: 2, Expected: 18, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 10, Discard Size: 3, Expected: 19, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 10, Discard Size: 4, Expected: 20, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 10, Discard Size: 5, Expected: 21, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 10, Discard Size: 6, Expected: 22, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 10, Discard Size: 7, Expected: 23, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 10, Discard Size: 8, Expected: 24, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 10, Discard Size: 9, Expected: 25, Result: Passed
Player: 1, Hand Size: 6, Deck Size: 10, Discard Size: 10, Expected: 26, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 0, Discard Size: 0, Expected: 7, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 0, Discard Size: 1, Expected: 8, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 0, Discard Size: 2, Expected: 9, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 0, Discard Size: 3, Expected: 10, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 0, Discard Size: 4, Expected: 11, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 0, Discard Size: 5, Expected: 12, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 0, Discard Size: 6, Expected: 13, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 0, Discard Size: 7, Expected: 14, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 0, Discard Size: 8, Expected: 15, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 0, Discard Size: 9, Expected: 16, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 0, Discard Size: 10, Expected: 17, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 1, Discard Size: 0, Expected: 8, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 1, Discard Size: 1, Expected: 9, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 1, Discard Size: 2, Expected: 10, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 1, Discard Size: 3, Expected: 11, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 1, Discard Size: 4, Expected: 12, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 1, Discard Size: 5, Expected: 13, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 1, Discard Size: 6, Expected: 14, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 1, Discard Size: 7, Expected: 15, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 1, Discard Size: 8, Expected: 16, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 1, Discard Size: 9, Expected: 17, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 1, Discard Size: 10, Expected: 18, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 2, Discard Size: 0, Expected: 9, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 2, Discard Size: 1, Expected: 10, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 2, Discard Size: 2, Expected: 11, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 2, Discard Size: 3, Expected: 12, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 2, Discard Size: 4, Expected: 13, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 2, Discard Size: 5, Expected: 14, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 2, Discard Size: 6, Expected: 15, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 2, Discard Size: 7, Expected: 16, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 2, Discard Size: 8, Expected: 17, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 2, Discard Size: 9, Expected: 18, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 2, Discard Size: 10, Expected: 19, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 3, Discard Size: 0, Expected: 10, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 3, Discard Size: 1, Expected: 11, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 3, Discard Size: 2, Expected: 12, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 3, Discard Size: 3, Expected: 13, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 3, Discard Size: 4, Expected: 14, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 3, Discard Size: 5, Expected: 15, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 3, Discard Size: 6, Expected: 16, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 3, Discard Size: 7, Expected: 17, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 3, Discard Size: 8, Expected: 18, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 3, Discard Size: 9, Expected: 19, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 3, Discard Size: 10, Expected: 20, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 4, Discard Size: 0, Expected: 11, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 4, Discard Size: 1, Expected: 12, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 4, Discard Size: 2, Expected: 13, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 4, Discard Size: 3, Expected: 14, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 4, Discard Size: 4, Expected: 15, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 4, Discard Size: 5, Expected: 16, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 4, Discard Size: 6, Expected: 17, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 4, Discard Size: 7, Expected: 18, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 4, Discard Size: 8, Expected: 19, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 4, Discard Size: 9, Expected: 20, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 4, Discard Size: 10, Expected: 21, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 5, Discard Size: 0, Expected: 12, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 5, Discard Size: 1, Expected: 13, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 5, Discard Size: 2, Expected: 14, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 5, Discard Size: 3, Expected: 15, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 5, Discard Size: 4, Expected: 16, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 5, Discard Size: 5, Expected: 17, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 5, Discard Size: 6, Expected: 18, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 5, Discard Size: 7, Expected: 19, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 5, Discard Size: 8, Expected: 20, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 5, Discard Size: 9, Expected: 21, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 5, Discard Size: 10, Expected: 22, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 6, Discard Size: 0, Expected: 13, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 6, Discard Size: 1, Expected: 14, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 6, Discard Size: 2, Expected: 15, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 6, Discard Size: 3, Expected: 16, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 6, Discard Size: 4, Expected: 17, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 6, Discard Size: 5, Expected: 18, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 6, Discard Size: 6, Expected: 19, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 6, Discard Size: 7, Expected: 20, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 6, Discard Size: 8, Expected: 21, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 6, Discard Size: 9, Expected: 22, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 6, Discard Size: 10, Expected: 23, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 7, Discard Size: 0, Expected: 14, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 7, Discard Size: 1, Expected: 15, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 7, Discard Size: 2, Expected: 16, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 7, Discard Size: 3, Expected: 17, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 7, Discard Size: 4, Expected: 18, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 7, Discard Size: 5, Expected: 19, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 7, Discard Size: 6, Expected: 20, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 7, Discard Size: 7, Expected: 21, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 7, Discard Size: 8, Expected: 22, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 7, Discard Size: 9, Expected: 23, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 7, Discard Size: 10, Expected: 24, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 8, Discard Size: 0, Expected: 15, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 8, Discard Size: 1, Expected: 16, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 8, Discard Size: 2, Expected: 17, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 8, Discard Size: 3, Expected: 18, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 8, Discard Size: 4, Expected: 19, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 8, Discard Size: 5, Expected: 20, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 8, Discard Size: 6, Expected: 21, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 8, Discard Size: 7, Expected: 22, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 8, Discard Size: 8, Expected: 23, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 8, Discard Size: 9, Expected: 24, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 8, Discard Size: 10, Expected: 25, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 9, Discard Size: 0, Expected: 16, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 9, Discard Size: 1, Expected: 17, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 9, Discard Size: 2, Expected: 18, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 9, Discard Size: 3, Expected: 19, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 9, Discard Size: 4, Expected: 20, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 9, Discard Size: 5, Expected: 21, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 9, Discard Size: 6, Expected: 22, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 9, Discard Size: 7, Expected: 23, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 9, Discard Size: 8, Expected: 24, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 9, Discard Size: 9, Expected: 25, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 9, Discard Size: 10, Expected: 26, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 10, Discard Size: 0, Expected: 17, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 10, Discard Size: 1, Expected: 18, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 10, Discard Size: 2, Expected: 19, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 10, Discard Size: 3, Expected: 20, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 10, Discard Size: 4, Expected: 21, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 10, Discard Size: 5, Expected: 22, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 10, Discard Size: 6, Expected: 23, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 10, Discard Size: 7, Expected: 24, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 10, Discard Size: 8, Expected: 25, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 10, Discard Size: 9, Expected: 26, Result: Passed
Player: 1, Hand Size: 7, Deck Size: 10, Discard Size: 10, Expected: 27, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 0, Discard Size: 0, Expected: 8, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 0, Discard Size: 1, Expected: 9, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 0, Discard Size: 2, Expected: 10, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 0, Discard Size: 3, Expected: 11, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 0, Discard Size: 4, Expected: 12, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 0, Discard Size: 5, Expected: 13, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 0, Discard Size: 6, Expected: 14, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 0, Discard Size: 7, Expected: 15, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 0, Discard Size: 8, Expected: 16, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 0, Discard Size: 9, Expected: 17, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 0, Discard Size: 10, Expected: 18, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 1, Discard Size: 0, Expected: 9, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 1, Discard Size: 1, Expected: 10, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 1, Discard Size: 2, Expected: 11, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 1, Discard Size: 3, Expected: 12, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 1, Discard Size: 4, Expected: 13, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 1, Discard Size: 5, Expected: 14, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 1, Discard Size: 6, Expected: 15, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 1, Discard Size: 7, Expected: 16, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 1, Discard Size: 8, Expected: 17, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 1, Discard Size: 9, Expected: 18, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 1, Discard Size: 10, Expected: 19, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 2, Discard Size: 0, Expected: 10, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 2, Discard Size: 1, Expected: 11, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 2, Discard Size: 2, Expected: 12, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 2, Discard Size: 3, Expected: 13, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 2, Discard Size: 4, Expected: 14, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 2, Discard Size: 5, Expected: 15, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 2, Discard Size: 6, Expected: 16, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 2, Discard Size: 7, Expected: 17, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 2, Discard Size: 8, Expected: 18, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 2, Discard Size: 9, Expected: 19, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 2, Discard Size: 10, Expected: 20, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 3, Discard Size: 0, Expected: 11, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 3, Discard Size: 1, Expected: 12, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 3, Discard Size: 2, Expected: 13, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 3, Discard Size: 3, Expected: 14, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 3, Discard Size: 4, Expected: 15, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 3, Discard Size: 5, Expected: 16, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 3, Discard Size: 6, Expected: 17, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 3, Discard Size: 7, Expected: 18, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 3, Discard Size: 8, Expected: 19, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 3, Discard Size: 9, Expected: 20, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 3, Discard Size: 10, Expected: 21, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 4, Discard Size: 0, Expected: 12, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 4, Discard Size: 1, Expected: 13, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 4, Discard Size: 2, Expected: 14, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 4, Discard Size: 3, Expected: 15, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 4, Discard Size: 4, Expected: 16, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 4, Discard Size: 5, Expected: 17, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 4, Discard Size: 6, Expected: 18, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 4, Discard Size: 7, Expected: 19, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 4, Discard Size: 8, Expected: 20, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 4, Discard Size: 9, Expected: 21, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 4, Discard Size: 10, Expected: 22, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 5, Discard Size: 0, Expected: 13, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 5, Discard Size: 1, Expected: 14, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 5, Discard Size: 2, Expected: 15, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 5, Discard Size: 3, Expected: 16, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 5, Discard Size: 4, Expected: 17, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 5, Discard Size: 5, Expected: 18, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 5, Discard Size: 6, Expected: 19, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 5, Discard Size: 7, Expected: 20, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 5, Discard Size: 8, Expected: 21, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 5, Discard Size: 9, Expected: 22, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 5, Discard Size: 10, Expected: 23, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 6, Discard Size: 0, Expected: 14, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 6, Discard Size: 1, Expected: 15, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 6, Discard Size: 2, Expected: 16, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 6, Discard Size: 3, Expected: 17, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 6, Discard Size: 4, Expected: 18, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 6, Discard Size: 5, Expected: 19, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 6, Discard Size: 6, Expected: 20, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 6, Discard Size: 7, Expected: 21, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 6, Discard Size: 8, Expected: 22, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 6, Discard Size: 9, Expected: 23, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 6, Discard Size: 10, Expected: 24, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 7, Discard Size: 0, Expected: 15, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 7, Discard Size: 1, Expected: 16, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 7, Discard Size: 2, Expected: 17, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 7, Discard Size: 3, Expected: 18, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 7, Discard Size: 4, Expected: 19, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 7, Discard Size: 5, Expected: 20, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 7, Discard Size: 6, Expected: 21, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 7, Discard Size: 7, Expected: 22, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 7, Discard Size: 8, Expected: 23, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 7, Discard Size: 9, Expected: 24, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 7, Discard Size: 10, Expected: 25, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 8, Discard Size: 0, Expected: 16, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 8, Discard Size: 1, Expected: 17, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 8, Discard Size: 2, Expected: 18, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 8, Discard Size: 3, Expected: 19, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 8, Discard Size: 4, Expected: 20, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 8, Discard Size: 5, Expected: 21, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 8, Discard Size: 6, Expected: 22, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 8, Discard Size: 7, Expected: 23, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 8, Discard Size: 8, Expected: 24, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 8, Discard Size: 9, Expected: 25, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 8, Discard Size: 10, Expected: 26, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 9, Discard Size: 0, Expected: 17, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 9, Discard Size: 1, Expected: 18, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 9, Discard Size: 2, Expected: 19, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 9, Discard Size: 3, Expected: 20, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 9, Discard Size: 4, Expected: 21, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 9, Discard Size: 5, Expected: 22, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 9, Discard Size: 6, Expected: 23, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 9, Discard Size: 7, Expected: 24, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 9, Discard Size: 8, Expected: 25, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 9, Discard Size: 9, Expected: 26, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 9, Discard Size: 10, Expected: 27, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 10, Discard Size: 0, Expected: 18, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 10, Discard Size: 1, Expected: 19, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 10, Discard Size: 2, Expected: 20, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 10, Discard Size: 3, Expected: 21, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 10, Discard Size: 4, Expected: 22, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 10, Discard Size: 5, Expected: 23, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 10, Discard Size: 6, Expected: 24, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 10, Discard Size: 7, Expected: 25, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 10, Discard Size: 8, Expected: 26, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 10, Discard Size: 9, Expected: 27, Result: Passed
Player: 1, Hand Size: 8, Deck Size: 10, Discard Size: 10, Expected: 28, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 0, Discard Size: 0, Expected: 9, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 0, Discard Size: 1, Expected: 10, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 0, Discard Size: 2, Expected: 11, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 0, Discard Size: 3, Expected: 12, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 0, Discard Size: 4, Expected: 13, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 0, Discard Size: 5, Expected: 14, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 0, Discard Size: 6, Expected: 15, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 0, Discard Size: 7, Expected: 16, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 0, Discard Size: 8, Expected: 17, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 0, Discard Size: 9, Expected: 18, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 0, Discard Size: 10, Expected: 19, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 1, Discard Size: 0, Expected: 10, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 1, Discard Size: 1, Expected: 11, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 1, Discard Size: 2, Expected: 12, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 1, Discard Size: 3, Expected: 13, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 1, Discard Size: 4, Expected: 14, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 1, Discard Size: 5, Expected: 15, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 1, Discard Size: 6, Expected: 16, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 1, Discard Size: 7, Expected: 17, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 1, Discard Size: 8, Expected: 18, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 1, Discard Size: 9, Expected: 19, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 1, Discard Size: 10, Expected: 20, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 2, Discard Size: 0, Expected: 11, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 2, Discard Size: 1, Expected: 12, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 2, Discard Size: 2, Expected: 13, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 2, Discard Size: 3, Expected: 14, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 2, Discard Size: 4, Expected: 15, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 2, Discard Size: 5, Expected: 16, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 2, Discard Size: 6, Expected: 17, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 2, Discard Size: 7, Expected: 18, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 2, Discard Size: 8, Expected: 19, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 2, Discard Size: 9, Expected: 20, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 2, Discard Size: 10, Expected: 21, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 3, Discard Size: 0, Expected: 12, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 3, Discard Size: 1, Expected: 13, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 3, Discard Size: 2, Expected: 14, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 3, Discard Size: 3, Expected: 15, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 3, Discard Size: 4, Expected: 16, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 3, Discard Size: 5, Expected: 17, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 3, Discard Size: 6, Expected: 18, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 3, Discard Size: 7, Expected: 19, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 3, Discard Size: 8, Expected: 20, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 3, Discard Size: 9, Expected: 21, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 3, Discard Size: 10, Expected: 22, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 4, Discard Size: 0, Expected: 13, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 4, Discard Size: 1, Expected: 14, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 4, Discard Size: 2, Expected: 15, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 4, Discard Size: 3, Expected: 16, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 4, Discard Size: 4, Expected: 17, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 4, Discard Size: 5, Expected: 18, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 4, Discard Size: 6, Expected: 19, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 4, Discard Size: 7, Expected: 20, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 4, Discard Size: 8, Expected: 21, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 4, Discard Size: 9, Expected: 22, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 4, Discard Size: 10, Expected: 23, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 5, Discard Size: 0, Expected: 14, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 5, Discard Size: 1, Expected: 15, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 5, Discard Size: 2, Expected: 16, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 5, Discard Size: 3, Expected: 17, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 5, Discard Size: 4, Expected: 18, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 5, Discard Size: 5, Expected: 19, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 5, Discard Size: 6, Expected: 20, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 5, Discard Size: 7, Expected: 21, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 5, Discard Size: 8, Expected: 22, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 5, Discard Size: 9, Expected: 23, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 5, Discard Size: 10, Expected: 24, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 6, Discard Size: 0, Expected: 15, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 6, Discard Size: 1, Expected: 16, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 6, Discard Size: 2, Expected: 17, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 6, Discard Size: 3, Expected: 18, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 6, Discard Size: 4, Expected: 19, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 6, Discard Size: 5, Expected: 20, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 6, Discard Size: 6, Expected: 21, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 6, Discard Size: 7, Expected: 22, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 6, Discard Size: 8, Expected: 23, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 6, Discard Size: 9, Expected: 24, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 6, Discard Size: 10, Expected: 25, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 7, Discard Size: 0, Expected: 16, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 7, Discard Size: 1, Expected: 17, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 7, Discard Size: 2, Expected: 18, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 7, Discard Size: 3, Expected: 19, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 7, Discard Size: 4, Expected: 20, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 7, Discard Size: 5, Expected: 21, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 7, Discard Size: 6, Expected: 22, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 7, Discard Size: 7, Expected: 23, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 7, Discard Size: 8, Expected: 24, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 7, Discard Size: 9, Expected: 25, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 7, Discard Size: 10, Expected: 26, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 8, Discard Size: 0, Expected: 17, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 8, Discard Size: 1, Expected: 18, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 8, Discard Size: 2, Expected: 19, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 8, Discard Size: 3, Expected: 20, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 8, Discard Size: 4, Expected: 21, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 8, Discard Size: 5, Expected: 22, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 8, Discard Size: 6, Expected: 23, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 8, Discard Size: 7, Expected: 24, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 8, Discard Size: 8, Expected: 25, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 8, Discard Size: 9, Expected: 26, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 8, Discard Size: 10, Expected: 27, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 9, Discard Size: 0, Expected: 18, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 9, Discard Size: 1, Expected: 19, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 9, Discard Size: 2, Expected: 20, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 9, Discard Size: 3, Expected: 21, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 9, Discard Size: 4, Expected: 22, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 9, Discard Size: 5, Expected: 23, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 9, Discard Size: 6, Expected: 24, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 9, Discard Size: 7, Expected: 25, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 9, Discard Size: 8, Expected: 26, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 9, Discard Size: 9, Expected: 27, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 9, Discard Size: 10, Expected: 28, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 10, Discard Size: 0, Expected: 19, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 10, Discard Size: 1, Expected: 20, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 10, Discard Size: 2, Expected: 21, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 10, Discard Size: 3, Expected: 22, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 10, Discard Size: 4, Expected: 23, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 10, Discard Size: 5, Expected: 24, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 10, Discard Size: 6, Expected: 25, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 10, Discard Size: 7, Expected: 26, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 10, Discard Size: 8, Expected: 27, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 10, Discard Size: 9, Expected: 28, Result: Passed
Player: 1, Hand Size: 9, Deck Size: 10, Discard Size: 10, Expected: 29, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 0, Discard Size: 0, Expected: 10, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 0, Discard Size: 1, Expected: 11, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 0, Discard Size: 2, Expected: 12, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 0, Discard Size: 3, Expected: 13, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 0, Discard Size: 4, Expected: 14, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 0, Discard Size: 5, Expected: 15, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 0, Discard Size: 6, Expected: 16, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 0, Discard Size: 7, Expected: 17, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 0, Discard Size: 8, Expected: 18, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 0, Discard Size: 9, Expected: 19, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 0, Discard Size: 10, Expected: 20, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 1, Discard Size: 0, Expected: 11, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 1, Discard Size: 1, Expected: 12, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 1, Discard Size: 2, Expected: 13, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 1, Discard Size: 3, Expected: 14, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 1, Discard Size: 4, Expected: 15, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 1, Discard Size: 5, Expected: 16, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 1, Discard Size: 6, Expected: 17, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 1, Discard Size: 7, Expected: 18, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 1, Discard Size: 8, Expected: 19, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 1, Discard Size: 9, Expected: 20, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 1, Discard Size: 10, Expected: 21, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 2, Discard Size: 0, Expected: 12, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 2, Discard Size: 1, Expected: 13, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 2, Discard Size: 2, Expected: 14, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 2, Discard Size: 3, Expected: 15, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 2, Discard Size: 4, Expected: 16, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 2, Discard Size: 5, Expected: 17, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 2, Discard Size: 6, Expected: 18, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 2, Discard Size: 7, Expected: 19, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 2, Discard Size: 8, Expected: 20, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 2, Discard Size: 9, Expected: 21, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 2, Discard Size: 10, Expected: 22, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 3, Discard Size: 0, Expected: 13, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 3, Discard Size: 1, Expected: 14, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 3, Discard Size: 2, Expected: 15, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 3, Discard Size: 3, Expected: 16, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 3, Discard Size: 4, Expected: 17, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 3, Discard Size: 5, Expected: 18, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 3, Discard Size: 6, Expected: 19, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 3, Discard Size: 7, Expected: 20, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 3, Discard Size: 8, Expected: 21, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 3, Discard Size: 9, Expected: 22, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 3, Discard Size: 10, Expected: 23, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 4, Discard Size: 0, Expected: 14, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 4, Discard Size: 1, Expected: 15, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 4, Discard Size: 2, Expected: 16, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 4, Discard Size: 3, Expected: 17, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 4, Discard Size: 4, Expected: 18, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 4, Discard Size: 5, Expected: 19, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 4, Discard Size: 6, Expected: 20, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 4, Discard Size: 7, Expected: 21, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 4, Discard Size: 8, Expected: 22, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 4, Discard Size: 9, Expected: 23, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 4, Discard Size: 10, Expected: 24, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 5, Discard Size: 0, Expected: 15, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 5, Discard Size: 1, Expected: 16, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 5, Discard Size: 2, Expected: 17, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 5, Discard Size: 3, Expected: 18, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 5, Discard Size: 4, Expected: 19, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 5, Discard Size: 5, Expected: 20, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 5, Discard Size: 6, Expected: 21, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 5, Discard Size: 7, Expected: 22, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 5, Discard Size: 8, Expected: 23, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 5, Discard Size: 9, Expected: 24, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 5, Discard Size: 10, Expected: 25, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 6, Discard Size: 0, Expected: 16, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 6, Discard Size: 1, Expected: 17, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 6, Discard Size: 2, Expected: 18, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 6, Discard Size: 3, Expected: 19, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 6, Discard Size: 4, Expected: 20, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 6, Discard Size: 5, Expected: 21, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 6, Discard Size: 6, Expected: 22, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 6, Discard Size: 7, Expected: 23, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 6, Discard Size: 8, Expected: 24, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 6, Discard Size: 9, Expected: 25, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 6, Discard Size: 10, Expected: 26, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 7, Discard Size: 0, Expected: 17, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 7, Discard Size: 1, Expected: 18, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 7, Discard Size: 2, Expected: 19, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 7, Discard Size: 3, Expected: 20, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 7, Discard Size: 4, Expected: 21, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 7, Discard Size: 5, Expected: 22, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 7, Discard Size: 6, Expected: 23, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 7, Discard Size: 7, Expected: 24, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 7, Discard Size: 8, Expected: 25, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 7, Discard Size: 9, Expected: 26, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 7, Discard Size: 10, Expected: 27, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 8, Discard Size: 0, Expected: 18, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 8, Discard Size: 1, Expected: 19, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 8, Discard Size: 2, Expected: 20, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 8, Discard Size: 3, Expected: 21, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 8, Discard Size: 4, Expected: 22, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 8, Discard Size: 5, Expected: 23, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 8, Discard Size: 6, Expected: 24, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 8, Discard Size: 7, Expected: 25, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 8, Discard Size: 8, Expected: 26, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 8, Discard Size: 9, Expected: 27, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 8, Discard Size: 10, Expected: 28, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 9, Discard Size: 0, Expected: 19, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 9, Discard Size: 1, Expected: 20, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 9, Discard Size: 2, Expected: 21, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 9, Discard Size: 3, Expected: 22, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 9, Discard Size: 4, Expected: 23, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 9, Discard Size: 5, Expected: 24, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 9, Discard Size: 6, Expected: 25, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 9, Discard Size: 7, Expected: 26, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 9, Discard Size: 8, Expected: 27, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 9, Discard Size: 9, Expected: 28, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 9, Discard Size: 10, Expected: 29, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 10, Discard Size: 0, Expected: 20, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 10, Discard Size: 1, Expected: 21, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 10, Discard Size: 2, Expected: 22, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 10, Discard Size: 3, Expected: 23, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 10, Discard Size: 4, Expected: 24, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 10, Discard Size: 5, Expected: 25, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 10, Discard Size: 6, Expected: 26, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 10, Discard Size: 7, Expected: 27, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 10, Discard Size: 8, Expected: 28, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 10, Discard Size: 9, Expected: 29, Result: Passed
Player: 1, Hand Size: 10, Deck Size: 10, Discard Size: 10, Expected: 30, Result: Passed
All tests passed!

Times ran: 2662 | Tests Failed: 0
File 'dominion.c'
Lines executed:19.46% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/***** Refactored cards - now with bugs!*****/
        -:    9:
        -:   10:/* Smithy */
        -:   11:/* Card Test 1 */
        -:   12:/* Random tester card1 */
    #####:   13:int play_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:   14:{
        -:   15:	int i;
        -:   16:
        -:   17:      //+3 Cards
    #####:   18:        for (i = 1; i < 3; i++) /* BUG: i = 1 instead of i = 0 */
        -:   19:	{
    #####:   20:	  drawCard(currentPlayer, state);
        -:   21:	}
        -:   22:			
        -:   23:      //discard card from hand
    #####:   24:      discardCard(handPos, currentPlayer, state, 0);
    #####:   25:      return 0;
        -:   26:}
        -:   27:
        -:   28:/* Adventurer */
        -:   29:/* Card Test 2 */
        -:   30:/* Random tester */
    #####:   31:int play_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:   32:{
        -:   33:	int cardDrawn;
        -:   34:
    #####:   35:	while(drawntreasure<2){
    #####:   36:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   37:		  shuffle(currentPlayer, state);
        -:   38:		}
    #####:   39:		drawCard(currentPlayer, state);
    #####:   40:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   41:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   42:		  drawntreasure++;
        -:   43:		else{
    #####:   44:		  temphand[z]=cardDrawn;
    #####:   45:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   46:		  z++;
        -:   47:		}
        -:   48:	      }
    #####:   49:	      while(z-1>0){ /* BUG: '>' instead of '>=' */
    #####:   50:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   51:		z=z-1;
        -:   52:	      }
    #####:   53:	      return 0;
        -:   54:}
        -:   55:
        -:   56:/* Council Room */
        -:   57:/* Card Test 3 */
    #####:   58:int play_council_room(int currentPlayer, struct gameState *state, int handPos)
        -:   59:{
        -:   60:	int i;
        -:   61:
        -:   62:      //+4 Cards
    #####:   63:      for (i = 0; i < 3; i++) /* BUG: draw 3 cards instead of 4 */
        -:   64:	{
    #####:   65:	  drawCard(currentPlayer, state);
        -:   66:	}
        -:   67:			
        -:   68:      //+1 Buy
    #####:   69:      state->numBuys++;
        -:   70:			
        -:   71:      //Each other player draws a card
    #####:   72:      for (i = 0; i < state->numPlayers; i++)
        -:   73:	{
    #####:   74:	  if ( i != currentPlayer )
        -:   75:	    {
    #####:   76:	      drawCard(i, state);
        -:   77:	    }
        -:   78:	}
        -:   79:			
        -:   80:      //put played card in played card pile
    #####:   81:      discardCard(handPos, currentPlayer, state, 0);
        -:   82:			
    #####:   83:      return 0;
        -:   84:}
        -:   85:
        -:   86:/* Mine */
    #####:   87:int play_mine(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:   88:{
        -:   89:	int i;
        -:   90:	int j;
        -:   91:
    #####:   92:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:   93:
    #####:   94:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:   95:	  {
    #####:   96:	    return -1;
        -:   97:	  }
        -:   98:		  
    #####:   99:	if (choice2 > treasure_map || choice2 < curse)
        -:  100:	  {
    #####:  101:	    return -1;
        -:  102:	  }
        -:  103:
    #####:  104:	if ( (getCost(state->hand[currentPlayer][choice1]) + 4) > getCost(choice2) ) /* BUG: Gain treasure costing up to 4 more instead of 3 */
        -:  105:	  {
    #####:  106:	    return -1;
        -:  107:	  }
        -:  108:
    #####:  109:	gainCard(choice2, state, 2, currentPlayer);
        -:  110:
        -:  111:	//discard card from hand
    #####:  112:	discardCard(handPos, currentPlayer, state, 0);
        -:  113:
        -:  114:	//discard trashed card
    #####:  115:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  116:	  {
    #####:  117:	    if (state->hand[currentPlayer][i] == j)
        -:  118:	      {
    #####:  119:		discardCard(i, currentPlayer, state, 0);			
    #####:  120:		break;
        -:  121:	      }
        -:  122:	  }
        -:  123:			  
    #####:  124:	return 0;
        -:  125:}
        -:  126:
        -:  127:/* Remodel */
    #####:  128:int play_remodel(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  129:{
        -:  130:	int i;
        -:  131:	int j;
        -:  132:
    #####:  133:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  134:
    #####:  135:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  136:	{
    #####:  137:	  return -1;
        -:  138:	}
        -:  139:
    #####:  140:      gainCard(choice2, state, 0, currentPlayer);
        -:  141:
        -:  142:      //discard card from hand
    #####:  143:      discardCard(handPos, currentPlayer, state, 0);
        -:  144:
        -:  145:      //discard trashed card
    #####:  146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  147:	{
    #####:  148:	  if (state->hand[currentPlayer][i] == j)
        -:  149:	    {
    #####:  150:	      discardCard(i, currentPlayer, state, 0);			
    #####:  151:	      break;
        -:  152:	    }
        -:  153:	}
        -:  154:
        -:  155:
    #####:  156:      return 0;
        -:  157:}
        -:  158:
        -:  159:/* Village */
        -:  160:/* Card Test 4 */
        -:  161:/* Random tester card 2 */
    #####:  162:int play_village(int currentPlayer, struct gameState *state, int handPos)
        -:  163:{
        -:  164:      //+1 Card
    #####:  165:      drawCard(currentPlayer, state);
        -:  166:			
        -:  167:      //+2 Actions
    #####:  168:      state->numActions = state->numActions + 2;
        -:  169:			
        -:  170:      //discard played card from hand
    #####:  171:      discardCard(handPos, currentPlayer, state, 0);
    #####:  172:      return 0;
        -:  173:}
        -:  174:
        -:  175:/***** End refactoring *****/
        -:  176:
        -:  177:
   122590:  178:int compare(const void* a, const void* b) {
   122590:  179:  if (*(int*)a > *(int*)b)
     4950:  180:    return 1;
   117640:  181:  if (*(int*)a < *(int*)b)
    34974:  182:    return -1;
    82666:  183:  return 0;
        -:  184:}
        -:  185:
    #####:  186:struct gameState* newGame() {
    #####:  187:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  188:  return g;
        -:  189:}
        -:  190:
    #####:  191:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  192:		  int k8, int k9, int k10) {
    #####:  193:  int* k = malloc(10 * sizeof(int));
    #####:  194:  k[0] = k1;
    #####:  195:  k[1] = k2;
    #####:  196:  k[2] = k3;
    #####:  197:  k[3] = k4;
    #####:  198:  k[4] = k5;
    #####:  199:  k[5] = k6;
    #####:  200:  k[6] = k7;
    #####:  201:  k[7] = k8;
    #####:  202:  k[8] = k9;
    #####:  203:  k[9] = k10;
    #####:  204:  return k;
        -:  205:}
        -:  206:
     3753:  207:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  208:		   struct gameState *state) {
        -:  209:
        -:  210:  int i;
        -:  211:  int j;
        -:  212:  int it;			
        -:  213:  //set up random number generator
     3753:  214:  SelectStream(1);
     3753:  215:  PutSeed((long)randomSeed);
        -:  216:  
        -:  217:  //check number of players
     3753:  218:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  219:    {
    #####:  220:      return -1;
        -:  221:    }
        -:  222:
        -:  223:  //set number of players
     3753:  224:  state->numPlayers = numPlayers;
        -:  225:
        -:  226:  //check selected kingdom cards are different
    41283:  227:  for (i = 0; i < 10; i++)
        -:  228:    {
   412830:  229:      for (j = 0; j < 10; j++)
        -:  230:        {
   375300:  231:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  232:	    {
    #####:  233:	      return -1;
        -:  234:	    }
        -:  235:        }
        -:  236:    }
        -:  237:
        -:  238:
        -:  239:  //initialize supply
        -:  240:  ///////////////////////////////
        -:  241:
        -:  242:  //set number of Curse cards
     3753:  243:  if (numPlayers == 2)
        -:  244:    {
     3753:  245:      state->supplyCount[curse] = 10;
        -:  246:    }
    #####:  247:  else if (numPlayers == 3)
        -:  248:    {
    #####:  249:      state->supplyCount[curse] = 20;
        -:  250:    }
        -:  251:  else
        -:  252:    {
    #####:  253:      state->supplyCount[curse] = 30;
        -:  254:    }
        -:  255:
        -:  256:  //set number of Victory cards
     3753:  257:  if (numPlayers == 2)
        -:  258:    {
     3753:  259:      state->supplyCount[estate] = 8;
     3753:  260:      state->supplyCount[duchy] = 8;
     3753:  261:      state->supplyCount[province] = 8;
        -:  262:    }
        -:  263:  else
        -:  264:    {
    #####:  265:      state->supplyCount[estate] = 12;
    #####:  266:      state->supplyCount[duchy] = 12;
    #####:  267:      state->supplyCount[province] = 12;
        -:  268:    }
        -:  269:
        -:  270:  //set number of Treasure cards
     3753:  271:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     3753:  272:  state->supplyCount[silver] = 40;
     3753:  273:  state->supplyCount[gold] = 30;
        -:  274:
        -:  275:  //set number of Kingdom cards
    78813:  276:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  277:    {
   619245:  278:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  279:	{
   581715:  280:	  if (kingdomCards[j] == i)
        -:  281:	    {
        -:  282:	      //check if card is a 'Victory' Kingdom card
    37530:  283:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  284:		{
    15012:  285:		  if (numPlayers == 2){ 
     7506:  286:		    state->supplyCount[i] = 8; 
        -:  287:		  }
    #####:  288:		  else{ state->supplyCount[i] = 12; }
        -:  289:		}
        -:  290:	      else
        -:  291:		{
    30024:  292:		  state->supplyCount[i] = 10;
        -:  293:		}
    37530:  294:	      break;
        -:  295:	    }
        -:  296:	  else    //card is not in the set choosen for the game
        -:  297:	    {
   544185:  298:	      state->supplyCount[i] = -1;
        -:  299:	    }
        -:  300:	}
        -:  301:
        -:  302:    }
        -:  303:
        -:  304:  ////////////////////////
        -:  305:  //supply intilization complete
        -:  306:
        -:  307:  //set player decks
    11259:  308:  for (i = 0; i < numPlayers; i++)
        -:  309:    {
     7506:  310:      state->deckCount[i] = 0;
    30024:  311:      for (j = 0; j < 3; j++)
        -:  312:	{
    22518:  313:	  state->deck[i][j] = estate;
    22518:  314:	  state->deckCount[i]++;
        -:  315:	}
    60048:  316:      for (j = 3; j < 10; j++)
        -:  317:	{
    52542:  318:	  state->deck[i][j] = copper;
    52542:  319:	  state->deckCount[i]++;		
        -:  320:	}
        -:  321:    }
        -:  322:
        -:  323:  //shuffle player decks
    11259:  324:  for (i = 0; i < numPlayers; i++)
        -:  325:    {
     7506:  326:      if ( shuffle(i, state) < 0 )
        -:  327:	{
    #####:  328:	  return -1;
        -:  329:	}
        -:  330:    }
        -:  331:
        -:  332:  //draw player hands
    11259:  333:  for (i = 0; i < numPlayers; i++)
        -:  334:    {  
        -:  335:      //initialize hand size to zero
     7506:  336:      state->handCount[i] = 0;
     7506:  337:      state->discardCount[i] = 0;
        -:  338:      //draw 5 cards
        -:  339:      // for (j = 0; j < 5; j++)
        -:  340:      //	{
        -:  341:      //	  drawCard(i, state);
        -:  342:      //	}
        -:  343:    }
        -:  344:  
        -:  345:  //set embargo tokens to 0 for all supply piles
   105084:  346:  for (i = 0; i <= treasure_map; i++)
        -:  347:    {
   101331:  348:      state->embargoTokens[i] = 0;
        -:  349:    }
        -:  350:
        -:  351:  //initialize first player's turn
     3753:  352:  state->outpostPlayed = 0;
     3753:  353:  state->phase = 0;
     3753:  354:  state->numActions = 1;
     3753:  355:  state->numBuys = 1;
     3753:  356:  state->playedCardCount = 0;
     3753:  357:  state->whoseTurn = 0;
     3753:  358:  state->handCount[state->whoseTurn] = 0;
        -:  359:  //int it; move to top
        -:  360:
        -:  361:  //Moved draw cards to here, only drawing at the start of a turn
    22518:  362:  for (it = 0; it < 5; it++){
    18765:  363:    drawCard(state->whoseTurn, state);
        -:  364:  }
        -:  365:
     3753:  366:  updateCoins(state->whoseTurn, state, 0);
        -:  367:
     3753:  368:  return 0;
        -:  369:}
        -:  370:
     7506:  371:int shuffle(int player, struct gameState *state) {
        -:  372: 
        -:  373:
        -:  374:  int newDeck[MAX_DECK];
     7506:  375:  int newDeckPos = 0;
        -:  376:  int card;
        -:  377:  int i;
        -:  378:
     7506:  379:  if (state->deckCount[player] < 1)
    #####:  380:    return -1;
     7506:  381:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  382:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  383:
    90072:  384:  while (state->deckCount[player] > 0) {
    75060:  385:    card = floor(Random() * state->deckCount[player]);
    75060:  386:    newDeck[newDeckPos] = state->deck[player][card];
    75060:  387:    newDeckPos++;
   262710:  388:    for (i = card; i < state->deckCount[player]-1; i++) {
   187650:  389:      state->deck[player][i] = state->deck[player][i+1];
        -:  390:    }
    75060:  391:    state->deckCount[player]--;
        -:  392:  }
    82566:  393:  for (i = 0; i < newDeckPos; i++) {
    75060:  394:    state->deck[player][i] = newDeck[i];
    75060:  395:    state->deckCount[player]++;
        -:  396:  }
        -:  397:
     7506:  398:  return 0;
        -:  399:}
        -:  400:
    #####:  401:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  402:{	
        -:  403:  int card;
    #####:  404:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  405:
        -:  406:  //check if it is the right phase
    #####:  407:  if (state->phase != 0)
        -:  408:    {
    #####:  409:      return -1;
        -:  410:    }
        -:  411:	
        -:  412:  //check if player has enough actions
    #####:  413:  if ( state->numActions < 1 )
        -:  414:    {
    #####:  415:      return -1;
        -:  416:    }
        -:  417:	
        -:  418:  //get card played
    #####:  419:  card = handCard(handPos, state);
        -:  420:	
        -:  421:  //check if selected card is an action
    #####:  422:  if ( card < adventurer || card > treasure_map )
        -:  423:    {
    #####:  424:      return -1;
        -:  425:    }
        -:  426:	
        -:  427:  //play card
    #####:  428:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  429:    {
    #####:  430:      return -1;
        -:  431:    }
        -:  432:	
        -:  433:  //reduce number of actions
    #####:  434:  state->numActions--;
        -:  435:
        -:  436:  //update coins (Treasure cards may be added with card draws)
    #####:  437:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  438:	
    #####:  439:  return 0;
        -:  440:}
        -:  441:
    #####:  442:int buyCard(int supplyPos, struct gameState *state) {
        -:  443:  int who;
        -:  444:  if (DEBUG){
        -:  445:    printf("Entering buyCard...\n");
        -:  446:  }
        -:  447:
        -:  448:  // I don't know what to do about the phase thing.
        -:  449:
    #####:  450:  who = state->whoseTurn;
        -:  451:
    #####:  452:  if (state->numBuys < 1){
        -:  453:    if (DEBUG)
        -:  454:      printf("You do not have any buys left\n");
    #####:  455:    return -1;
    #####:  456:  } else if (supplyCount(supplyPos, state) <1){
        -:  457:    if (DEBUG)
        -:  458:      printf("There are not any of that type of card left\n");
    #####:  459:    return -1;
    #####:  460:  } else if (state->coins < getCost(supplyPos)){
        -:  461:    if (DEBUG) 
        -:  462:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  463:    return -1;
        -:  464:  } else {
    #####:  465:    state->phase=1;
        -:  466:    //state->supplyCount[supplyPos]--;
    #####:  467:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  468:  
    #####:  469:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  470:    state->numBuys--;
        -:  471:    if (DEBUG)
        -:  472:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  473:  }
        -:  474:
        -:  475:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  476:  //state->discardCount[who]++;
        -:  477:    
    #####:  478:  return 0;
        -:  479:}
        -:  480:
        -:  481:/***** Use this function for Unit test 4 *****/
    #####:  482:int numHandCards(struct gameState *state) {
    #####:  483:  return state->handCount[ whoseTurn(state) ];
        -:  484:}
        -:  485:
    #####:  486:int handCard(int handPos, struct gameState *state) {
    #####:  487:  int currentPlayer = whoseTurn(state);
    #####:  488:  return state->hand[currentPlayer][handPos];
        -:  489:}
        -:  490:
        -:  491:/***** Use this function for Unit test 3 *****/
    #####:  492:int supplyCount(int card, struct gameState *state) {
    #####:  493:  return state->supplyCount[card];
        -:  494:}
        -:  495:
     2662:  496:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  497:  int i;
     2662:  498:  int count = 0;
        -:  499:
    15972:  500:  for (i = 0; i < state->deckCount[player]; i++)
        -:  501:    {
    13310:  502:      if (state->deck[player][i] == card) count++;
        -:  503:    }
        -:  504:
    15972:  505:  for (i = 0; i < state->handCount[player]; i++)
        -:  506:    {
    13310:  507:      if (state->hand[player][i] == card) count++;
        -:  508:    }
        -:  509:
    15972:  510:  for (i = 0; i < state->discardCount[player]; i++)
        -:  511:    {
    13310:  512:      if (state->discard[player][i] == card) count++;
        -:  513:    }
        -:  514:
     2662:  515:  return count;
        -:  516:}
        -:  517:
    #####:  518:int whoseTurn(struct gameState *state) {
    #####:  519:  return state->whoseTurn;
        -:  520:}
        -:  521:
    #####:  522:int endTurn(struct gameState *state) {
        -:  523:  int k;
        -:  524:  int i;
    #####:  525:  int currentPlayer = whoseTurn(state);
        -:  526:  
        -:  527:  //Discard hand
    #####:  528:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  529:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  530:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  531:  }
    #####:  532:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  533:    
        -:  534:  //Code for determining the player
    #####:  535:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  536:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  537:  }
        -:  538:  else{
    #####:  539:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  540:  }
        -:  541:
    #####:  542:  state->outpostPlayed = 0;
    #####:  543:  state->phase = 0;
    #####:  544:  state->numActions = 1;
    #####:  545:  state->coins = 0;
    #####:  546:  state->numBuys = 1;
    #####:  547:  state->playedCardCount = 0;
    #####:  548:  state->handCount[state->whoseTurn] = 0;
        -:  549:
        -:  550:  //int k; move to top
        -:  551:  //Next player draws hand
    #####:  552:  for (k = 0; k < 5; k++){
    #####:  553:    drawCard(state->whoseTurn, state);//Draw a card
        -:  554:  }
        -:  555:
        -:  556:  //Update money
    #####:  557:  updateCoins(state->whoseTurn, state , 0);
        -:  558:
    #####:  559:  return 0;
        -:  560:}
        -:  561:
        -:  562:/***** Use this function for Unit test 1 *****/
       90:  563:int isGameOver(struct gameState *state) {
        -:  564:  int i;
        -:  565:  int j;
        -:  566:	
        -:  567:  //if stack of Province cards is empty, the game ends
       90:  568:  if (state->supplyCount[province] == 0)
        -:  569:    {
       26:  570:      return 1;
        -:  571:    }
        -:  572:
        -:  573:  //if three supply pile are at 0, the game ends
       64:  574:  j = 0;
     1664:  575:  for (i = 0; i < 25; i++)
        -:  576:    {
     1600:  577:      if (state->supplyCount[i] == 0)
        -:  578:	{
       96:  579:	  j++;
        -:  580:	}
        -:  581:    }
       64:  582:  if ( j >= 3)
        -:  583:    {
       16:  584:      return 1;
        -:  585:    }
        -:  586:
       48:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int scoreFor (int player, struct gameState *state) {
        -:  591:
        -:  592:  int i;
    #####:  593:  int score = 0;
        -:  594:  //score from hand
    #####:  595:  for (i = 0; i < state->handCount[player]; i++)
        -:  596:    {
    #####:  597:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  598:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  599:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  600:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  601:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  602:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  603:    }
        -:  604:
        -:  605:  //score from discard
    #####:  606:  for (i = 0; i < state->discardCount[player]; i++)
        -:  607:    {
    #####:  608:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  609:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  610:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  611:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  612:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  613:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  614:    }
        -:  615:
        -:  616:  //score from deck
    #####:  617:  for (i = 0; i < state->discardCount[player]; i++)
        -:  618:    {
    #####:  619:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  620:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  621:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  622:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  623:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  624:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  625:    }
        -:  626:
    #####:  627:  return score;
        -:  628:}
        -:  629:
    #####:  630:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  631:  int i;	
        -:  632:  int j;
        -:  633:  int highScore;
        -:  634:  int currentPlayer;
        -:  635:
        -:  636:  //get score for each player
    #####:  637:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  638:    {
        -:  639:      //set unused player scores to -9999
    #####:  640:      if (i >= state->numPlayers)
        -:  641:	{
    #####:  642:	  players[i] = -9999;
        -:  643:	}
        -:  644:      else
        -:  645:	{
    #####:  646:	  players[i] = scoreFor (i, state);
        -:  647:	}
        -:  648:    }
        -:  649:
        -:  650:  //find highest score
    #####:  651:  j = 0;
    #####:  652:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  653:    {
    #####:  654:      if (players[i] > players[j])
        -:  655:	{
    #####:  656:	  j = i;
        -:  657:	}
        -:  658:    }
    #####:  659:  highScore = players[j];
        -:  660:
        -:  661:  //add 1 to players who had less turns
    #####:  662:  currentPlayer = whoseTurn(state);
    #####:  663:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  664:    {
    #####:  665:      if ( players[i] == highScore && i > currentPlayer )
        -:  666:	{
    #####:  667:	  players[i]++;
        -:  668:	}
        -:  669:    }
        -:  670:
        -:  671:  //find new highest score
    #####:  672:  j = 0;
    #####:  673:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  674:    {
    #####:  675:      if ( players[i] > players[j] )
        -:  676:	{
    #####:  677:	  j = i;
        -:  678:	}
        -:  679:    }
    #####:  680:  highScore = players[j];
        -:  681:
        -:  682:  //set winners in array to 1 and rest to 0
    #####:  683:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  684:    {
    #####:  685:      if ( players[i] == highScore )
        -:  686:	{
    #####:  687:	  players[i] = 1;
        -:  688:	}
        -:  689:      else
        -:  690:	{
    #####:  691:	  players[i] = 0;
        -:  692:	}
        -:  693:    }
        -:  694:
    #####:  695:  return 0;
        -:  696:}
        -:  697:
    18765:  698:int drawCard(int player, struct gameState *state)
        -:  699:{	int count;
        -:  700:  int deckCounter;
    18765:  701:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  702:    
        -:  703:    //Step 1 Shuffle the discard pile back into a deck
        -:  704:    int i;
        -:  705:    //Move discard to deck
    #####:  706:    for (i = 0; i < state->discardCount[player];i++){
    #####:  707:      state->deck[player][i] = state->discard[player][i];
    #####:  708:      state->discard[player][i] = -1;
        -:  709:    }
        -:  710:
    #####:  711:    state->deckCount[player] = state->discardCount[player];
    #####:  712:    state->discardCount[player] = 0;//Reset discard
        -:  713:
        -:  714:    //Shufffle the deck
    #####:  715:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  716:   
        -:  717:    if (DEBUG){//Debug statements
        -:  718:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  719:    }
        -:  720:    
    #####:  721:    state->discardCount[player] = 0;
        -:  722:
        -:  723:    //Step 2 Draw Card
    #####:  724:    count = state->handCount[player];//Get current player's hand count
        -:  725:    
        -:  726:    if (DEBUG){//Debug statements
        -:  727:      printf("Current hand count: %d\n", count);
        -:  728:    }
        -:  729:    
    #####:  730:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  731:
    #####:  732:    if (deckCounter == 0)
    #####:  733:      return -1;
        -:  734:
    #####:  735:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  736:    state->deckCount[player]--;
    #####:  737:    state->handCount[player]++;//Increment hand count
        -:  738:  }
        -:  739:
        -:  740:  else{
    18765:  741:    int count = state->handCount[player];//Get current hand count for player
        -:  742:    int deckCounter;
        -:  743:    if (DEBUG){//Debug statements
        -:  744:      printf("Current hand count: %d\n", count);
        -:  745:    }
        -:  746:
    18765:  747:    deckCounter = state->deckCount[player];//Create holder for the deck count
    18765:  748:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    18765:  749:    state->deckCount[player]--;
    18765:  750:    state->handCount[player]++;//Increment hand count
        -:  751:  }
        -:  752:
    18765:  753:  return 0;
        -:  754:}
        -:  755:
    #####:  756:int getCost(int cardNumber)
        -:  757:{
    #####:  758:  switch( cardNumber ) 
        -:  759:    {
        -:  760:    case curse:
    #####:  761:      return 0;
        -:  762:    case estate:
    #####:  763:      return 2;
        -:  764:    case duchy:
    #####:  765:      return 5;
        -:  766:    case province:
    #####:  767:      return 8;
        -:  768:    case copper:
    #####:  769:      return 0;
        -:  770:    case silver:
    #####:  771:      return 3;
        -:  772:    case gold:
    #####:  773:      return 6;
        -:  774:    case adventurer:
    #####:  775:      return 6;
        -:  776:    case council_room:
    #####:  777:      return 5;
        -:  778:    case feast:
    #####:  779:      return 4;
        -:  780:    case gardens:
    #####:  781:      return 4;
        -:  782:    case mine:
    #####:  783:      return 5;
        -:  784:    case remodel:
    #####:  785:      return 4;
        -:  786:    case smithy:
    #####:  787:      return 4;
        -:  788:    case village:
    #####:  789:      return 3;
        -:  790:    case baron:
    #####:  791:      return 4;
        -:  792:    case great_hall:
    #####:  793:      return 3;
        -:  794:    case minion:
    #####:  795:      return 5;
        -:  796:    case steward:
    #####:  797:      return 3;
        -:  798:    case tribute:
    #####:  799:      return 5;
        -:  800:    case ambassador:
    #####:  801:      return 3;
        -:  802:    case cutpurse:
    #####:  803:      return 4;
        -:  804:    case embargo: 
    #####:  805:      return 2;
        -:  806:    case outpost:
    #####:  807:      return 5;
        -:  808:    case salvager:
    #####:  809:      return 4;
        -:  810:    case sea_hag:
    #####:  811:      return 4;
        -:  812:    case treasure_map:
    #####:  813:      return 4;
        -:  814:    }
        -:  815:	
    #####:  816:  return -1;
        -:  817:}
        -:  818:
        -:  819:/********** BEGINNING of cardEffct **********/
        -:  820:/* This is where the refactor and bug additions will be done for assignment-2 */
    #####:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
    #####:  828:  int currentPlayer = whoseTurn(state);
    #####:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
    #####:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND];// moved above the if statement
    #####:  833:  int drawntreasure=0;
        -:  834:  int cardDrawn;
    #####:  835:  int z = 0;// this is the counter for the temp hand
    #####:  836:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  837:    nextPlayer = 0;
        -:  838:  }
        -:  839:  
        -:  840:  /* Refactoring switch statement so cards are implemented in their own functions */
        -:  841:  //uses switch to select card and perform actions
    #####:  842:  switch( card ) 
        -:  843:    {
        -:  844:
        -:  845:    /***** Refactor adventurer *****/
        -:  846:    case adventurer:
    #####:  847:	    return play_adventurer(drawntreasure, state, currentPlayer, temphand, z);
        -:  848:      /*
        -:  849:      while(drawntreasure<2){
        -:  850:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  851:	  shuffle(currentPlayer, state);
        -:  852:	}
        -:  853:	drawCard(currentPlayer, state);
        -:  854:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  855:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  856:	  drawntreasure++;
        -:  857:	else{
        -:  858:	  temphand[z]=cardDrawn;
        -:  859:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  860:	  z++;
        -:  861:	}
        -:  862:      }
        -:  863:      while(z-1>=0){
        -:  864:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  865:	z=z-1;
        -:  866:      }
        -:  867:      return 0;
        -:  868:      */
        -:  869:			
        -:  870:    /***** Refactor council room*****/
        -:  871:    case council_room:
    #####:  872:       	return play_council_room(currentPlayer, state, handPos);
        -:  873:      /*
        -:  874:      //+4 Cards
        -:  875:      for (i = 0; i < 4; i++)
        -:  876:	{
        -:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
        -:  879:			
        -:  880:      //+1 Buy
        -:  881:      state->numBuys++;
        -:  882:			
        -:  883:      //Each other player draws a card
        -:  884:      for (i = 0; i < state->numPlayers; i++)
        -:  885:	{
        -:  886:	  if ( i != currentPlayer )
        -:  887:	    {
        -:  888:	      drawCard(i, state);
        -:  889:	    }
        -:  890:	}
        -:  891:			
        -:  892:      //put played card in played card pile
        -:  893:      discardCard(handPos, currentPlayer, state, 0);
        -:  894:			
        -:  895:      return 0;
        -:  896:      */
        -:  897:			
        -:  898:    case feast:
        -:  899:      //gain card with cost up to 5
        -:  900:      //Backup hand
    #####:  901:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  902:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  903:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  904:      }
        -:  905:      //Backup hand
        -:  906:
        -:  907:      //Update Coins for Buy
    #####:  908:      updateCoins(currentPlayer, state, 5);
    #####:  909:      x = 1;//Condition to loop on
    #####:  910:      while( x == 1) {//Buy one card
    #####:  911:	if (supplyCount(choice1, state) <= 0){
        -:  912:	  if (DEBUG)
        -:  913:	    printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:	  if (DEBUG){
        -:  916:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  917:	  }
        -:  918:	}
    #####:  919:	else if (state->coins < getCost(choice1)){
    #####:  920:	  printf("That card is too expensive!\n");
        -:  921:
        -:  922:	  if (DEBUG){
        -:  923:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  924:	  }
        -:  925:	}
        -:  926:	else{
        -:  927:
        -:  928:	  if (DEBUG){
        -:  929:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:	  }
        -:  931:
    #####:  932:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  933:	  x = 0;//No more buying cards
        -:  934:
        -:  935:	  if (DEBUG){
        -:  936:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:	  }
        -:  938:
        -:  939:	}
        -:  940:      }     
        -:  941:
        -:  942:      //Reset Hand
    #####:  943:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  944:	state->hand[currentPlayer][i] = temphand[i];
    #####:  945:	temphand[i] = -1;
        -:  946:      }
        -:  947:      //Reset Hand
        -:  948:      			
    #####:  949:      return 0;
        -:  950:			
        -:  951:    case gardens:
    #####:  952:      return -1;
        -:  953:			
        -:  954:    /***** Refactor mine*****/
        -:  955:    case mine:
    #####:  956:	return play_mine(state, choice1, choice2, currentPlayer, handPos);
        -:  957:      /*
        -:  958:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
        -:  960:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  961:	{
        -:  962:	  return -1;
        -:  963:	}
        -:  964:		
        -:  965:      if (choice2 > treasure_map || choice2 < curse)
        -:  966:	{
        -:  967:	  return -1;
        -:  968:	}
        -:  969:
        -:  970:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  971:	{
        -:  972:	  return -1;
        -:  973:	}
        -:  974:
        -:  975:      gainCard(choice2, state, 2, currentPlayer);
        -:  976:
        -:  977:      //discard card from hand
        -:  978:      discardCard(handPos, currentPlayer, state, 0);
        -:  979:
        -:  980:      //discard trashed card
        -:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:	{
        -:  983:	  if (state->hand[currentPlayer][i] == j)
        -:  984:	    {
        -:  985:	      discardCard(i, currentPlayer, state, 0);			
        -:  986:	      break;
        -:  987:	    }
        -:  988:	}
        -:  989:			
        -:  990:      return 0;
        -:  991:      */
        -:  992:			
        -:  993:    /***** Refactor remodel*****/
        -:  994:    case remodel:
    #####:  995:      return play_remodel(state, choice1, choice2, currentPlayer, handPos);
        -:  996:      /*
        -:  997:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  998:
        -:  999:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1000:	{
        -: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
        -: 1004:      gainCard(choice2, state, 0, currentPlayer);
        -: 1005:
        -: 1006:      //discard card from hand
        -: 1007:      discardCard(handPos, currentPlayer, state, 0);
        -: 1008:
        -: 1009:      //discard trashed card
        -: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1011:	{
        -: 1012:	  if (state->hand[currentPlayer][i] == j)
        -: 1013:	    {
        -: 1014:	      discardCard(i, currentPlayer, state, 0);			
        -: 1015:	      break;
        -: 1016:	    }
        -: 1017:	}
        -: 1018:
        -: 1019:
        -: 1020:      return 0;
        -: 1021:      */
        -: 1022:		
        -: 1023:    /***** Refactor smithy *****/
        -: 1024:    case smithy:
    #####: 1025:      return play_smithy(currentPlayer, state, handPos);
        -: 1026:      /* 
        -: 1027:      //+3 Cards
        -: 1028:      for (i = 0; i < 3; i++)
        -: 1029:	{
        -: 1030:	  drawCard(currentPlayer, state);
        -: 1031:	}
        -: 1032:			
        -: 1033:      //discard card from hand
        -: 1034:      discardCard(handPos, currentPlayer, state, 0);
        -: 1035:      return 0;
        -: 1036:      */
        -: 1037:		
        -: 1038:
        -: 1039:    /***** Refactored village for assignment-3 (no new bugs introduced) *****/
        -: 1040:    case village:
    #####: 1041:      return play_village(currentPlayer, state, handPos);
        -: 1042:      /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:      */
        -: 1053:		
        -: 1054:    case baron:
    #####: 1055:      state->numBuys++;//Increase buys by 1!
    #####: 1056:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1057:	int p = 0;//Iterator for hand!
    #####: 1058:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1059:	while(card_not_discarded){
    #####: 1060:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1061:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1062:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1063:	    state->discardCount[currentPlayer]++;
    #####: 1064:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1065:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1066:	    }
    #####: 1067:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1068:	    state->handCount[currentPlayer]--;
    #####: 1069:	    card_not_discarded = 0;//Exit the loop
        -: 1070:	  }
    #####: 1071:	  else if (p > state->handCount[currentPlayer]){
        -: 1072:	    if(DEBUG) {
        -: 1073:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1074:	      printf("Must gain an estate if there are any\n");
        -: 1075:	    }
    #####: 1076:	    if (supplyCount(estate, state) > 0){
    #####: 1077:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1078:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1079:	      if (supplyCount(estate, state) == 0){
    #####: 1080:		isGameOver(state);
        -: 1081:	      }
        -: 1082:	    }
    #####: 1083:	    card_not_discarded = 0;//Exit the loop
        -: 1084:	  }
        -: 1085:			    
        -: 1086:	  else{
    #####: 1087:	    p++;//Next card
        -: 1088:	  }
        -: 1089:	}
        -: 1090:      }
        -: 1091:			    
        -: 1092:      else{
    #####: 1093:	if (supplyCount(estate, state) > 0){
    #####: 1094:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1095:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1096:	  if (supplyCount(estate, state) == 0){
    #####: 1097:	    isGameOver(state);
        -: 1098:	  }
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
        -: 1102:      
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case great_hall:
        -: 1106:      //+1 Card
    #####: 1107:      drawCard(currentPlayer, state);
        -: 1108:			
        -: 1109:      //+1 Actions
    #####: 1110:      state->numActions++;
        -: 1111:			
        -: 1112:      //discard card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case minion:
        -: 1117:      //+1 action
    #####: 1118:      state->numActions++;
        -: 1119:			
        -: 1120:      //discard card from hand
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
        -: 1122:			
    #####: 1123:      if (choice1)		//+2 coins
        -: 1124:	{
    #####: 1125:	  state->coins = state->coins + 2;
        -: 1126:	}
        -: 1127:			
    #####: 1128:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1129:	{
        -: 1130:	  //discard hand
    #####: 1131:	  while(numHandCards(state) > 0)
        -: 1132:	    {
    #####: 1133:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //draw 4
    #####: 1137:	  for (i = 0; i < 4; i++)
        -: 1138:	    {
    #####: 1139:	      drawCard(currentPlayer, state);
        -: 1140:	    }
        -: 1141:				
        -: 1142:	  //other players discard hand and redraw if hand size > 4
    #####: 1143:	  for (i = 0; i < state->numPlayers; i++)
        -: 1144:	    {
    #####: 1145:	      if (i != currentPlayer)
        -: 1146:		{
    #####: 1147:		  if ( state->handCount[i] > 4 )
        -: 1148:		    {
        -: 1149:		      //discard hand
    #####: 1150:		      while( state->handCount[i] > 0 )
        -: 1151:			{
    #####: 1152:			  discardCard(handPos, i, state, 0);
        -: 1153:			}
        -: 1154:							
        -: 1155:		      //draw 4
    #####: 1156:		      for (j = 0; j < 4; j++)
        -: 1157:			{
    #####: 1158:			  drawCard(i, state);
        -: 1159:			}
        -: 1160:		    }
        -: 1161:		}
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case steward:
    #####: 1168:      if (choice1 == 1)
        -: 1169:	{
        -: 1170:	  //+2 cards
    #####: 1171:	  drawCard(currentPlayer, state);
    #####: 1172:	  drawCard(currentPlayer, state);
        -: 1173:	}
    #####: 1174:      else if (choice1 == 2)
        -: 1175:	{
        -: 1176:	  //+2 coins
    #####: 1177:	  state->coins = state->coins + 2;
        -: 1178:	}
        -: 1179:      else
        -: 1180:	{
        -: 1181:	  //trash 2 cards in hand
    #####: 1182:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1183:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:			
        -: 1186:      //discard card from hand
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case tribute:
    #####: 1191:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1192:	if (state->deckCount[nextPlayer] > 0){
    #####: 1193:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1194:	  state->deckCount[nextPlayer]--;
        -: 1195:	}
    #####: 1196:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1197:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1198:	  state->discardCount[nextPlayer]--;
        -: 1199:	}
        -: 1200:	else{
        -: 1201:	  //No Card to Reveal
        -: 1202:	  if (DEBUG){
        -: 1203:	    printf("No cards to reveal\n");
        -: 1204:	  }
        -: 1205:	}
        -: 1206:      }
        -: 1207:	    
        -: 1208:      else{
    #####: 1209:	if (state->deckCount[nextPlayer] == 0){
    #####: 1210:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1211:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1212:	    state->deckCount[nextPlayer]++;
    #####: 1213:	    state->discard[nextPlayer][i] = -1;
    #####: 1214:	    state->discardCount[nextPlayer]--;
        -: 1215:	  }
        -: 1216:			    
    #####: 1217:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1218:	} 
    #####: 1219:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1220:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1221:	state->deckCount[nextPlayer]--;
    #####: 1222:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1223:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1224:	state->deckCount[nextPlayer]--;
        -: 1225:      }    
        -: 1226:		       
    #####: 1227:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1228:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1229:	state->playedCardCount++;
    #####: 1230:	tributeRevealedCards[1] = -1;
        -: 1231:      }
        -: 1232:
    #####: 1233:      for (i = 0; i <= 2; i ++){
    #####: 1234:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1235:	  state->coins += 2;
        -: 1236:	}
        -: 1237:		    
    #####: 1238:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1239:	  drawCard(currentPlayer, state);
    #####: 1240:	  drawCard(currentPlayer, state);
        -: 1241:	}
        -: 1242:	else{//Action Card
    #####: 1243:	  state->numActions = state->numActions + 2;
        -: 1244:	}
        -: 1245:      }
        -: 1246:	    
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case ambassador:
    #####: 1250:      j = 0;		//used to check if player has enough cards to discard
        -: 1251:
    #####: 1252:      if (choice2 > 2 || choice2 < 0)
        -: 1253:	{
    #####: 1254:	  return -1;				
        -: 1255:	}
        -: 1256:
    #####: 1257:      if (choice1 == handPos)
        -: 1258:	{
    #####: 1259:	  return -1;
        -: 1260:	}
        -: 1261:
    #####: 1262:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1263:	{
    #####: 1264:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1265:	    {
    #####: 1266:	      j++;
        -: 1267:	    }
        -: 1268:	}
    #####: 1269:      if (j < choice2)
        -: 1270:	{
    #####: 1271:	  return -1;				
        -: 1272:	}
        -: 1273:
        -: 1274:      if (DEBUG) 
        -: 1275:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1276:
        -: 1277:      //increase supply count for choosen card by amount being discarded
    #####: 1278:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1279:			
        -: 1280:      //each other player gains a copy of revealed card
    #####: 1281:      for (i = 0; i < state->numPlayers; i++)
        -: 1282:	{
    #####: 1283:	  if (i != currentPlayer)
        -: 1284:	    {
    #####: 1285:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1286:	    }
        -: 1287:	}
        -: 1288:
        -: 1289:      //discard played card from hand
    #####: 1290:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1291:
        -: 1292:      //trash copies of cards returned to supply
    #####: 1293:      for (j = 0; j < choice2; j++)
        -: 1294:	{
    #####: 1295:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1296:	    {
    #####: 1297:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1298:		{
    #####: 1299:		  discardCard(i, currentPlayer, state, 1);
    #####: 1300:		  break;
        -: 1301:		}
        -: 1302:	    }
        -: 1303:	}			
        -: 1304:
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case cutpurse:
        -: 1308:
    #####: 1309:      updateCoins(currentPlayer, state, 2);
    #####: 1310:      for (i = 0; i < state->numPlayers; i++)
        -: 1311:	{
    #####: 1312:	  if (i != currentPlayer)
        -: 1313:	    {
    #####: 1314:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1315:		{
    #####: 1316:		  if (state->hand[i][j] == copper)
        -: 1317:		    {
    #####: 1318:		      discardCard(j, i, state, 0);
    #####: 1319:		      break;
        -: 1320:		    }
    #####: 1321:		  if (j == state->handCount[i])
        -: 1322:		    {
    #####: 1323:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1324:			{
        -: 1325:			  if (DEBUG)
        -: 1326:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1327:			}	
    #####: 1328:		      break;
        -: 1329:		    }		
        -: 1330:		}
        -: 1331:					
        -: 1332:	    }
        -: 1333:				
        -: 1334:	}				
        -: 1335:
        -: 1336:      //discard played card from hand
    #####: 1337:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1338:
    #####: 1339:      return 0;
        -: 1340:
        -: 1341:		
        -: 1342:    case embargo: 
        -: 1343:      //+2 Coins
    #####: 1344:      state->coins = state->coins + 2;
        -: 1345:			
        -: 1346:      //see if selected pile is in play
    #####: 1347:      if ( state->supplyCount[choice1] == -1 )
        -: 1348:	{
    #####: 1349:	  return -1;
        -: 1350:	}
        -: 1351:			
        -: 1352:      //add embargo token to selected supply pile
    #####: 1353:      state->embargoTokens[choice1]++;
        -: 1354:			
        -: 1355:      //trash card
    #####: 1356:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1357:      return 0;
        -: 1358:		
        -: 1359:    case outpost:
        -: 1360:      //set outpost flag
    #####: 1361:      state->outpostPlayed++;
        -: 1362:			
        -: 1363:      //discard card
    #####: 1364:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:      return 0;
        -: 1366:		
        -: 1367:    case salvager:
        -: 1368:      //+1 buy
    #####: 1369:      state->numBuys++;
        -: 1370:			
    #####: 1371:      if (choice1)
        -: 1372:	{
        -: 1373:	  //gain coins equal to trashed card
    #####: 1374:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1375:	  //trash card
    #####: 1376:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1377:	}
        -: 1378:			
        -: 1379:      //discard card
    #####: 1380:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1381:      return 0;
        -: 1382:		
        -: 1383:    case sea_hag:
    #####: 1384:      for (i = 0; i < state->numPlayers; i++){
    #####: 1385:	if (i != currentPlayer){
    #####: 1386:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1387:	  state->discardCount[i]++;
    #####: 1388:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1389:	}
        -: 1390:      }
    #####: 1391:      return 0;
        -: 1392:		
        -: 1393:    case treasure_map:
        -: 1394:      //search hand for another treasure_map
    #####: 1395:      index = -1;
    #####: 1396:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1397:	{
    #####: 1398:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1399:	    {
    #####: 1400:	      index = i;
    #####: 1401:	      break;
        -: 1402:	    }
        -: 1403:	}
    #####: 1404:      if (index > -1)
        -: 1405:	{
        -: 1406:	  //trash both treasure cards
    #####: 1407:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1408:	  discardCard(index, currentPlayer, state, 1);
        -: 1409:
        -: 1410:	  //gain 4 Gold cards
    #####: 1411:	  for (i = 0; i < 4; i++)
        -: 1412:	    {
    #####: 1413:	      gainCard(gold, state, 1, currentPlayer);
        -: 1414:	    }
        -: 1415:				
        -: 1416:	  //return success
    #####: 1417:	  return 1;
        -: 1418:	}
        -: 1419:			
        -: 1420:      //no second treasure_map found in hand
    #####: 1421:      return -1;
        -: 1422:    }
        -: 1423:	
    #####: 1424:  return -1;
        -: 1425:}
        -: 1426:
        -: 1427:/********** END of cardEffct **********/
        -: 1428:
    #####: 1429:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1430:{
        -: 1431:	
        -: 1432:  //if card is not trashed, added to Played pile 
    #####: 1433:  if (trashFlag < 1)
        -: 1434:    {
        -: 1435:      //add card to played pile
    #####: 1436:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1437:      state->playedCardCount++;
        -: 1438:    }
        -: 1439:	
        -: 1440:  //set played card to -1
    #####: 1441:  state->hand[currentPlayer][handPos] = -1;
        -: 1442:	
        -: 1443:  //remove card from player's hand
    #####: 1444:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1445:    {
        -: 1446:      //reduce number of cards in hand
    #####: 1447:      state->handCount[currentPlayer]--;
        -: 1448:    }
    #####: 1449:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1450:    {
        -: 1451:      //reduce number of cards in hand
    #####: 1452:      state->handCount[currentPlayer]--;
        -: 1453:    }
        -: 1454:  else 	
        -: 1455:    {
        -: 1456:      //replace discarded card with last card in hand
    #####: 1457:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1458:      //set last card to -1
    #####: 1459:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1460:      //reduce number of cards in hand
    #####: 1461:      state->handCount[currentPlayer]--;
        -: 1462:    }
        -: 1463:	
    #####: 1464:  return 0;
        -: 1465:}
        -: 1466:
    #####: 1467:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1468:{
        -: 1469:  //Note: supplyPos is enum of choosen card
        -: 1470:	
        -: 1471:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1472:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1473:    {
    #####: 1474:      return -1;
        -: 1475:    }
        -: 1476:	
        -: 1477:  //added card for [whoseTurn] current player:
        -: 1478:  // toFlag = 0 : add to discard
        -: 1479:  // toFlag = 1 : add to deck
        -: 1480:  // toFlag = 2 : add to hand
        -: 1481:
    #####: 1482:  if (toFlag == 1)
        -: 1483:    {
    #####: 1484:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1485:      state->deckCount[player]++;
        -: 1486:    }
    #####: 1487:  else if (toFlag == 2)
        -: 1488:    {
    #####: 1489:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1490:      state->handCount[player]++;
        -: 1491:    }
        -: 1492:  else
        -: 1493:    {
    #####: 1494:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1495:      state->discardCount[player]++;
        -: 1496:    }
        -: 1497:	
        -: 1498:  //decrease number in supply pile
    #####: 1499:  state->supplyCount[supplyPos]--;
        -: 1500:	 
    #####: 1501:  return 0;
        -: 1502:}
        -: 1503:
        -: 1504:/***** Use this function for Unit test 2 *****/
     3753: 1505:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1506:{
        -: 1507:  int i;
        -: 1508:	
        -: 1509:  //reset coin count
     3753: 1510:  state->coins = 0;
        -: 1511:
        -: 1512:  //add coins for each Treasure card in player's hand
    22518: 1513:  for (i = 0; i < state->handCount[player]; i++)
        -: 1514:    {
    18765: 1515:      if (state->hand[player][i] == copper)
        -: 1516:	{
    15012: 1517:	  state->coins += 1;
        -: 1518:	}
     3753: 1519:      else if (state->hand[player][i] == silver)
        -: 1520:	{
    #####: 1521:	  state->coins += 2;
        -: 1522:	}
     3753: 1523:      else if (state->hand[player][i] == gold)
        -: 1524:	{
    #####: 1525:	  state->coins += 3;
        -: 1526:	}	
        -: 1527:    }	
        -: 1528:
        -: 1529:  //add bonus
     3753: 1530:  state->coins += bonus;
        -: 1531:
     3753: 1532:  return 0;
        -: 1533:}
        -: 1534:
        -: 1535:
        -: 1536://end of dominion.c
        -: 1537:
TESTING Smithy_card():
Test #1 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #2 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #3 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #4 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #5 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #6 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #7 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #8 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #9 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #10 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #11 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #12 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #13 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #14 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #15 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #16 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #17 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #18 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #19 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #20 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #21 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #22 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #23 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #24 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #25 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #26 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #27 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #28 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #29 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #30 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #31 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #32 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #33 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #34 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #35 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #36 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #37 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #38 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #39 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #40 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #41 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #42 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #43 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #44 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #45 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #46 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #47 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #48 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #49 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #50 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #51 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #52 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #53 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #54 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #55 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #56 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #57 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #58 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #59 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #60 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #61 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #62 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #63 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #64 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #65 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #66 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #67 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #68 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #69 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #70 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #71 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #72 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #73 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #74 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #75 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #76 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #77 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #78 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #79 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #80 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #81 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #82 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #83 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #84 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #85 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #86 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #87 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #88 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #89 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #90 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #91 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #92 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #93 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #94 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #95 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #96 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #97 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #98 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #99 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #100 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #101 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #102 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #103 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #104 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #105 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #106 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #107 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #108 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #109 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #110 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #111 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #112 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #113 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #114 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #115 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #116 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #117 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #118 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #119 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #120 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #121 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #122 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #123 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #124 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #125 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #126 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #127 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #128 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #129 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #130 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #131 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #132 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #133 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #134 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #135 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #136 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #137 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #138 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #139 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #140 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #141 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #142 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #143 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #144 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #145 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #146 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #147 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #148 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #149 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #150 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #151 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #152 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #153 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #154 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #155 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #156 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #157 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #158 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #159 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #160 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #161 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #162 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #163 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #164 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #165 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #166 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #167 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #168 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #169 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #170 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #171 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #172 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #173 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #174 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #175 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #176 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #177 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #178 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #179 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #180 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #181 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #182 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #183 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #184 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #185 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #186 Player 1 deck size: 0, hand size: 0 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #187 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #188 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #189 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #190 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #191 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #192 Player 1 deck size: 0, hand size: 1 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #193 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #194 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #195 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #196 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #197 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #198 Player 1 deck size: 0, hand size: 2 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #199 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #200 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #201 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #202 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #203 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #204 Player 1 deck size: 0, hand size: 3 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #205 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #206 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #207 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #208 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #209 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #210 Player 1 deck size: 0, hand size: 4 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #211 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #212 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #213 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #214 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #215 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #216 Player 1 deck size: 0, hand size: 5 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #217 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #218 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #219 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #220 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #221 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #222 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #223 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #224 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #225 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #226 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #227 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #228 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #229 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #230 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #231 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #232 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #233 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #234 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #235 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #236 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #237 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #238 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #239 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #240 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #241 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #242 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #243 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #244 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #245 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #246 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #247 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #248 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #249 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #250 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #251 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #252 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #253 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #254 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #255 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #256 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #257 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #258 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #259 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #260 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #261 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #262 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #263 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #264 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #265 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #266 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #267 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #268 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #269 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #270 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #271 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #272 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #273 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #274 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #275 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #276 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #277 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #278 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #279 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #280 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #281 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #282 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #283 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #284 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #285 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #286 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #287 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #288 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #289 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #290 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #291 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #292 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #293 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #294 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #295 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #296 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #297 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #298 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #299 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #300 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #301 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #302 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #303 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #304 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #305 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #306 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #307 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #308 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #309 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #310 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #311 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #312 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #313 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #314 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #315 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #316 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #317 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #318 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #319 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #320 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #321 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #322 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #323 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #324 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #325 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #326 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #327 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #328 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #329 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #330 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #331 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #332 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #333 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #334 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #335 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #336 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #337 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #338 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #339 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #340 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #341 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #342 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #343 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #344 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #345 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #346 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #347 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #348 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #349 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #350 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #351 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #352 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #353 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #354 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #355 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #356 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #357 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #358 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #359 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #360 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #361 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #362 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #363 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #364 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #365 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #366 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #367 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #368 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #369 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #370 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #371 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #372 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #373 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #374 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #375 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #376 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #377 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #378 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #379 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #380 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #381 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #382 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #383 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #384 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #385 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #386 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #387 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #388 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #389 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #390 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #391 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #392 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #393 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #394 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #395 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #396 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #397 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #398 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #399 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #400 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #401 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #402 Player 1 deck size: 1, hand size: 0 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #403 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #404 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #405 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #406 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #407 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #408 Player 1 deck size: 1, hand size: 1 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #409 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #410 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #411 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #412 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #413 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #414 Player 1 deck size: 1, hand size: 2 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #415 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #416 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #417 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #418 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #419 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #420 Player 1 deck size: 1, hand size: 3 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #421 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #422 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #423 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #424 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #425 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #426 Player 1 deck size: 1, hand size: 4 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #427 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #428 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #429 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #430 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #431 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #432 Player 1 deck size: 1, hand size: 5 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #433 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #434 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #435 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #436 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #437 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #438 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #439 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #440 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #441 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #442 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #443 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #444 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #445 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #446 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #447 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #448 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #449 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #450 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #451 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #452 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #453 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #454 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #455 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #456 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #457 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #458 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #459 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #460 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #461 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #462 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #463 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 0, hand size: 0 :	PASSED TEST
Test #464 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 0, hand size: 1 :	PASSED TEST
Test #465 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 0, hand size: 2 :	PASSED TEST
Test #466 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 0, hand size: 3 :	PASSED TEST
Test #467 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 0, hand size: 4 :	PASSED TEST
Test #468 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 0, hand size: 5 :	PASSED TEST
Test #469 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #470 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #471 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #472 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #473 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #474 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #475 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #476 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #477 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #478 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #479 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #480 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #481 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #482 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #483 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #484 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #485 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #486 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #487 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #488 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #489 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #490 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #491 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #492 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #493 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #494 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #495 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #496 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #497 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #498 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #499 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 1, hand size: 0 :	PASSED TEST
Test #500 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 1, hand size: 1 :	PASSED TEST
Test #501 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 1, hand size: 2 :	PASSED TEST
Test #502 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 1, hand size: 3 :	PASSED TEST
Test #503 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 1, hand size: 4 :	PASSED TEST
Test #504 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 1, hand size: 5 :	PASSED TEST
Test #505 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #506 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #507 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #508 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #509 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #510 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #511 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #512 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #513 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #514 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #515 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #516 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #517 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #518 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #519 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #520 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #521 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #522 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #523 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #524 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #525 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #526 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #527 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #528 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #529 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #530 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #531 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #532 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #533 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #534 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #535 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 2, hand size: 0 :	PASSED TEST
Test #536 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 2, hand size: 1 :	PASSED TEST
Test #537 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 2, hand size: 2 :	PASSED TEST
Test #538 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 2, hand size: 3 :	PASSED TEST
Test #539 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 2, hand size: 4 :	PASSED TEST
Test #540 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 2, hand size: 5 :	PASSED TEST
Test #541 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #542 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #543 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #544 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #545 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #546 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #547 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #548 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #549 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #550 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #551 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #552 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #553 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #554 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #555 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #556 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #557 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #558 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #559 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #560 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #561 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #562 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #563 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #564 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #565 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #566 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #567 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #568 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #569 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #570 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #571 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 3, hand size: 0 :	PASSED TEST
Test #572 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 3, hand size: 1 :	PASSED TEST
Test #573 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 3, hand size: 2 :	PASSED TEST
Test #574 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 3, hand size: 3 :	PASSED TEST
Test #575 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 3, hand size: 4 :	PASSED TEST
Test #576 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 3, hand size: 5 :	PASSED TEST
Test #577 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #578 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #579 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #580 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #581 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #582 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #583 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #584 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #585 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #586 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #587 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #588 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #589 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #590 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #591 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #592 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #593 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #594 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #595 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #596 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #597 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #598 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #599 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #600 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #601 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #602 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #603 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #604 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #605 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #606 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #607 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 4, hand size: 0 :	PASSED TEST
Test #608 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 4, hand size: 1 :	PASSED TEST
Test #609 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 4, hand size: 2 :	PASSED TEST
Test #610 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 4, hand size: 3 :	PASSED TEST
Test #611 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 4, hand size: 4 :	PASSED TEST
Test #612 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 4, hand size: 5 :	PASSED TEST
Test #613 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #614 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #615 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #616 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #617 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #618 Player 1 deck size: 2, hand size: 0 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #619 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #620 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #621 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #622 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #623 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #624 Player 1 deck size: 2, hand size: 1 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #625 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #626 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #627 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #628 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #629 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #630 Player 1 deck size: 2, hand size: 2 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #631 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #632 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #633 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #634 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #635 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #636 Player 1 deck size: 2, hand size: 3 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #637 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #638 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #639 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #640 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #641 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #642 Player 1 deck size: 2, hand size: 4 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #643 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 5, hand size: 0 :	PASSED TEST
Test #644 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 5, hand size: 1 :	PASSED TEST
Test #645 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 5, hand size: 2 :	PASSED TEST
Test #646 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 5, hand size: 3 :	PASSED TEST
Test #647 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 5, hand size: 4 :	PASSED TEST
Test #648 Player 1 deck size: 2, hand size: 5 | Player 2 deck size: 5, hand size: 5 :	PASSED TEST
Test #649 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #650 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #651 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #652 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #653 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #654 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #655 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #656 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #657 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #658 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #659 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #660 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #661 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #662 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #663 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #664 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #665 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #666 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #667 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #668 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #669 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #670 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #671 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #672 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #673 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #674 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #675 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #676 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #677 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #678 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #679 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #680 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #681 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #682 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #683 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #684 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #685 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #686 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #687 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #688 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #689 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #690 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #691 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #692 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #693 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #694 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #695 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #696 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #697 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #698 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #699 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #700 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #701 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #702 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #703 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #704 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #705 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #706 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #707 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #708 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #709 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #710 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #711 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #712 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #713 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #714 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #715 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #716 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #717 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #718 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #719 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #720 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #721 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #722 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #723 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #724 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #725 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #726 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #727 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #728 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #729 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #730 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #731 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #732 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #733 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #734 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #735 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #736 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #737 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #738 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #739 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #740 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #741 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #742 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #743 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #744 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #745 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #746 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #747 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #748 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #749 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #750 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #751 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #752 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #753 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #754 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #755 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #756 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #757 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #758 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #759 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #760 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #761 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #762 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #763 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #764 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #765 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #766 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #767 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #768 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #769 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #770 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #771 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #772 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #773 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #774 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #775 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #776 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #777 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #778 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #779 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #780 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #781 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #782 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #783 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #784 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #785 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #786 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #787 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #788 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #789 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #790 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #791 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #792 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #793 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #794 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #795 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #796 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #797 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #798 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #799 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #800 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #801 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #802 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #803 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #804 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #805 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #806 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #807 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #808 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #809 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #810 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #811 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #812 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #813 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #814 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #815 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #816 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #817 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #818 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #819 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #820 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #821 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #822 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #823 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #824 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #825 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #826 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #827 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #828 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #829 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #830 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #831 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #832 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #833 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #834 Player 1 deck size: 3, hand size: 0 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #835 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #836 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #837 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #838 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #839 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #840 Player 1 deck size: 3, hand size: 1 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #841 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #842 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #843 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #844 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #845 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #846 Player 1 deck size: 3, hand size: 2 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #847 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #848 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #849 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #850 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #851 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #852 Player 1 deck size: 3, hand size: 3 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #853 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #854 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #855 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #856 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #857 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #858 Player 1 deck size: 3, hand size: 4 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #859 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #860 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #861 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #862 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #863 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #864 Player 1 deck size: 3, hand size: 5 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #865 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #866 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #867 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #868 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #869 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #870 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #871 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #872 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #873 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #874 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #875 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #876 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #877 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #878 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #879 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #880 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #881 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #882 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #883 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #884 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #885 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #886 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #887 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #888 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #889 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #890 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #891 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #892 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #893 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #894 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #895 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #896 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #897 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #898 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #899 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #900 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #901 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #902 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #903 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #904 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #905 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #906 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #907 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #908 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #909 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #910 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #911 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #912 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #913 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #914 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #915 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #916 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #917 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #918 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #919 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #920 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #921 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #922 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #923 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #924 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #925 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #926 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #927 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #928 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #929 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #930 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #931 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #932 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #933 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #934 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #935 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #936 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #937 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #938 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #939 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #940 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #941 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #942 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #943 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #944 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #945 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #946 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #947 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #948 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #949 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #950 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #951 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #952 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #953 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #954 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #955 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #956 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #957 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #958 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #959 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #960 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #961 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #962 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #963 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #964 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #965 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #966 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #967 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #968 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #969 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #970 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #971 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #972 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #973 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #974 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #975 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #976 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #977 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #978 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #979 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #980 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #981 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #982 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #983 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #984 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #985 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #986 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #987 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #988 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #989 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #990 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #991 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #992 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #993 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #994 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #995 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #996 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #997 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #998 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #999 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #1000 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #1001 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #1002 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #1003 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #1004 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #1005 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #1006 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #1007 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #1008 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #1009 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1010 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1011 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1012 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1013 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1014 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1015 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1016 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1017 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1018 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1019 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1020 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1021 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1022 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1023 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1024 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1025 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1026 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1027 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1028 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1029 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1030 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1031 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1032 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1033 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1034 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1035 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1036 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1037 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1038 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1039 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1040 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1041 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1042 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1043 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1044 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1045 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1046 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1047 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1048 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1049 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1050 Player 1 deck size: 4, hand size: 0 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #1051 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1052 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1053 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1054 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1055 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1056 Player 1 deck size: 4, hand size: 1 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #1057 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1058 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1059 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1060 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1061 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1062 Player 1 deck size: 4, hand size: 2 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #1063 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1064 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1065 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1066 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1067 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1068 Player 1 deck size: 4, hand size: 3 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #1069 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1070 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1071 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1072 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1073 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1074 Player 1 deck size: 4, hand size: 4 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #1075 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1076 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1077 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1078 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1079 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1080 Player 1 deck size: 4, hand size: 5 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #1081 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #1082 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #1083 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #1084 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #1085 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #1086 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #1087 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #1088 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #1089 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #1090 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #1091 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #1092 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #1093 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #1094 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #1095 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #1096 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #1097 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #1098 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #1099 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #1100 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #1101 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #1102 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #1103 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #1104 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #1105 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #1106 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #1107 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #1108 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #1109 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #1110 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #1111 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 0, hand size: 0 :
	FAILED TEST
Test #1112 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 0, hand size: 1 :
	FAILED TEST
Test #1113 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 0, hand size: 2 :
	FAILED TEST
Test #1114 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 0, hand size: 3 :
	FAILED TEST
Test #1115 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 0, hand size: 4 :
	FAILED TEST
Test #1116 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 0, hand size: 5 :
	FAILED TEST
Test #1117 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #1118 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #1119 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #1120 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #1121 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #1122 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #1123 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #1124 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #1125 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #1126 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #1127 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #1128 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #1129 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #1130 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #1131 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #1132 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #1133 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #1134 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #1135 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #1136 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #1137 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #1138 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #1139 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #1140 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #1141 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #1142 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #1143 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #1144 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #1145 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #1146 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #1147 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 1, hand size: 0 :
	FAILED TEST
Test #1148 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 1, hand size: 1 :
	FAILED TEST
Test #1149 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 1, hand size: 2 :
	FAILED TEST
Test #1150 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 1, hand size: 3 :
	FAILED TEST
Test #1151 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 1, hand size: 4 :
	FAILED TEST
Test #1152 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 1, hand size: 5 :
	FAILED TEST
Test #1153 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #1154 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #1155 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #1156 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #1157 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #1158 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #1159 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #1160 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #1161 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #1162 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #1163 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #1164 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #1165 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #1166 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #1167 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #1168 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #1169 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #1170 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #1171 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #1172 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #1173 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #1174 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #1175 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #1176 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #1177 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #1178 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #1179 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #1180 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #1181 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #1182 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #1183 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 2, hand size: 0 :
	FAILED TEST
Test #1184 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 2, hand size: 1 :
	FAILED TEST
Test #1185 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 2, hand size: 2 :
	FAILED TEST
Test #1186 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 2, hand size: 3 :
	FAILED TEST
Test #1187 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 2, hand size: 4 :
	FAILED TEST
Test #1188 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 2, hand size: 5 :
	FAILED TEST
Test #1189 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #1190 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #1191 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #1192 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #1193 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #1194 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #1195 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #1196 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #1197 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #1198 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #1199 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #1200 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #1201 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #1202 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #1203 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #1204 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #1205 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #1206 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #1207 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #1208 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #1209 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #1210 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #1211 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #1212 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #1213 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #1214 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #1215 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #1216 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #1217 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #1218 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #1219 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 3, hand size: 0 :
	FAILED TEST
Test #1220 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 3, hand size: 1 :
	FAILED TEST
Test #1221 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 3, hand size: 2 :
	FAILED TEST
Test #1222 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 3, hand size: 3 :
	FAILED TEST
Test #1223 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 3, hand size: 4 :
	FAILED TEST
Test #1224 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 3, hand size: 5 :
	FAILED TEST
Test #1225 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1226 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1227 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1228 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1229 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1230 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1231 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1232 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1233 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1234 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1235 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1236 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1237 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1238 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1239 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1240 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1241 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1242 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1243 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1244 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1245 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1246 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1247 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1248 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1249 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1250 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1251 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1252 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1253 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1254 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1255 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 4, hand size: 0 :
	FAILED TEST
Test #1256 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 4, hand size: 1 :
	FAILED TEST
Test #1257 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 4, hand size: 2 :
	FAILED TEST
Test #1258 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 4, hand size: 3 :
	FAILED TEST
Test #1259 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 4, hand size: 4 :
	FAILED TEST
Test #1260 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 4, hand size: 5 :
	FAILED TEST
Test #1261 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1262 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1263 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1264 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1265 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1266 Player 1 deck size: 5, hand size: 0 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #1267 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1268 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1269 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1270 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1271 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1272 Player 1 deck size: 5, hand size: 1 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #1273 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1274 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1275 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1276 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1277 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1278 Player 1 deck size: 5, hand size: 2 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #1279 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1280 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1281 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1282 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1283 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1284 Player 1 deck size: 5, hand size: 3 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #1285 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1286 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1287 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1288 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1289 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1290 Player 1 deck size: 5, hand size: 4 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
Test #1291 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 5, hand size: 0 :
	FAILED TEST
Test #1292 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 5, hand size: 1 :
	FAILED TEST
Test #1293 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 5, hand size: 2 :
	FAILED TEST
Test #1294 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 5, hand size: 3 :
	FAILED TEST
Test #1295 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 5, hand size: 4 :
	FAILED TEST
Test #1296 Player 1 deck size: 5, hand size: 5 | Player 2 deck size: 5, hand size: 5 :
	FAILED TEST
All tests passed!

Times ran: 1296 | Tests Failed: 648
File 'dominion.c'
Lines executed:26.25% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/***** Refactored cards - now with bugs!*****/
        -:    9:
        -:   10:/* Smithy */
        -:   11:/* Card Test 1 */
        -:   12:/* Random tester card1 */
     1296:   13:int play_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:   14:{
        -:   15:	int i;
        -:   16:
        -:   17:      //+3 Cards
     3888:   18:        for (i = 1; i < 3; i++) /* BUG: i = 1 instead of i = 0 */
        -:   19:	{
     2592:   20:	  drawCard(currentPlayer, state);
        -:   21:	}
        -:   22:			
        -:   23:      //discard card from hand
     1296:   24:      discardCard(handPos, currentPlayer, state, 0);
     1296:   25:      return 0;
        -:   26:}
        -:   27:
        -:   28:/* Adventurer */
        -:   29:/* Card Test 2 */
        -:   30:/* Random tester */
    #####:   31:int play_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:   32:{
        -:   33:	int cardDrawn;
        -:   34:
    #####:   35:	while(drawntreasure<2){
    #####:   36:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   37:		  shuffle(currentPlayer, state);
        -:   38:		}
    #####:   39:		drawCard(currentPlayer, state);
    #####:   40:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   41:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   42:		  drawntreasure++;
        -:   43:		else{
    #####:   44:		  temphand[z]=cardDrawn;
    #####:   45:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   46:		  z++;
        -:   47:		}
        -:   48:	      }
    #####:   49:	      while(z-1>0){ /* BUG: '>' instead of '>=' */
    #####:   50:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   51:		z=z-1;
        -:   52:	      }
    #####:   53:	      return 0;
        -:   54:}
        -:   55:
        -:   56:/* Council Room */
        -:   57:/* Card Test 3 */
    #####:   58:int play_council_room(int currentPlayer, struct gameState *state, int handPos)
        -:   59:{
        -:   60:	int i;
        -:   61:
        -:   62:      //+4 Cards
    #####:   63:      for (i = 0; i < 3; i++) /* BUG: draw 3 cards instead of 4 */
        -:   64:	{
    #####:   65:	  drawCard(currentPlayer, state);
        -:   66:	}
        -:   67:			
        -:   68:      //+1 Buy
    #####:   69:      state->numBuys++;
        -:   70:			
        -:   71:      //Each other player draws a card
    #####:   72:      for (i = 0; i < state->numPlayers; i++)
        -:   73:	{
    #####:   74:	  if ( i != currentPlayer )
        -:   75:	    {
    #####:   76:	      drawCard(i, state);
        -:   77:	    }
        -:   78:	}
        -:   79:			
        -:   80:      //put played card in played card pile
    #####:   81:      discardCard(handPos, currentPlayer, state, 0);
        -:   82:			
    #####:   83:      return 0;
        -:   84:}
        -:   85:
        -:   86:/* Mine */
    #####:   87:int play_mine(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:   88:{
        -:   89:	int i;
        -:   90:	int j;
        -:   91:
    #####:   92:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:   93:
    #####:   94:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:   95:	  {
    #####:   96:	    return -1;
        -:   97:	  }
        -:   98:		  
    #####:   99:	if (choice2 > treasure_map || choice2 < curse)
        -:  100:	  {
    #####:  101:	    return -1;
        -:  102:	  }
        -:  103:
    #####:  104:	if ( (getCost(state->hand[currentPlayer][choice1]) + 4) > getCost(choice2) ) /* BUG: Gain treasure costing up to 4 more instead of 3 */
        -:  105:	  {
    #####:  106:	    return -1;
        -:  107:	  }
        -:  108:
    #####:  109:	gainCard(choice2, state, 2, currentPlayer);
        -:  110:
        -:  111:	//discard card from hand
    #####:  112:	discardCard(handPos, currentPlayer, state, 0);
        -:  113:
        -:  114:	//discard trashed card
    #####:  115:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  116:	  {
    #####:  117:	    if (state->hand[currentPlayer][i] == j)
        -:  118:	      {
    #####:  119:		discardCard(i, currentPlayer, state, 0);			
    #####:  120:		break;
        -:  121:	      }
        -:  122:	  }
        -:  123:			  
    #####:  124:	return 0;
        -:  125:}
        -:  126:
        -:  127:/* Remodel */
    #####:  128:int play_remodel(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  129:{
        -:  130:	int i;
        -:  131:	int j;
        -:  132:
    #####:  133:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  134:
    #####:  135:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  136:	{
    #####:  137:	  return -1;
        -:  138:	}
        -:  139:
    #####:  140:      gainCard(choice2, state, 0, currentPlayer);
        -:  141:
        -:  142:      //discard card from hand
    #####:  143:      discardCard(handPos, currentPlayer, state, 0);
        -:  144:
        -:  145:      //discard trashed card
    #####:  146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  147:	{
    #####:  148:	  if (state->hand[currentPlayer][i] == j)
        -:  149:	    {
    #####:  150:	      discardCard(i, currentPlayer, state, 0);			
    #####:  151:	      break;
        -:  152:	    }
        -:  153:	}
        -:  154:
        -:  155:
    #####:  156:      return 0;
        -:  157:}
        -:  158:
        -:  159:/* Village */
        -:  160:/* Card Test 4 */
        -:  161:/* Random tester card 2 */
    #####:  162:int play_village(int currentPlayer, struct gameState *state, int handPos)
        -:  163:{
        -:  164:      //+1 Card
    #####:  165:      drawCard(currentPlayer, state);
        -:  166:			
        -:  167:      //+2 Actions
    #####:  168:      state->numActions = state->numActions + 2;
        -:  169:			
        -:  170:      //discard played card from hand
    #####:  171:      discardCard(handPos, currentPlayer, state, 0);
    #####:  172:      return 0;
        -:  173:}
        -:  174:
        -:  175:/***** End refactoring *****/
        -:  176:
        -:  177:
   161470:  178:int compare(const void* a, const void* b) {
   161470:  179:  if (*(int*)a > *(int*)b)
     4950:  180:    return 1;
   156520:  181:  if (*(int*)a < *(int*)b)
    45342:  182:    return -1;
   111178:  183:  return 0;
        -:  184:}
        -:  185:
    #####:  186:struct gameState* newGame() {
    #####:  187:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  188:  return g;
        -:  189:}
        -:  190:
    #####:  191:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  192:		  int k8, int k9, int k10) {
    #####:  193:  int* k = malloc(10 * sizeof(int));
    #####:  194:  k[0] = k1;
    #####:  195:  k[1] = k2;
    #####:  196:  k[2] = k3;
    #####:  197:  k[3] = k4;
    #####:  198:  k[4] = k5;
    #####:  199:  k[5] = k6;
    #####:  200:  k[6] = k7;
    #####:  201:  k[7] = k8;
    #####:  202:  k[8] = k9;
    #####:  203:  k[9] = k10;
    #####:  204:  return k;
        -:  205:}
        -:  206:
     5049:  207:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  208:		   struct gameState *state) {
        -:  209:
        -:  210:  int i;
        -:  211:  int j;
        -:  212:  int it;			
        -:  213:  //set up random number generator
     5049:  214:  SelectStream(1);
     5049:  215:  PutSeed((long)randomSeed);
        -:  216:  
        -:  217:  //check number of players
     5049:  218:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  219:    {
    #####:  220:      return -1;
        -:  221:    }
        -:  222:
        -:  223:  //set number of players
     5049:  224:  state->numPlayers = numPlayers;
        -:  225:
        -:  226:  //check selected kingdom cards are different
    55539:  227:  for (i = 0; i < 10; i++)
        -:  228:    {
   555390:  229:      for (j = 0; j < 10; j++)
        -:  230:        {
   504900:  231:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  232:	    {
    #####:  233:	      return -1;
        -:  234:	    }
        -:  235:        }
        -:  236:    }
        -:  237:
        -:  238:
        -:  239:  //initialize supply
        -:  240:  ///////////////////////////////
        -:  241:
        -:  242:  //set number of Curse cards
     5049:  243:  if (numPlayers == 2)
        -:  244:    {
     5049:  245:      state->supplyCount[curse] = 10;
        -:  246:    }
    #####:  247:  else if (numPlayers == 3)
        -:  248:    {
    #####:  249:      state->supplyCount[curse] = 20;
        -:  250:    }
        -:  251:  else
        -:  252:    {
    #####:  253:      state->supplyCount[curse] = 30;
        -:  254:    }
        -:  255:
        -:  256:  //set number of Victory cards
     5049:  257:  if (numPlayers == 2)
        -:  258:    {
     5049:  259:      state->supplyCount[estate] = 8;
     5049:  260:      state->supplyCount[duchy] = 8;
     5049:  261:      state->supplyCount[province] = 8;
        -:  262:    }
        -:  263:  else
        -:  264:    {
    #####:  265:      state->supplyCount[estate] = 12;
    #####:  266:      state->supplyCount[duchy] = 12;
    #####:  267:      state->supplyCount[province] = 12;
        -:  268:    }
        -:  269:
        -:  270:  //set number of Treasure cards
     5049:  271:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5049:  272:  state->supplyCount[silver] = 40;
     5049:  273:  state->supplyCount[gold] = 30;
        -:  274:
        -:  275:  //set number of Kingdom cards
   106029:  276:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  277:    {
   833085:  278:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  279:	{
   782595:  280:	  if (kingdomCards[j] == i)
        -:  281:	    {
        -:  282:	      //check if card is a 'Victory' Kingdom card
    50490:  283:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  284:		{
    20196:  285:		  if (numPlayers == 2){ 
    10098:  286:		    state->supplyCount[i] = 8; 
        -:  287:		  }
    #####:  288:		  else{ state->supplyCount[i] = 12; }
        -:  289:		}
        -:  290:	      else
        -:  291:		{
    40392:  292:		  state->supplyCount[i] = 10;
        -:  293:		}
    50490:  294:	      break;
        -:  295:	    }
        -:  296:	  else    //card is not in the set choosen for the game
        -:  297:	    {
   732105:  298:	      state->supplyCount[i] = -1;
        -:  299:	    }
        -:  300:	}
        -:  301:
        -:  302:    }
        -:  303:
        -:  304:  ////////////////////////
        -:  305:  //supply intilization complete
        -:  306:
        -:  307:  //set player decks
    15147:  308:  for (i = 0; i < numPlayers; i++)
        -:  309:    {
    10098:  310:      state->deckCount[i] = 0;
    40392:  311:      for (j = 0; j < 3; j++)
        -:  312:	{
    30294:  313:	  state->deck[i][j] = estate;
    30294:  314:	  state->deckCount[i]++;
        -:  315:	}
    80784:  316:      for (j = 3; j < 10; j++)
        -:  317:	{
    70686:  318:	  state->deck[i][j] = copper;
    70686:  319:	  state->deckCount[i]++;		
        -:  320:	}
        -:  321:    }
        -:  322:
        -:  323:  //shuffle player decks
    15147:  324:  for (i = 0; i < numPlayers; i++)
        -:  325:    {
    10098:  326:      if ( shuffle(i, state) < 0 )
        -:  327:	{
    #####:  328:	  return -1;
        -:  329:	}
        -:  330:    }
        -:  331:
        -:  332:  //draw player hands
    15147:  333:  for (i = 0; i < numPlayers; i++)
        -:  334:    {  
        -:  335:      //initialize hand size to zero
    10098:  336:      state->handCount[i] = 0;
    10098:  337:      state->discardCount[i] = 0;
        -:  338:      //draw 5 cards
        -:  339:      // for (j = 0; j < 5; j++)
        -:  340:      //	{
        -:  341:      //	  drawCard(i, state);
        -:  342:      //	}
        -:  343:    }
        -:  344:  
        -:  345:  //set embargo tokens to 0 for all supply piles
   141372:  346:  for (i = 0; i <= treasure_map; i++)
        -:  347:    {
   136323:  348:      state->embargoTokens[i] = 0;
        -:  349:    }
        -:  350:
        -:  351:  //initialize first player's turn
     5049:  352:  state->outpostPlayed = 0;
     5049:  353:  state->phase = 0;
     5049:  354:  state->numActions = 1;
     5049:  355:  state->numBuys = 1;
     5049:  356:  state->playedCardCount = 0;
     5049:  357:  state->whoseTurn = 0;
     5049:  358:  state->handCount[state->whoseTurn] = 0;
        -:  359:  //int it; move to top
        -:  360:
        -:  361:  //Moved draw cards to here, only drawing at the start of a turn
    30294:  362:  for (it = 0; it < 5; it++){
    25245:  363:    drawCard(state->whoseTurn, state);
        -:  364:  }
        -:  365:
     5049:  366:  updateCoins(state->whoseTurn, state, 0);
        -:  367:
     5049:  368:  return 0;
        -:  369:}
        -:  370:
    10746:  371:int shuffle(int player, struct gameState *state) {
        -:  372: 
        -:  373:
        -:  374:  int newDeck[MAX_DECK];
    10746:  375:  int newDeckPos = 0;
        -:  376:  int card;
        -:  377:  int i;
        -:  378:
    10746:  379:  if (state->deckCount[player] < 1)
      648:  380:    return -1;
    10098:  381:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  382:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  383:
   121176:  384:  while (state->deckCount[player] > 0) {
   100980:  385:    card = floor(Random() * state->deckCount[player]);
   100980:  386:    newDeck[newDeckPos] = state->deck[player][card];
   100980:  387:    newDeckPos++;
   353430:  388:    for (i = card; i < state->deckCount[player]-1; i++) {
   252450:  389:      state->deck[player][i] = state->deck[player][i+1];
        -:  390:    }
   100980:  391:    state->deckCount[player]--;
        -:  392:  }
   111078:  393:  for (i = 0; i < newDeckPos; i++) {
   100980:  394:    state->deck[player][i] = newDeck[i];
   100980:  395:    state->deckCount[player]++;
        -:  396:  }
        -:  397:
    10098:  398:  return 0;
        -:  399:}
        -:  400:
    #####:  401:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  402:{	
        -:  403:  int card;
    #####:  404:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  405:
        -:  406:  //check if it is the right phase
    #####:  407:  if (state->phase != 0)
        -:  408:    {
    #####:  409:      return -1;
        -:  410:    }
        -:  411:	
        -:  412:  //check if player has enough actions
    #####:  413:  if ( state->numActions < 1 )
        -:  414:    {
    #####:  415:      return -1;
        -:  416:    }
        -:  417:	
        -:  418:  //get card played
    #####:  419:  card = handCard(handPos, state);
        -:  420:	
        -:  421:  //check if selected card is an action
    #####:  422:  if ( card < adventurer || card > treasure_map )
        -:  423:    {
    #####:  424:      return -1;
        -:  425:    }
        -:  426:	
        -:  427:  //play card
    #####:  428:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  429:    {
    #####:  430:      return -1;
        -:  431:    }
        -:  432:	
        -:  433:  //reduce number of actions
    #####:  434:  state->numActions--;
        -:  435:
        -:  436:  //update coins (Treasure cards may be added with card draws)
    #####:  437:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  438:	
    #####:  439:  return 0;
        -:  440:}
        -:  441:
    #####:  442:int buyCard(int supplyPos, struct gameState *state) {
        -:  443:  int who;
        -:  444:  if (DEBUG){
        -:  445:    printf("Entering buyCard...\n");
        -:  446:  }
        -:  447:
        -:  448:  // I don't know what to do about the phase thing.
        -:  449:
    #####:  450:  who = state->whoseTurn;
        -:  451:
    #####:  452:  if (state->numBuys < 1){
        -:  453:    if (DEBUG)
        -:  454:      printf("You do not have any buys left\n");
    #####:  455:    return -1;
    #####:  456:  } else if (supplyCount(supplyPos, state) <1){
        -:  457:    if (DEBUG)
        -:  458:      printf("There are not any of that type of card left\n");
    #####:  459:    return -1;
    #####:  460:  } else if (state->coins < getCost(supplyPos)){
        -:  461:    if (DEBUG) 
        -:  462:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  463:    return -1;
        -:  464:  } else {
    #####:  465:    state->phase=1;
        -:  466:    //state->supplyCount[supplyPos]--;
    #####:  467:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  468:  
    #####:  469:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  470:    state->numBuys--;
        -:  471:    if (DEBUG)
        -:  472:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  473:  }
        -:  474:
        -:  475:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  476:  //state->discardCount[who]++;
        -:  477:    
    #####:  478:  return 0;
        -:  479:}
        -:  480:
        -:  481:/***** Use this function for Unit test 4 *****/
    #####:  482:int numHandCards(struct gameState *state) {
    #####:  483:  return state->handCount[ whoseTurn(state) ];
        -:  484:}
        -:  485:
    #####:  486:int handCard(int handPos, struct gameState *state) {
    #####:  487:  int currentPlayer = whoseTurn(state);
    #####:  488:  return state->hand[currentPlayer][handPos];
        -:  489:}
        -:  490:
        -:  491:/***** Use this function for Unit test 3 *****/
    #####:  492:int supplyCount(int card, struct gameState *state) {
    #####:  493:  return state->supplyCount[card];
        -:  494:}
        -:  495:
     2662:  496:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  497:  int i;
     2662:  498:  int count = 0;
        -:  499:
    15972:  500:  for (i = 0; i < state->deckCount[player]; i++)
        -:  501:    {
    13310:  502:      if (state->deck[player][i] == card) count++;
        -:  503:    }
        -:  504:
    15972:  505:  for (i = 0; i < state->handCount[player]; i++)
        -:  506:    {
    13310:  507:      if (state->hand[player][i] == card) count++;
        -:  508:    }
        -:  509:
    15972:  510:  for (i = 0; i < state->discardCount[player]; i++)
        -:  511:    {
    13310:  512:      if (state->discard[player][i] == card) count++;
        -:  513:    }
        -:  514:
     2662:  515:  return count;
        -:  516:}
        -:  517:
     1296:  518:int whoseTurn(struct gameState *state) {
     1296:  519:  return state->whoseTurn;
        -:  520:}
        -:  521:
    #####:  522:int endTurn(struct gameState *state) {
        -:  523:  int k;
        -:  524:  int i;
    #####:  525:  int currentPlayer = whoseTurn(state);
        -:  526:  
        -:  527:  //Discard hand
    #####:  528:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  529:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  530:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  531:  }
    #####:  532:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  533:    
        -:  534:  //Code for determining the player
    #####:  535:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  536:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  537:  }
        -:  538:  else{
    #####:  539:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  540:  }
        -:  541:
    #####:  542:  state->outpostPlayed = 0;
    #####:  543:  state->phase = 0;
    #####:  544:  state->numActions = 1;
    #####:  545:  state->coins = 0;
    #####:  546:  state->numBuys = 1;
    #####:  547:  state->playedCardCount = 0;
    #####:  548:  state->handCount[state->whoseTurn] = 0;
        -:  549:
        -:  550:  //int k; move to top
        -:  551:  //Next player draws hand
    #####:  552:  for (k = 0; k < 5; k++){
    #####:  553:    drawCard(state->whoseTurn, state);//Draw a card
        -:  554:  }
        -:  555:
        -:  556:  //Update money
    #####:  557:  updateCoins(state->whoseTurn, state , 0);
        -:  558:
    #####:  559:  return 0;
        -:  560:}
        -:  561:
        -:  562:/***** Use this function for Unit test 1 *****/
       90:  563:int isGameOver(struct gameState *state) {
        -:  564:  int i;
        -:  565:  int j;
        -:  566:	
        -:  567:  //if stack of Province cards is empty, the game ends
       90:  568:  if (state->supplyCount[province] == 0)
        -:  569:    {
       26:  570:      return 1;
        -:  571:    }
        -:  572:
        -:  573:  //if three supply pile are at 0, the game ends
       64:  574:  j = 0;
     1664:  575:  for (i = 0; i < 25; i++)
        -:  576:    {
     1600:  577:      if (state->supplyCount[i] == 0)
        -:  578:	{
       96:  579:	  j++;
        -:  580:	}
        -:  581:    }
       64:  582:  if ( j >= 3)
        -:  583:    {
       16:  584:      return 1;
        -:  585:    }
        -:  586:
       48:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int scoreFor (int player, struct gameState *state) {
        -:  591:
        -:  592:  int i;
    #####:  593:  int score = 0;
        -:  594:  //score from hand
    #####:  595:  for (i = 0; i < state->handCount[player]; i++)
        -:  596:    {
    #####:  597:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  598:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  599:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  600:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  601:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  602:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  603:    }
        -:  604:
        -:  605:  //score from discard
    #####:  606:  for (i = 0; i < state->discardCount[player]; i++)
        -:  607:    {
    #####:  608:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  609:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  610:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  611:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  612:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  613:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  614:    }
        -:  615:
        -:  616:  //score from deck
    #####:  617:  for (i = 0; i < state->discardCount[player]; i++)
        -:  618:    {
    #####:  619:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  620:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  621:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  622:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  623:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  624:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  625:    }
        -:  626:
    #####:  627:  return score;
        -:  628:}
        -:  629:
    #####:  630:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  631:  int i;	
        -:  632:  int j;
        -:  633:  int highScore;
        -:  634:  int currentPlayer;
        -:  635:
        -:  636:  //get score for each player
    #####:  637:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  638:    {
        -:  639:      //set unused player scores to -9999
    #####:  640:      if (i >= state->numPlayers)
        -:  641:	{
    #####:  642:	  players[i] = -9999;
        -:  643:	}
        -:  644:      else
        -:  645:	{
    #####:  646:	  players[i] = scoreFor (i, state);
        -:  647:	}
        -:  648:    }
        -:  649:
        -:  650:  //find highest score
    #####:  651:  j = 0;
    #####:  652:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  653:    {
    #####:  654:      if (players[i] > players[j])
        -:  655:	{
    #####:  656:	  j = i;
        -:  657:	}
        -:  658:    }
    #####:  659:  highScore = players[j];
        -:  660:
        -:  661:  //add 1 to players who had less turns
    #####:  662:  currentPlayer = whoseTurn(state);
    #####:  663:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  664:    {
    #####:  665:      if ( players[i] == highScore && i > currentPlayer )
        -:  666:	{
    #####:  667:	  players[i]++;
        -:  668:	}
        -:  669:    }
        -:  670:
        -:  671:  //find new highest score
    #####:  672:  j = 0;
    #####:  673:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  674:    {
    #####:  675:      if ( players[i] > players[j] )
        -:  676:	{
    #####:  677:	  j = i;
        -:  678:	}
        -:  679:    }
    #####:  680:  highScore = players[j];
        -:  681:
        -:  682:  //set winners in array to 1 and rest to 0
    #####:  683:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  684:    {
    #####:  685:      if ( players[i] == highScore )
        -:  686:	{
    #####:  687:	  players[i] = 1;
        -:  688:	}
        -:  689:      else
        -:  690:	{
    #####:  691:	  players[i] = 0;
        -:  692:	}
        -:  693:    }
        -:  694:
    #####:  695:  return 0;
        -:  696:}
        -:  697:
    27837:  698:int drawCard(int player, struct gameState *state)
        -:  699:{	int count;
        -:  700:  int deckCounter;
    27837:  701:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  702:    
        -:  703:    //Step 1 Shuffle the discard pile back into a deck
        -:  704:    int i;
        -:  705:    //Move discard to deck
      648:  706:    for (i = 0; i < state->discardCount[player];i++){
    #####:  707:      state->deck[player][i] = state->discard[player][i];
    #####:  708:      state->discard[player][i] = -1;
        -:  709:    }
        -:  710:
      648:  711:    state->deckCount[player] = state->discardCount[player];
      648:  712:    state->discardCount[player] = 0;//Reset discard
        -:  713:
        -:  714:    //Shufffle the deck
      648:  715:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  716:   
        -:  717:    if (DEBUG){//Debug statements
        -:  718:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  719:    }
        -:  720:    
      648:  721:    state->discardCount[player] = 0;
        -:  722:
        -:  723:    //Step 2 Draw Card
      648:  724:    count = state->handCount[player];//Get current player's hand count
        -:  725:    
        -:  726:    if (DEBUG){//Debug statements
        -:  727:      printf("Current hand count: %d\n", count);
        -:  728:    }
        -:  729:    
      648:  730:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  731:
      648:  732:    if (deckCounter == 0)
      648:  733:      return -1;
        -:  734:
    #####:  735:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  736:    state->deckCount[player]--;
    #####:  737:    state->handCount[player]++;//Increment hand count
        -:  738:  }
        -:  739:
        -:  740:  else{
    27189:  741:    int count = state->handCount[player];//Get current hand count for player
        -:  742:    int deckCounter;
        -:  743:    if (DEBUG){//Debug statements
        -:  744:      printf("Current hand count: %d\n", count);
        -:  745:    }
        -:  746:
    27189:  747:    deckCounter = state->deckCount[player];//Create holder for the deck count
    27189:  748:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    27189:  749:    state->deckCount[player]--;
    27189:  750:    state->handCount[player]++;//Increment hand count
        -:  751:  }
        -:  752:
    27189:  753:  return 0;
        -:  754:}
        -:  755:
    #####:  756:int getCost(int cardNumber)
        -:  757:{
    #####:  758:  switch( cardNumber ) 
        -:  759:    {
        -:  760:    case curse:
    #####:  761:      return 0;
        -:  762:    case estate:
    #####:  763:      return 2;
        -:  764:    case duchy:
    #####:  765:      return 5;
        -:  766:    case province:
    #####:  767:      return 8;
        -:  768:    case copper:
    #####:  769:      return 0;
        -:  770:    case silver:
    #####:  771:      return 3;
        -:  772:    case gold:
    #####:  773:      return 6;
        -:  774:    case adventurer:
    #####:  775:      return 6;
        -:  776:    case council_room:
    #####:  777:      return 5;
        -:  778:    case feast:
    #####:  779:      return 4;
        -:  780:    case gardens:
    #####:  781:      return 4;
        -:  782:    case mine:
    #####:  783:      return 5;
        -:  784:    case remodel:
    #####:  785:      return 4;
        -:  786:    case smithy:
    #####:  787:      return 4;
        -:  788:    case village:
    #####:  789:      return 3;
        -:  790:    case baron:
    #####:  791:      return 4;
        -:  792:    case great_hall:
    #####:  793:      return 3;
        -:  794:    case minion:
    #####:  795:      return 5;
        -:  796:    case steward:
    #####:  797:      return 3;
        -:  798:    case tribute:
    #####:  799:      return 5;
        -:  800:    case ambassador:
    #####:  801:      return 3;
        -:  802:    case cutpurse:
    #####:  803:      return 4;
        -:  804:    case embargo: 
    #####:  805:      return 2;
        -:  806:    case outpost:
    #####:  807:      return 5;
        -:  808:    case salvager:
    #####:  809:      return 4;
        -:  810:    case sea_hag:
    #####:  811:      return 4;
        -:  812:    case treasure_map:
    #####:  813:      return 4;
        -:  814:    }
        -:  815:	
    #####:  816:  return -1;
        -:  817:}
        -:  818:
        -:  819:/********** BEGINNING of cardEffct **********/
        -:  820:/* This is where the refactor and bug additions will be done for assignment-2 */
     1296:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
     1296:  828:  int currentPlayer = whoseTurn(state);
     1296:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
     1296:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND];// moved above the if statement
     1296:  833:  int drawntreasure=0;
        -:  834:  int cardDrawn;
     1296:  835:  int z = 0;// this is the counter for the temp hand
     1296:  836:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  837:    nextPlayer = 0;
        -:  838:  }
        -:  839:  
        -:  840:  /* Refactoring switch statement so cards are implemented in their own functions */
        -:  841:  //uses switch to select card and perform actions
     1296:  842:  switch( card ) 
        -:  843:    {
        -:  844:
        -:  845:    /***** Refactor adventurer *****/
        -:  846:    case adventurer:
    #####:  847:	    return play_adventurer(drawntreasure, state, currentPlayer, temphand, z);
        -:  848:      /*
        -:  849:      while(drawntreasure<2){
        -:  850:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  851:	  shuffle(currentPlayer, state);
        -:  852:	}
        -:  853:	drawCard(currentPlayer, state);
        -:  854:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  855:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  856:	  drawntreasure++;
        -:  857:	else{
        -:  858:	  temphand[z]=cardDrawn;
        -:  859:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  860:	  z++;
        -:  861:	}
        -:  862:      }
        -:  863:      while(z-1>=0){
        -:  864:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  865:	z=z-1;
        -:  866:      }
        -:  867:      return 0;
        -:  868:      */
        -:  869:			
        -:  870:    /***** Refactor council room*****/
        -:  871:    case council_room:
    #####:  872:       	return play_council_room(currentPlayer, state, handPos);
        -:  873:      /*
        -:  874:      //+4 Cards
        -:  875:      for (i = 0; i < 4; i++)
        -:  876:	{
        -:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
        -:  879:			
        -:  880:      //+1 Buy
        -:  881:      state->numBuys++;
        -:  882:			
        -:  883:      //Each other player draws a card
        -:  884:      for (i = 0; i < state->numPlayers; i++)
        -:  885:	{
        -:  886:	  if ( i != currentPlayer )
        -:  887:	    {
        -:  888:	      drawCard(i, state);
        -:  889:	    }
        -:  890:	}
        -:  891:			
        -:  892:      //put played card in played card pile
        -:  893:      discardCard(handPos, currentPlayer, state, 0);
        -:  894:			
        -:  895:      return 0;
        -:  896:      */
        -:  897:			
        -:  898:    case feast:
        -:  899:      //gain card with cost up to 5
        -:  900:      //Backup hand
    #####:  901:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  902:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  903:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  904:      }
        -:  905:      //Backup hand
        -:  906:
        -:  907:      //Update Coins for Buy
    #####:  908:      updateCoins(currentPlayer, state, 5);
    #####:  909:      x = 1;//Condition to loop on
    #####:  910:      while( x == 1) {//Buy one card
    #####:  911:	if (supplyCount(choice1, state) <= 0){
        -:  912:	  if (DEBUG)
        -:  913:	    printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:	  if (DEBUG){
        -:  916:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  917:	  }
        -:  918:	}
    #####:  919:	else if (state->coins < getCost(choice1)){
    #####:  920:	  printf("That card is too expensive!\n");
        -:  921:
        -:  922:	  if (DEBUG){
        -:  923:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  924:	  }
        -:  925:	}
        -:  926:	else{
        -:  927:
        -:  928:	  if (DEBUG){
        -:  929:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:	  }
        -:  931:
    #####:  932:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  933:	  x = 0;//No more buying cards
        -:  934:
        -:  935:	  if (DEBUG){
        -:  936:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:	  }
        -:  938:
        -:  939:	}
        -:  940:      }     
        -:  941:
        -:  942:      //Reset Hand
    #####:  943:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  944:	state->hand[currentPlayer][i] = temphand[i];
    #####:  945:	temphand[i] = -1;
        -:  946:      }
        -:  947:      //Reset Hand
        -:  948:      			
    #####:  949:      return 0;
        -:  950:			
        -:  951:    case gardens:
    #####:  952:      return -1;
        -:  953:			
        -:  954:    /***** Refactor mine*****/
        -:  955:    case mine:
    #####:  956:	return play_mine(state, choice1, choice2, currentPlayer, handPos);
        -:  957:      /*
        -:  958:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
        -:  960:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  961:	{
        -:  962:	  return -1;
        -:  963:	}
        -:  964:		
        -:  965:      if (choice2 > treasure_map || choice2 < curse)
        -:  966:	{
        -:  967:	  return -1;
        -:  968:	}
        -:  969:
        -:  970:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  971:	{
        -:  972:	  return -1;
        -:  973:	}
        -:  974:
        -:  975:      gainCard(choice2, state, 2, currentPlayer);
        -:  976:
        -:  977:      //discard card from hand
        -:  978:      discardCard(handPos, currentPlayer, state, 0);
        -:  979:
        -:  980:      //discard trashed card
        -:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:	{
        -:  983:	  if (state->hand[currentPlayer][i] == j)
        -:  984:	    {
        -:  985:	      discardCard(i, currentPlayer, state, 0);			
        -:  986:	      break;
        -:  987:	    }
        -:  988:	}
        -:  989:			
        -:  990:      return 0;
        -:  991:      */
        -:  992:			
        -:  993:    /***** Refactor remodel*****/
        -:  994:    case remodel:
    #####:  995:      return play_remodel(state, choice1, choice2, currentPlayer, handPos);
        -:  996:      /*
        -:  997:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  998:
        -:  999:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1000:	{
        -: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
        -: 1004:      gainCard(choice2, state, 0, currentPlayer);
        -: 1005:
        -: 1006:      //discard card from hand
        -: 1007:      discardCard(handPos, currentPlayer, state, 0);
        -: 1008:
        -: 1009:      //discard trashed card
        -: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1011:	{
        -: 1012:	  if (state->hand[currentPlayer][i] == j)
        -: 1013:	    {
        -: 1014:	      discardCard(i, currentPlayer, state, 0);			
        -: 1015:	      break;
        -: 1016:	    }
        -: 1017:	}
        -: 1018:
        -: 1019:
        -: 1020:      return 0;
        -: 1021:      */
        -: 1022:		
        -: 1023:    /***** Refactor smithy *****/
        -: 1024:    case smithy:
     1296: 1025:      return play_smithy(currentPlayer, state, handPos);
        -: 1026:      /* 
        -: 1027:      //+3 Cards
        -: 1028:      for (i = 0; i < 3; i++)
        -: 1029:	{
        -: 1030:	  drawCard(currentPlayer, state);
        -: 1031:	}
        -: 1032:			
        -: 1033:      //discard card from hand
        -: 1034:      discardCard(handPos, currentPlayer, state, 0);
        -: 1035:      return 0;
        -: 1036:      */
        -: 1037:		
        -: 1038:
        -: 1039:    /***** Refactored village for assignment-3 (no new bugs introduced) *****/
        -: 1040:    case village:
    #####: 1041:      return play_village(currentPlayer, state, handPos);
        -: 1042:      /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:      */
        -: 1053:		
        -: 1054:    case baron:
    #####: 1055:      state->numBuys++;//Increase buys by 1!
    #####: 1056:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1057:	int p = 0;//Iterator for hand!
    #####: 1058:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1059:	while(card_not_discarded){
    #####: 1060:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1061:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1062:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1063:	    state->discardCount[currentPlayer]++;
    #####: 1064:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1065:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1066:	    }
    #####: 1067:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1068:	    state->handCount[currentPlayer]--;
    #####: 1069:	    card_not_discarded = 0;//Exit the loop
        -: 1070:	  }
    #####: 1071:	  else if (p > state->handCount[currentPlayer]){
        -: 1072:	    if(DEBUG) {
        -: 1073:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1074:	      printf("Must gain an estate if there are any\n");
        -: 1075:	    }
    #####: 1076:	    if (supplyCount(estate, state) > 0){
    #####: 1077:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1078:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1079:	      if (supplyCount(estate, state) == 0){
    #####: 1080:		isGameOver(state);
        -: 1081:	      }
        -: 1082:	    }
    #####: 1083:	    card_not_discarded = 0;//Exit the loop
        -: 1084:	  }
        -: 1085:			    
        -: 1086:	  else{
    #####: 1087:	    p++;//Next card
        -: 1088:	  }
        -: 1089:	}
        -: 1090:      }
        -: 1091:			    
        -: 1092:      else{
    #####: 1093:	if (supplyCount(estate, state) > 0){
    #####: 1094:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1095:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1096:	  if (supplyCount(estate, state) == 0){
    #####: 1097:	    isGameOver(state);
        -: 1098:	  }
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
        -: 1102:      
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case great_hall:
        -: 1106:      //+1 Card
    #####: 1107:      drawCard(currentPlayer, state);
        -: 1108:			
        -: 1109:      //+1 Actions
    #####: 1110:      state->numActions++;
        -: 1111:			
        -: 1112:      //discard card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case minion:
        -: 1117:      //+1 action
    #####: 1118:      state->numActions++;
        -: 1119:			
        -: 1120:      //discard card from hand
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
        -: 1122:			
    #####: 1123:      if (choice1)		//+2 coins
        -: 1124:	{
    #####: 1125:	  state->coins = state->coins + 2;
        -: 1126:	}
        -: 1127:			
    #####: 1128:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1129:	{
        -: 1130:	  //discard hand
    #####: 1131:	  while(numHandCards(state) > 0)
        -: 1132:	    {
    #####: 1133:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //draw 4
    #####: 1137:	  for (i = 0; i < 4; i++)
        -: 1138:	    {
    #####: 1139:	      drawCard(currentPlayer, state);
        -: 1140:	    }
        -: 1141:				
        -: 1142:	  //other players discard hand and redraw if hand size > 4
    #####: 1143:	  for (i = 0; i < state->numPlayers; i++)
        -: 1144:	    {
    #####: 1145:	      if (i != currentPlayer)
        -: 1146:		{
    #####: 1147:		  if ( state->handCount[i] > 4 )
        -: 1148:		    {
        -: 1149:		      //discard hand
    #####: 1150:		      while( state->handCount[i] > 0 )
        -: 1151:			{
    #####: 1152:			  discardCard(handPos, i, state, 0);
        -: 1153:			}
        -: 1154:							
        -: 1155:		      //draw 4
    #####: 1156:		      for (j = 0; j < 4; j++)
        -: 1157:			{
    #####: 1158:			  drawCard(i, state);
        -: 1159:			}
        -: 1160:		    }
        -: 1161:		}
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case steward:
    #####: 1168:      if (choice1 == 1)
        -: 1169:	{
        -: 1170:	  //+2 cards
    #####: 1171:	  drawCard(currentPlayer, state);
    #####: 1172:	  drawCard(currentPlayer, state);
        -: 1173:	}
    #####: 1174:      else if (choice1 == 2)
        -: 1175:	{
        -: 1176:	  //+2 coins
    #####: 1177:	  state->coins = state->coins + 2;
        -: 1178:	}
        -: 1179:      else
        -: 1180:	{
        -: 1181:	  //trash 2 cards in hand
    #####: 1182:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1183:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:			
        -: 1186:      //discard card from hand
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case tribute:
    #####: 1191:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1192:	if (state->deckCount[nextPlayer] > 0){
    #####: 1193:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1194:	  state->deckCount[nextPlayer]--;
        -: 1195:	}
    #####: 1196:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1197:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1198:	  state->discardCount[nextPlayer]--;
        -: 1199:	}
        -: 1200:	else{
        -: 1201:	  //No Card to Reveal
        -: 1202:	  if (DEBUG){
        -: 1203:	    printf("No cards to reveal\n");
        -: 1204:	  }
        -: 1205:	}
        -: 1206:      }
        -: 1207:	    
        -: 1208:      else{
    #####: 1209:	if (state->deckCount[nextPlayer] == 0){
    #####: 1210:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1211:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1212:	    state->deckCount[nextPlayer]++;
    #####: 1213:	    state->discard[nextPlayer][i] = -1;
    #####: 1214:	    state->discardCount[nextPlayer]--;
        -: 1215:	  }
        -: 1216:			    
    #####: 1217:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1218:	} 
    #####: 1219:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1220:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1221:	state->deckCount[nextPlayer]--;
    #####: 1222:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1223:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1224:	state->deckCount[nextPlayer]--;
        -: 1225:      }    
        -: 1226:		       
    #####: 1227:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1228:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1229:	state->playedCardCount++;
    #####: 1230:	tributeRevealedCards[1] = -1;
        -: 1231:      }
        -: 1232:
    #####: 1233:      for (i = 0; i <= 2; i ++){
    #####: 1234:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1235:	  state->coins += 2;
        -: 1236:	}
        -: 1237:		    
    #####: 1238:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1239:	  drawCard(currentPlayer, state);
    #####: 1240:	  drawCard(currentPlayer, state);
        -: 1241:	}
        -: 1242:	else{//Action Card
    #####: 1243:	  state->numActions = state->numActions + 2;
        -: 1244:	}
        -: 1245:      }
        -: 1246:	    
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case ambassador:
    #####: 1250:      j = 0;		//used to check if player has enough cards to discard
        -: 1251:
    #####: 1252:      if (choice2 > 2 || choice2 < 0)
        -: 1253:	{
    #####: 1254:	  return -1;				
        -: 1255:	}
        -: 1256:
    #####: 1257:      if (choice1 == handPos)
        -: 1258:	{
    #####: 1259:	  return -1;
        -: 1260:	}
        -: 1261:
    #####: 1262:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1263:	{
    #####: 1264:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1265:	    {
    #####: 1266:	      j++;
        -: 1267:	    }
        -: 1268:	}
    #####: 1269:      if (j < choice2)
        -: 1270:	{
    #####: 1271:	  return -1;				
        -: 1272:	}
        -: 1273:
        -: 1274:      if (DEBUG) 
        -: 1275:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1276:
        -: 1277:      //increase supply count for choosen card by amount being discarded
    #####: 1278:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1279:			
        -: 1280:      //each other player gains a copy of revealed card
    #####: 1281:      for (i = 0; i < state->numPlayers; i++)
        -: 1282:	{
    #####: 1283:	  if (i != currentPlayer)
        -: 1284:	    {
    #####: 1285:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1286:	    }
        -: 1287:	}
        -: 1288:
        -: 1289:      //discard played card from hand
    #####: 1290:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1291:
        -: 1292:      //trash copies of cards returned to supply
    #####: 1293:      for (j = 0; j < choice2; j++)
        -: 1294:	{
    #####: 1295:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1296:	    {
    #####: 1297:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1298:		{
    #####: 1299:		  discardCard(i, currentPlayer, state, 1);
    #####: 1300:		  break;
        -: 1301:		}
        -: 1302:	    }
        -: 1303:	}			
        -: 1304:
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case cutpurse:
        -: 1308:
    #####: 1309:      updateCoins(currentPlayer, state, 2);
    #####: 1310:      for (i = 0; i < state->numPlayers; i++)
        -: 1311:	{
    #####: 1312:	  if (i != currentPlayer)
        -: 1313:	    {
    #####: 1314:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1315:		{
    #####: 1316:		  if (state->hand[i][j] == copper)
        -: 1317:		    {
    #####: 1318:		      discardCard(j, i, state, 0);
    #####: 1319:		      break;
        -: 1320:		    }
    #####: 1321:		  if (j == state->handCount[i])
        -: 1322:		    {
    #####: 1323:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1324:			{
        -: 1325:			  if (DEBUG)
        -: 1326:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1327:			}	
    #####: 1328:		      break;
        -: 1329:		    }		
        -: 1330:		}
        -: 1331:					
        -: 1332:	    }
        -: 1333:				
        -: 1334:	}				
        -: 1335:
        -: 1336:      //discard played card from hand
    #####: 1337:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1338:
    #####: 1339:      return 0;
        -: 1340:
        -: 1341:		
        -: 1342:    case embargo: 
        -: 1343:      //+2 Coins
    #####: 1344:      state->coins = state->coins + 2;
        -: 1345:			
        -: 1346:      //see if selected pile is in play
    #####: 1347:      if ( state->supplyCount[choice1] == -1 )
        -: 1348:	{
    #####: 1349:	  return -1;
        -: 1350:	}
        -: 1351:			
        -: 1352:      //add embargo token to selected supply pile
    #####: 1353:      state->embargoTokens[choice1]++;
        -: 1354:			
        -: 1355:      //trash card
    #####: 1356:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1357:      return 0;
        -: 1358:		
        -: 1359:    case outpost:
        -: 1360:      //set outpost flag
    #####: 1361:      state->outpostPlayed++;
        -: 1362:			
        -: 1363:      //discard card
    #####: 1364:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:      return 0;
        -: 1366:		
        -: 1367:    case salvager:
        -: 1368:      //+1 buy
    #####: 1369:      state->numBuys++;
        -: 1370:			
    #####: 1371:      if (choice1)
        -: 1372:	{
        -: 1373:	  //gain coins equal to trashed card
    #####: 1374:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1375:	  //trash card
    #####: 1376:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1377:	}
        -: 1378:			
        -: 1379:      //discard card
    #####: 1380:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1381:      return 0;
        -: 1382:		
        -: 1383:    case sea_hag:
    #####: 1384:      for (i = 0; i < state->numPlayers; i++){
    #####: 1385:	if (i != currentPlayer){
    #####: 1386:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1387:	  state->discardCount[i]++;
    #####: 1388:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1389:	}
        -: 1390:      }
    #####: 1391:      return 0;
        -: 1392:		
        -: 1393:    case treasure_map:
        -: 1394:      //search hand for another treasure_map
    #####: 1395:      index = -1;
    #####: 1396:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1397:	{
    #####: 1398:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1399:	    {
    #####: 1400:	      index = i;
    #####: 1401:	      break;
        -: 1402:	    }
        -: 1403:	}
    #####: 1404:      if (index > -1)
        -: 1405:	{
        -: 1406:	  //trash both treasure cards
    #####: 1407:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1408:	  discardCard(index, currentPlayer, state, 1);
        -: 1409:
        -: 1410:	  //gain 4 Gold cards
    #####: 1411:	  for (i = 0; i < 4; i++)
        -: 1412:	    {
    #####: 1413:	      gainCard(gold, state, 1, currentPlayer);
        -: 1414:	    }
        -: 1415:				
        -: 1416:	  //return success
    #####: 1417:	  return 1;
        -: 1418:	}
        -: 1419:			
        -: 1420:      //no second treasure_map found in hand
    #####: 1421:      return -1;
        -: 1422:    }
        -: 1423:	
    #####: 1424:  return -1;
        -: 1425:}
        -: 1426:
        -: 1427:/********** END of cardEffct **********/
        -: 1428:
     1296: 1429:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1430:{
        -: 1431:	
        -: 1432:  //if card is not trashed, added to Played pile 
     1296: 1433:  if (trashFlag < 1)
        -: 1434:    {
        -: 1435:      //add card to played pile
     1296: 1436:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1296: 1437:      state->playedCardCount++;
        -: 1438:    }
        -: 1439:	
        -: 1440:  //set played card to -1
     1296: 1441:  state->hand[currentPlayer][handPos] = -1;
        -: 1442:	
        -: 1443:  //remove card from player's hand
     1296: 1444:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1445:    {
        -: 1446:      //reduce number of cards in hand
       72: 1447:      state->handCount[currentPlayer]--;
        -: 1448:    }
     1224: 1449:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1450:    {
        -: 1451:      //reduce number of cards in hand
    #####: 1452:      state->handCount[currentPlayer]--;
        -: 1453:    }
        -: 1454:  else 	
        -: 1455:    {
        -: 1456:      //replace discarded card with last card in hand
     1224: 1457:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1458:      //set last card to -1
     1224: 1459:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1460:      //reduce number of cards in hand
     1224: 1461:      state->handCount[currentPlayer]--;
        -: 1462:    }
        -: 1463:	
     1296: 1464:  return 0;
        -: 1465:}
        -: 1466:
    #####: 1467:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1468:{
        -: 1469:  //Note: supplyPos is enum of choosen card
        -: 1470:	
        -: 1471:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1472:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1473:    {
    #####: 1474:      return -1;
        -: 1475:    }
        -: 1476:	
        -: 1477:  //added card for [whoseTurn] current player:
        -: 1478:  // toFlag = 0 : add to discard
        -: 1479:  // toFlag = 1 : add to deck
        -: 1480:  // toFlag = 2 : add to hand
        -: 1481:
    #####: 1482:  if (toFlag == 1)
        -: 1483:    {
    #####: 1484:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1485:      state->deckCount[player]++;
        -: 1486:    }
    #####: 1487:  else if (toFlag == 2)
        -: 1488:    {
    #####: 1489:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1490:      state->handCount[player]++;
        -: 1491:    }
        -: 1492:  else
        -: 1493:    {
    #####: 1494:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1495:      state->discardCount[player]++;
        -: 1496:    }
        -: 1497:	
        -: 1498:  //decrease number in supply pile
    #####: 1499:  state->supplyCount[supplyPos]--;
        -: 1500:	 
    #####: 1501:  return 0;
        -: 1502:}
        -: 1503:
        -: 1504:/***** Use this function for Unit test 2 *****/
     5049: 1505:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1506:{
        -: 1507:  int i;
        -: 1508:	
        -: 1509:  //reset coin count
     5049: 1510:  state->coins = 0;
        -: 1511:
        -: 1512:  //add coins for each Treasure card in player's hand
    30294: 1513:  for (i = 0; i < state->handCount[player]; i++)
        -: 1514:    {
    25245: 1515:      if (state->hand[player][i] == copper)
        -: 1516:	{
    20196: 1517:	  state->coins += 1;
        -: 1518:	}
     5049: 1519:      else if (state->hand[player][i] == silver)
        -: 1520:	{
    #####: 1521:	  state->coins += 2;
        -: 1522:	}
     5049: 1523:      else if (state->hand[player][i] == gold)
        -: 1524:	{
    #####: 1525:	  state->coins += 3;
        -: 1526:	}	
        -: 1527:    }	
        -: 1528:
        -: 1529:  //add bonus
     5049: 1530:  state->coins += bonus;
        -: 1531:
     5049: 1532:  return 0;
        -: 1533:}
        -: 1534:
        -: 1535:
        -: 1536://end of dominion.c
        -: 1537:
TESTING outpost():
Test: #1, outpostFlag: 0, handCount: 0 	Failed
Test: #2, outpostFlag: 0, handCount: 1
Test: #3, outpostFlag: 0, handCount: 2
Test: #4, outpostFlag: 0, handCount: 3
Test: #5, outpostFlag: 0, handCount: 4
Test: #6, outpostFlag: 0, handCount: 5
Test: #7, outpostFlag: 0, handCount: 6
Test: #8, outpostFlag: 0, handCount: 7
Test: #9, outpostFlag: 0, handCount: 8
Test: #10, outpostFlag: 0, handCount: 9
Test: #11, outpostFlag: 0, handCount: 10
Test: #12, outpostFlag: 0, handCount: 11
Test: #13, outpostFlag: 0, handCount: 12
Test: #14, outpostFlag: 0, handCount: 13
Test: #15, outpostFlag: 0, handCount: 14
Test: #16, outpostFlag: 0, handCount: 15
Test: #17, outpostFlag: 0, handCount: 16
Test: #18, outpostFlag: 0, handCount: 17
Test: #19, outpostFlag: 0, handCount: 18
Test: #20, outpostFlag: 0, handCount: 19
Test: #21, outpostFlag: 0, handCount: 20
Test: #22, outpostFlag: 1, handCount: 0 	Failed
Test: #23, outpostFlag: 1, handCount: 1 	Failed
Test: #24, outpostFlag: 1, handCount: 2 	Failed
Test: #25, outpostFlag: 1, handCount: 3 	Failed
Test: #26, outpostFlag: 1, handCount: 4 	Failed
Test: #27, outpostFlag: 1, handCount: 5 	Failed
Test: #28, outpostFlag: 1, handCount: 6 	Failed
Test: #29, outpostFlag: 1, handCount: 7 	Failed
Test: #30, outpostFlag: 1, handCount: 8 	Failed
Test: #31, outpostFlag: 1, handCount: 9 	Failed
Test: #32, outpostFlag: 1, handCount: 10 	Failed
Test: #33, outpostFlag: 1, handCount: 11 	Failed
Test: #34, outpostFlag: 1, handCount: 12 	Failed
Test: #35, outpostFlag: 1, handCount: 13 	Failed
Test: #36, outpostFlag: 1, handCount: 14 	Failed
Test: #37, outpostFlag: 1, handCount: 15 	Failed
Test: #38, outpostFlag: 1, handCount: 16 	Failed
Test: #39, outpostFlag: 1, handCount: 17 	Failed
Test: #40, outpostFlag: 1, handCount: 18 	Failed
Test: #41, outpostFlag: 1, handCount: 19 	Failed
Test: #42, outpostFlag: 1, handCount: 20 	Failed
All tests ran!

Times ran: 42 | Tests Failed: 22
File 'dominion.c'
Lines executed:26.79% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/***** Refactored cards - now with bugs!*****/
        -:    9:
        -:   10:/* Smithy */
        -:   11:/* Card Test 1 */
        -:   12:/* Random tester card1 */
     1296:   13:int play_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:   14:{
        -:   15:	int i;
        -:   16:
        -:   17:      //+3 Cards
     3888:   18:        for (i = 1; i < 3; i++) /* BUG: i = 1 instead of i = 0 */
        -:   19:	{
     2592:   20:	  drawCard(currentPlayer, state);
        -:   21:	}
        -:   22:			
        -:   23:      //discard card from hand
     1296:   24:      discardCard(handPos, currentPlayer, state, 0);
     1296:   25:      return 0;
        -:   26:}
        -:   27:
        -:   28:/* Adventurer */
        -:   29:/* Card Test 2 */
        -:   30:/* Random tester */
    #####:   31:int play_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:   32:{
        -:   33:	int cardDrawn;
        -:   34:
    #####:   35:	while(drawntreasure<2){
    #####:   36:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   37:		  shuffle(currentPlayer, state);
        -:   38:		}
    #####:   39:		drawCard(currentPlayer, state);
    #####:   40:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   41:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   42:		  drawntreasure++;
        -:   43:		else{
    #####:   44:		  temphand[z]=cardDrawn;
    #####:   45:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   46:		  z++;
        -:   47:		}
        -:   48:	      }
    #####:   49:	      while(z-1>0){ /* BUG: '>' instead of '>=' */
    #####:   50:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   51:		z=z-1;
        -:   52:	      }
    #####:   53:	      return 0;
        -:   54:}
        -:   55:
        -:   56:/* Council Room */
        -:   57:/* Card Test 3 */
    #####:   58:int play_council_room(int currentPlayer, struct gameState *state, int handPos)
        -:   59:{
        -:   60:	int i;
        -:   61:
        -:   62:      //+4 Cards
    #####:   63:      for (i = 0; i < 3; i++) /* BUG: draw 3 cards instead of 4 */
        -:   64:	{
    #####:   65:	  drawCard(currentPlayer, state);
        -:   66:	}
        -:   67:			
        -:   68:      //+1 Buy
    #####:   69:      state->numBuys++;
        -:   70:			
        -:   71:      //Each other player draws a card
    #####:   72:      for (i = 0; i < state->numPlayers; i++)
        -:   73:	{
    #####:   74:	  if ( i != currentPlayer )
        -:   75:	    {
    #####:   76:	      drawCard(i, state);
        -:   77:	    }
        -:   78:	}
        -:   79:			
        -:   80:      //put played card in played card pile
    #####:   81:      discardCard(handPos, currentPlayer, state, 0);
        -:   82:			
    #####:   83:      return 0;
        -:   84:}
        -:   85:
        -:   86:/* Mine */
    #####:   87:int play_mine(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:   88:{
        -:   89:	int i;
        -:   90:	int j;
        -:   91:
    #####:   92:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:   93:
    #####:   94:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:   95:	  {
    #####:   96:	    return -1;
        -:   97:	  }
        -:   98:		  
    #####:   99:	if (choice2 > treasure_map || choice2 < curse)
        -:  100:	  {
    #####:  101:	    return -1;
        -:  102:	  }
        -:  103:
    #####:  104:	if ( (getCost(state->hand[currentPlayer][choice1]) + 4) > getCost(choice2) ) /* BUG: Gain treasure costing up to 4 more instead of 3 */
        -:  105:	  {
    #####:  106:	    return -1;
        -:  107:	  }
        -:  108:
    #####:  109:	gainCard(choice2, state, 2, currentPlayer);
        -:  110:
        -:  111:	//discard card from hand
    #####:  112:	discardCard(handPos, currentPlayer, state, 0);
        -:  113:
        -:  114:	//discard trashed card
    #####:  115:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  116:	  {
    #####:  117:	    if (state->hand[currentPlayer][i] == j)
        -:  118:	      {
    #####:  119:		discardCard(i, currentPlayer, state, 0);			
    #####:  120:		break;
        -:  121:	      }
        -:  122:	  }
        -:  123:			  
    #####:  124:	return 0;
        -:  125:}
        -:  126:
        -:  127:/* Remodel */
    #####:  128:int play_remodel(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  129:{
        -:  130:	int i;
        -:  131:	int j;
        -:  132:
    #####:  133:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  134:
    #####:  135:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  136:	{
    #####:  137:	  return -1;
        -:  138:	}
        -:  139:
    #####:  140:      gainCard(choice2, state, 0, currentPlayer);
        -:  141:
        -:  142:      //discard card from hand
    #####:  143:      discardCard(handPos, currentPlayer, state, 0);
        -:  144:
        -:  145:      //discard trashed card
    #####:  146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  147:	{
    #####:  148:	  if (state->hand[currentPlayer][i] == j)
        -:  149:	    {
    #####:  150:	      discardCard(i, currentPlayer, state, 0);			
    #####:  151:	      break;
        -:  152:	    }
        -:  153:	}
        -:  154:
        -:  155:
    #####:  156:      return 0;
        -:  157:}
        -:  158:
        -:  159:/* Village */
        -:  160:/* Card Test 4 */
        -:  161:/* Random tester card 2 */
    #####:  162:int play_village(int currentPlayer, struct gameState *state, int handPos)
        -:  163:{
        -:  164:      //+1 Card
    #####:  165:      drawCard(currentPlayer, state);
        -:  166:			
        -:  167:      //+2 Actions
    #####:  168:      state->numActions = state->numActions + 2;
        -:  169:			
        -:  170:      //discard played card from hand
    #####:  171:      discardCard(handPos, currentPlayer, state, 0);
    #####:  172:      return 0;
        -:  173:}
        -:  174:
        -:  175:/***** End refactoring *****/
        -:  176:
        -:  177:
   162730:  178:int compare(const void* a, const void* b) {
   162730:  179:  if (*(int*)a > *(int*)b)
     4950:  180:    return 1;
   157780:  181:  if (*(int*)a < *(int*)b)
    45678:  182:    return -1;
   112102:  183:  return 0;
        -:  184:}
        -:  185:
    #####:  186:struct gameState* newGame() {
    #####:  187:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  188:  return g;
        -:  189:}
        -:  190:
    #####:  191:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  192:		  int k8, int k9, int k10) {
    #####:  193:  int* k = malloc(10 * sizeof(int));
    #####:  194:  k[0] = k1;
    #####:  195:  k[1] = k2;
    #####:  196:  k[2] = k3;
    #####:  197:  k[3] = k4;
    #####:  198:  k[4] = k5;
    #####:  199:  k[5] = k6;
    #####:  200:  k[6] = k7;
    #####:  201:  k[7] = k8;
    #####:  202:  k[8] = k9;
    #####:  203:  k[9] = k10;
    #####:  204:  return k;
        -:  205:}
        -:  206:
     5091:  207:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  208:		   struct gameState *state) {
        -:  209:
        -:  210:  int i;
        -:  211:  int j;
        -:  212:  int it;			
        -:  213:  //set up random number generator
     5091:  214:  SelectStream(1);
     5091:  215:  PutSeed((long)randomSeed);
        -:  216:  
        -:  217:  //check number of players
     5091:  218:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  219:    {
    #####:  220:      return -1;
        -:  221:    }
        -:  222:
        -:  223:  //set number of players
     5091:  224:  state->numPlayers = numPlayers;
        -:  225:
        -:  226:  //check selected kingdom cards are different
    56001:  227:  for (i = 0; i < 10; i++)
        -:  228:    {
   560010:  229:      for (j = 0; j < 10; j++)
        -:  230:        {
   509100:  231:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  232:	    {
    #####:  233:	      return -1;
        -:  234:	    }
        -:  235:        }
        -:  236:    }
        -:  237:
        -:  238:
        -:  239:  //initialize supply
        -:  240:  ///////////////////////////////
        -:  241:
        -:  242:  //set number of Curse cards
     5091:  243:  if (numPlayers == 2)
        -:  244:    {
     5091:  245:      state->supplyCount[curse] = 10;
        -:  246:    }
    #####:  247:  else if (numPlayers == 3)
        -:  248:    {
    #####:  249:      state->supplyCount[curse] = 20;
        -:  250:    }
        -:  251:  else
        -:  252:    {
    #####:  253:      state->supplyCount[curse] = 30;
        -:  254:    }
        -:  255:
        -:  256:  //set number of Victory cards
     5091:  257:  if (numPlayers == 2)
        -:  258:    {
     5091:  259:      state->supplyCount[estate] = 8;
     5091:  260:      state->supplyCount[duchy] = 8;
     5091:  261:      state->supplyCount[province] = 8;
        -:  262:    }
        -:  263:  else
        -:  264:    {
    #####:  265:      state->supplyCount[estate] = 12;
    #####:  266:      state->supplyCount[duchy] = 12;
    #####:  267:      state->supplyCount[province] = 12;
        -:  268:    }
        -:  269:
        -:  270:  //set number of Treasure cards
     5091:  271:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5091:  272:  state->supplyCount[silver] = 40;
     5091:  273:  state->supplyCount[gold] = 30;
        -:  274:
        -:  275:  //set number of Kingdom cards
   106911:  276:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  277:    {
   840015:  278:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  279:	{
   789105:  280:	  if (kingdomCards[j] == i)
        -:  281:	    {
        -:  282:	      //check if card is a 'Victory' Kingdom card
    50910:  283:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  284:		{
    20364:  285:		  if (numPlayers == 2){ 
    10182:  286:		    state->supplyCount[i] = 8; 
        -:  287:		  }
    #####:  288:		  else{ state->supplyCount[i] = 12; }
        -:  289:		}
        -:  290:	      else
        -:  291:		{
    40728:  292:		  state->supplyCount[i] = 10;
        -:  293:		}
    50910:  294:	      break;
        -:  295:	    }
        -:  296:	  else    //card is not in the set choosen for the game
        -:  297:	    {
   738195:  298:	      state->supplyCount[i] = -1;
        -:  299:	    }
        -:  300:	}
        -:  301:
        -:  302:    }
        -:  303:
        -:  304:  ////////////////////////
        -:  305:  //supply intilization complete
        -:  306:
        -:  307:  //set player decks
    15273:  308:  for (i = 0; i < numPlayers; i++)
        -:  309:    {
    10182:  310:      state->deckCount[i] = 0;
    40728:  311:      for (j = 0; j < 3; j++)
        -:  312:	{
    30546:  313:	  state->deck[i][j] = estate;
    30546:  314:	  state->deckCount[i]++;
        -:  315:	}
    81456:  316:      for (j = 3; j < 10; j++)
        -:  317:	{
    71274:  318:	  state->deck[i][j] = copper;
    71274:  319:	  state->deckCount[i]++;		
        -:  320:	}
        -:  321:    }
        -:  322:
        -:  323:  //shuffle player decks
    15273:  324:  for (i = 0; i < numPlayers; i++)
        -:  325:    {
    10182:  326:      if ( shuffle(i, state) < 0 )
        -:  327:	{
    #####:  328:	  return -1;
        -:  329:	}
        -:  330:    }
        -:  331:
        -:  332:  //draw player hands
    15273:  333:  for (i = 0; i < numPlayers; i++)
        -:  334:    {  
        -:  335:      //initialize hand size to zero
    10182:  336:      state->handCount[i] = 0;
    10182:  337:      state->discardCount[i] = 0;
        -:  338:      //draw 5 cards
        -:  339:      // for (j = 0; j < 5; j++)
        -:  340:      //	{
        -:  341:      //	  drawCard(i, state);
        -:  342:      //	}
        -:  343:    }
        -:  344:  
        -:  345:  //set embargo tokens to 0 for all supply piles
   142548:  346:  for (i = 0; i <= treasure_map; i++)
        -:  347:    {
   137457:  348:      state->embargoTokens[i] = 0;
        -:  349:    }
        -:  350:
        -:  351:  //initialize first player's turn
     5091:  352:  state->outpostPlayed = 0;
     5091:  353:  state->phase = 0;
     5091:  354:  state->numActions = 1;
     5091:  355:  state->numBuys = 1;
     5091:  356:  state->playedCardCount = 0;
     5091:  357:  state->whoseTurn = 0;
     5091:  358:  state->handCount[state->whoseTurn] = 0;
        -:  359:  //int it; move to top
        -:  360:
        -:  361:  //Moved draw cards to here, only drawing at the start of a turn
    30546:  362:  for (it = 0; it < 5; it++){
    25455:  363:    drawCard(state->whoseTurn, state);
        -:  364:  }
        -:  365:
     5091:  366:  updateCoins(state->whoseTurn, state, 0);
        -:  367:
     5091:  368:  return 0;
        -:  369:}
        -:  370:
    10830:  371:int shuffle(int player, struct gameState *state) {
        -:  372: 
        -:  373:
        -:  374:  int newDeck[MAX_DECK];
    10830:  375:  int newDeckPos = 0;
        -:  376:  int card;
        -:  377:  int i;
        -:  378:
    10830:  379:  if (state->deckCount[player] < 1)
      648:  380:    return -1;
    10182:  381:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  382:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  383:
   122184:  384:  while (state->deckCount[player] > 0) {
   101820:  385:    card = floor(Random() * state->deckCount[player]);
   101820:  386:    newDeck[newDeckPos] = state->deck[player][card];
   101820:  387:    newDeckPos++;
   356370:  388:    for (i = card; i < state->deckCount[player]-1; i++) {
   254550:  389:      state->deck[player][i] = state->deck[player][i+1];
        -:  390:    }
   101820:  391:    state->deckCount[player]--;
        -:  392:  }
   112002:  393:  for (i = 0; i < newDeckPos; i++) {
   101820:  394:    state->deck[player][i] = newDeck[i];
   101820:  395:    state->deckCount[player]++;
        -:  396:  }
        -:  397:
    10182:  398:  return 0;
        -:  399:}
        -:  400:
    #####:  401:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  402:{	
        -:  403:  int card;
    #####:  404:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  405:
        -:  406:  //check if it is the right phase
    #####:  407:  if (state->phase != 0)
        -:  408:    {
    #####:  409:      return -1;
        -:  410:    }
        -:  411:	
        -:  412:  //check if player has enough actions
    #####:  413:  if ( state->numActions < 1 )
        -:  414:    {
    #####:  415:      return -1;
        -:  416:    }
        -:  417:	
        -:  418:  //get card played
    #####:  419:  card = handCard(handPos, state);
        -:  420:	
        -:  421:  //check if selected card is an action
    #####:  422:  if ( card < adventurer || card > treasure_map )
        -:  423:    {
    #####:  424:      return -1;
        -:  425:    }
        -:  426:	
        -:  427:  //play card
    #####:  428:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  429:    {
    #####:  430:      return -1;
        -:  431:    }
        -:  432:	
        -:  433:  //reduce number of actions
    #####:  434:  state->numActions--;
        -:  435:
        -:  436:  //update coins (Treasure cards may be added with card draws)
    #####:  437:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  438:	
    #####:  439:  return 0;
        -:  440:}
        -:  441:
    #####:  442:int buyCard(int supplyPos, struct gameState *state) {
        -:  443:  int who;
        -:  444:  if (DEBUG){
        -:  445:    printf("Entering buyCard...\n");
        -:  446:  }
        -:  447:
        -:  448:  // I don't know what to do about the phase thing.
        -:  449:
    #####:  450:  who = state->whoseTurn;
        -:  451:
    #####:  452:  if (state->numBuys < 1){
        -:  453:    if (DEBUG)
        -:  454:      printf("You do not have any buys left\n");
    #####:  455:    return -1;
    #####:  456:  } else if (supplyCount(supplyPos, state) <1){
        -:  457:    if (DEBUG)
        -:  458:      printf("There are not any of that type of card left\n");
    #####:  459:    return -1;
    #####:  460:  } else if (state->coins < getCost(supplyPos)){
        -:  461:    if (DEBUG) 
        -:  462:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  463:    return -1;
        -:  464:  } else {
    #####:  465:    state->phase=1;
        -:  466:    //state->supplyCount[supplyPos]--;
    #####:  467:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  468:  
    #####:  469:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  470:    state->numBuys--;
        -:  471:    if (DEBUG)
        -:  472:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  473:  }
        -:  474:
        -:  475:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  476:  //state->discardCount[who]++;
        -:  477:    
    #####:  478:  return 0;
        -:  479:}
        -:  480:
        -:  481:/***** Use this function for Unit test 4 *****/
    #####:  482:int numHandCards(struct gameState *state) {
    #####:  483:  return state->handCount[ whoseTurn(state) ];
        -:  484:}
        -:  485:
    #####:  486:int handCard(int handPos, struct gameState *state) {
    #####:  487:  int currentPlayer = whoseTurn(state);
    #####:  488:  return state->hand[currentPlayer][handPos];
        -:  489:}
        -:  490:
        -:  491:/***** Use this function for Unit test 3 *****/
    #####:  492:int supplyCount(int card, struct gameState *state) {
    #####:  493:  return state->supplyCount[card];
        -:  494:}
        -:  495:
     2662:  496:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  497:  int i;
     2662:  498:  int count = 0;
        -:  499:
    15972:  500:  for (i = 0; i < state->deckCount[player]; i++)
        -:  501:    {
    13310:  502:      if (state->deck[player][i] == card) count++;
        -:  503:    }
        -:  504:
    15972:  505:  for (i = 0; i < state->handCount[player]; i++)
        -:  506:    {
    13310:  507:      if (state->hand[player][i] == card) count++;
        -:  508:    }
        -:  509:
    15972:  510:  for (i = 0; i < state->discardCount[player]; i++)
        -:  511:    {
    13310:  512:      if (state->discard[player][i] == card) count++;
        -:  513:    }
        -:  514:
     2662:  515:  return count;
        -:  516:}
        -:  517:
     1338:  518:int whoseTurn(struct gameState *state) {
     1338:  519:  return state->whoseTurn;
        -:  520:}
        -:  521:
    #####:  522:int endTurn(struct gameState *state) {
        -:  523:  int k;
        -:  524:  int i;
    #####:  525:  int currentPlayer = whoseTurn(state);
        -:  526:  
        -:  527:  //Discard hand
    #####:  528:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  529:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  530:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  531:  }
    #####:  532:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  533:    
        -:  534:  //Code for determining the player
    #####:  535:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  536:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  537:  }
        -:  538:  else{
    #####:  539:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  540:  }
        -:  541:
    #####:  542:  state->outpostPlayed = 0;
    #####:  543:  state->phase = 0;
    #####:  544:  state->numActions = 1;
    #####:  545:  state->coins = 0;
    #####:  546:  state->numBuys = 1;
    #####:  547:  state->playedCardCount = 0;
    #####:  548:  state->handCount[state->whoseTurn] = 0;
        -:  549:
        -:  550:  //int k; move to top
        -:  551:  //Next player draws hand
    #####:  552:  for (k = 0; k < 5; k++){
    #####:  553:    drawCard(state->whoseTurn, state);//Draw a card
        -:  554:  }
        -:  555:
        -:  556:  //Update money
    #####:  557:  updateCoins(state->whoseTurn, state , 0);
        -:  558:
    #####:  559:  return 0;
        -:  560:}
        -:  561:
        -:  562:/***** Use this function for Unit test 1 *****/
       90:  563:int isGameOver(struct gameState *state) {
        -:  564:  int i;
        -:  565:  int j;
        -:  566:	
        -:  567:  //if stack of Province cards is empty, the game ends
       90:  568:  if (state->supplyCount[province] == 0)
        -:  569:    {
       26:  570:      return 1;
        -:  571:    }
        -:  572:
        -:  573:  //if three supply pile are at 0, the game ends
       64:  574:  j = 0;
     1664:  575:  for (i = 0; i < 25; i++)
        -:  576:    {
     1600:  577:      if (state->supplyCount[i] == 0)
        -:  578:	{
       96:  579:	  j++;
        -:  580:	}
        -:  581:    }
       64:  582:  if ( j >= 3)
        -:  583:    {
       16:  584:      return 1;
        -:  585:    }
        -:  586:
       48:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int scoreFor (int player, struct gameState *state) {
        -:  591:
        -:  592:  int i;
    #####:  593:  int score = 0;
        -:  594:  //score from hand
    #####:  595:  for (i = 0; i < state->handCount[player]; i++)
        -:  596:    {
    #####:  597:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  598:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  599:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  600:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  601:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  602:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  603:    }
        -:  604:
        -:  605:  //score from discard
    #####:  606:  for (i = 0; i < state->discardCount[player]; i++)
        -:  607:    {
    #####:  608:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  609:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  610:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  611:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  612:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  613:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  614:    }
        -:  615:
        -:  616:  //score from deck
    #####:  617:  for (i = 0; i < state->discardCount[player]; i++)
        -:  618:    {
    #####:  619:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  620:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  621:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  622:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  623:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  624:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  625:    }
        -:  626:
    #####:  627:  return score;
        -:  628:}
        -:  629:
    #####:  630:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  631:  int i;	
        -:  632:  int j;
        -:  633:  int highScore;
        -:  634:  int currentPlayer;
        -:  635:
        -:  636:  //get score for each player
    #####:  637:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  638:    {
        -:  639:      //set unused player scores to -9999
    #####:  640:      if (i >= state->numPlayers)
        -:  641:	{
    #####:  642:	  players[i] = -9999;
        -:  643:	}
        -:  644:      else
        -:  645:	{
    #####:  646:	  players[i] = scoreFor (i, state);
        -:  647:	}
        -:  648:    }
        -:  649:
        -:  650:  //find highest score
    #####:  651:  j = 0;
    #####:  652:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  653:    {
    #####:  654:      if (players[i] > players[j])
        -:  655:	{
    #####:  656:	  j = i;
        -:  657:	}
        -:  658:    }
    #####:  659:  highScore = players[j];
        -:  660:
        -:  661:  //add 1 to players who had less turns
    #####:  662:  currentPlayer = whoseTurn(state);
    #####:  663:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  664:    {
    #####:  665:      if ( players[i] == highScore && i > currentPlayer )
        -:  666:	{
    #####:  667:	  players[i]++;
        -:  668:	}
        -:  669:    }
        -:  670:
        -:  671:  //find new highest score
    #####:  672:  j = 0;
    #####:  673:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  674:    {
    #####:  675:      if ( players[i] > players[j] )
        -:  676:	{
    #####:  677:	  j = i;
        -:  678:	}
        -:  679:    }
    #####:  680:  highScore = players[j];
        -:  681:
        -:  682:  //set winners in array to 1 and rest to 0
    #####:  683:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  684:    {
    #####:  685:      if ( players[i] == highScore )
        -:  686:	{
    #####:  687:	  players[i] = 1;
        -:  688:	}
        -:  689:      else
        -:  690:	{
    #####:  691:	  players[i] = 0;
        -:  692:	}
        -:  693:    }
        -:  694:
    #####:  695:  return 0;
        -:  696:}
        -:  697:
    28047:  698:int drawCard(int player, struct gameState *state)
        -:  699:{	int count;
        -:  700:  int deckCounter;
    28047:  701:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  702:    
        -:  703:    //Step 1 Shuffle the discard pile back into a deck
        -:  704:    int i;
        -:  705:    //Move discard to deck
      648:  706:    for (i = 0; i < state->discardCount[player];i++){
    #####:  707:      state->deck[player][i] = state->discard[player][i];
    #####:  708:      state->discard[player][i] = -1;
        -:  709:    }
        -:  710:
      648:  711:    state->deckCount[player] = state->discardCount[player];
      648:  712:    state->discardCount[player] = 0;//Reset discard
        -:  713:
        -:  714:    //Shufffle the deck
      648:  715:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  716:   
        -:  717:    if (DEBUG){//Debug statements
        -:  718:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  719:    }
        -:  720:    
      648:  721:    state->discardCount[player] = 0;
        -:  722:
        -:  723:    //Step 2 Draw Card
      648:  724:    count = state->handCount[player];//Get current player's hand count
        -:  725:    
        -:  726:    if (DEBUG){//Debug statements
        -:  727:      printf("Current hand count: %d\n", count);
        -:  728:    }
        -:  729:    
      648:  730:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  731:
      648:  732:    if (deckCounter == 0)
      648:  733:      return -1;
        -:  734:
    #####:  735:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  736:    state->deckCount[player]--;
    #####:  737:    state->handCount[player]++;//Increment hand count
        -:  738:  }
        -:  739:
        -:  740:  else{
    27399:  741:    int count = state->handCount[player];//Get current hand count for player
        -:  742:    int deckCounter;
        -:  743:    if (DEBUG){//Debug statements
        -:  744:      printf("Current hand count: %d\n", count);
        -:  745:    }
        -:  746:
    27399:  747:    deckCounter = state->deckCount[player];//Create holder for the deck count
    27399:  748:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    27399:  749:    state->deckCount[player]--;
    27399:  750:    state->handCount[player]++;//Increment hand count
        -:  751:  }
        -:  752:
    27399:  753:  return 0;
        -:  754:}
        -:  755:
    #####:  756:int getCost(int cardNumber)
        -:  757:{
    #####:  758:  switch( cardNumber ) 
        -:  759:    {
        -:  760:    case curse:
    #####:  761:      return 0;
        -:  762:    case estate:
    #####:  763:      return 2;
        -:  764:    case duchy:
    #####:  765:      return 5;
        -:  766:    case province:
    #####:  767:      return 8;
        -:  768:    case copper:
    #####:  769:      return 0;
        -:  770:    case silver:
    #####:  771:      return 3;
        -:  772:    case gold:
    #####:  773:      return 6;
        -:  774:    case adventurer:
    #####:  775:      return 6;
        -:  776:    case council_room:
    #####:  777:      return 5;
        -:  778:    case feast:
    #####:  779:      return 4;
        -:  780:    case gardens:
    #####:  781:      return 4;
        -:  782:    case mine:
    #####:  783:      return 5;
        -:  784:    case remodel:
    #####:  785:      return 4;
        -:  786:    case smithy:
    #####:  787:      return 4;
        -:  788:    case village:
    #####:  789:      return 3;
        -:  790:    case baron:
    #####:  791:      return 4;
        -:  792:    case great_hall:
    #####:  793:      return 3;
        -:  794:    case minion:
    #####:  795:      return 5;
        -:  796:    case steward:
    #####:  797:      return 3;
        -:  798:    case tribute:
    #####:  799:      return 5;
        -:  800:    case ambassador:
    #####:  801:      return 3;
        -:  802:    case cutpurse:
    #####:  803:      return 4;
        -:  804:    case embargo: 
    #####:  805:      return 2;
        -:  806:    case outpost:
    #####:  807:      return 5;
        -:  808:    case salvager:
    #####:  809:      return 4;
        -:  810:    case sea_hag:
    #####:  811:      return 4;
        -:  812:    case treasure_map:
    #####:  813:      return 4;
        -:  814:    }
        -:  815:	
    #####:  816:  return -1;
        -:  817:}
        -:  818:
        -:  819:/********** BEGINNING of cardEffct **********/
        -:  820:/* This is where the refactor and bug additions will be done for assignment-2 */
     1338:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
     1338:  828:  int currentPlayer = whoseTurn(state);
     1338:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
     1338:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND];// moved above the if statement
     1338:  833:  int drawntreasure=0;
        -:  834:  int cardDrawn;
     1338:  835:  int z = 0;// this is the counter for the temp hand
     1338:  836:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  837:    nextPlayer = 0;
        -:  838:  }
        -:  839:  
        -:  840:  /* Refactoring switch statement so cards are implemented in their own functions */
        -:  841:  //uses switch to select card and perform actions
     1338:  842:  switch( card ) 
        -:  843:    {
        -:  844:
        -:  845:    /***** Refactor adventurer *****/
        -:  846:    case adventurer:
    #####:  847:	    return play_adventurer(drawntreasure, state, currentPlayer, temphand, z);
        -:  848:      /*
        -:  849:      while(drawntreasure<2){
        -:  850:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  851:	  shuffle(currentPlayer, state);
        -:  852:	}
        -:  853:	drawCard(currentPlayer, state);
        -:  854:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  855:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  856:	  drawntreasure++;
        -:  857:	else{
        -:  858:	  temphand[z]=cardDrawn;
        -:  859:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  860:	  z++;
        -:  861:	}
        -:  862:      }
        -:  863:      while(z-1>=0){
        -:  864:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  865:	z=z-1;
        -:  866:      }
        -:  867:      return 0;
        -:  868:      */
        -:  869:			
        -:  870:    /***** Refactor council room*****/
        -:  871:    case council_room:
    #####:  872:       	return play_council_room(currentPlayer, state, handPos);
        -:  873:      /*
        -:  874:      //+4 Cards
        -:  875:      for (i = 0; i < 4; i++)
        -:  876:	{
        -:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
        -:  879:			
        -:  880:      //+1 Buy
        -:  881:      state->numBuys++;
        -:  882:			
        -:  883:      //Each other player draws a card
        -:  884:      for (i = 0; i < state->numPlayers; i++)
        -:  885:	{
        -:  886:	  if ( i != currentPlayer )
        -:  887:	    {
        -:  888:	      drawCard(i, state);
        -:  889:	    }
        -:  890:	}
        -:  891:			
        -:  892:      //put played card in played card pile
        -:  893:      discardCard(handPos, currentPlayer, state, 0);
        -:  894:			
        -:  895:      return 0;
        -:  896:      */
        -:  897:			
        -:  898:    case feast:
        -:  899:      //gain card with cost up to 5
        -:  900:      //Backup hand
    #####:  901:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  902:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  903:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  904:      }
        -:  905:      //Backup hand
        -:  906:
        -:  907:      //Update Coins for Buy
    #####:  908:      updateCoins(currentPlayer, state, 5);
    #####:  909:      x = 1;//Condition to loop on
    #####:  910:      while( x == 1) {//Buy one card
    #####:  911:	if (supplyCount(choice1, state) <= 0){
        -:  912:	  if (DEBUG)
        -:  913:	    printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:	  if (DEBUG){
        -:  916:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  917:	  }
        -:  918:	}
    #####:  919:	else if (state->coins < getCost(choice1)){
    #####:  920:	  printf("That card is too expensive!\n");
        -:  921:
        -:  922:	  if (DEBUG){
        -:  923:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  924:	  }
        -:  925:	}
        -:  926:	else{
        -:  927:
        -:  928:	  if (DEBUG){
        -:  929:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:	  }
        -:  931:
    #####:  932:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  933:	  x = 0;//No more buying cards
        -:  934:
        -:  935:	  if (DEBUG){
        -:  936:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:	  }
        -:  938:
        -:  939:	}
        -:  940:      }     
        -:  941:
        -:  942:      //Reset Hand
    #####:  943:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  944:	state->hand[currentPlayer][i] = temphand[i];
    #####:  945:	temphand[i] = -1;
        -:  946:      }
        -:  947:      //Reset Hand
        -:  948:      			
    #####:  949:      return 0;
        -:  950:			
        -:  951:    case gardens:
    #####:  952:      return -1;
        -:  953:			
        -:  954:    /***** Refactor mine*****/
        -:  955:    case mine:
    #####:  956:	return play_mine(state, choice1, choice2, currentPlayer, handPos);
        -:  957:      /*
        -:  958:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
        -:  960:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  961:	{
        -:  962:	  return -1;
        -:  963:	}
        -:  964:		
        -:  965:      if (choice2 > treasure_map || choice2 < curse)
        -:  966:	{
        -:  967:	  return -1;
        -:  968:	}
        -:  969:
        -:  970:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  971:	{
        -:  972:	  return -1;
        -:  973:	}
        -:  974:
        -:  975:      gainCard(choice2, state, 2, currentPlayer);
        -:  976:
        -:  977:      //discard card from hand
        -:  978:      discardCard(handPos, currentPlayer, state, 0);
        -:  979:
        -:  980:      //discard trashed card
        -:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:	{
        -:  983:	  if (state->hand[currentPlayer][i] == j)
        -:  984:	    {
        -:  985:	      discardCard(i, currentPlayer, state, 0);			
        -:  986:	      break;
        -:  987:	    }
        -:  988:	}
        -:  989:			
        -:  990:      return 0;
        -:  991:      */
        -:  992:			
        -:  993:    /***** Refactor remodel*****/
        -:  994:    case remodel:
    #####:  995:      return play_remodel(state, choice1, choice2, currentPlayer, handPos);
        -:  996:      /*
        -:  997:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  998:
        -:  999:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1000:	{
        -: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
        -: 1004:      gainCard(choice2, state, 0, currentPlayer);
        -: 1005:
        -: 1006:      //discard card from hand
        -: 1007:      discardCard(handPos, currentPlayer, state, 0);
        -: 1008:
        -: 1009:      //discard trashed card
        -: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1011:	{
        -: 1012:	  if (state->hand[currentPlayer][i] == j)
        -: 1013:	    {
        -: 1014:	      discardCard(i, currentPlayer, state, 0);			
        -: 1015:	      break;
        -: 1016:	    }
        -: 1017:	}
        -: 1018:
        -: 1019:
        -: 1020:      return 0;
        -: 1021:      */
        -: 1022:		
        -: 1023:    /***** Refactor smithy *****/
        -: 1024:    case smithy:
     1296: 1025:      return play_smithy(currentPlayer, state, handPos);
        -: 1026:      /* 
        -: 1027:      //+3 Cards
        -: 1028:      for (i = 0; i < 3; i++)
        -: 1029:	{
        -: 1030:	  drawCard(currentPlayer, state);
        -: 1031:	}
        -: 1032:			
        -: 1033:      //discard card from hand
        -: 1034:      discardCard(handPos, currentPlayer, state, 0);
        -: 1035:      return 0;
        -: 1036:      */
        -: 1037:		
        -: 1038:
        -: 1039:    /***** Refactored village for assignment-3 (no new bugs introduced) *****/
        -: 1040:    case village:
    #####: 1041:      return play_village(currentPlayer, state, handPos);
        -: 1042:      /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:      */
        -: 1053:		
        -: 1054:    case baron:
    #####: 1055:      state->numBuys++;//Increase buys by 1!
    #####: 1056:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1057:	int p = 0;//Iterator for hand!
    #####: 1058:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1059:	while(card_not_discarded){
    #####: 1060:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1061:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1062:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1063:	    state->discardCount[currentPlayer]++;
    #####: 1064:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1065:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1066:	    }
    #####: 1067:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1068:	    state->handCount[currentPlayer]--;
    #####: 1069:	    card_not_discarded = 0;//Exit the loop
        -: 1070:	  }
    #####: 1071:	  else if (p > state->handCount[currentPlayer]){
        -: 1072:	    if(DEBUG) {
        -: 1073:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1074:	      printf("Must gain an estate if there are any\n");
        -: 1075:	    }
    #####: 1076:	    if (supplyCount(estate, state) > 0){
    #####: 1077:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1078:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1079:	      if (supplyCount(estate, state) == 0){
    #####: 1080:		isGameOver(state);
        -: 1081:	      }
        -: 1082:	    }
    #####: 1083:	    card_not_discarded = 0;//Exit the loop
        -: 1084:	  }
        -: 1085:			    
        -: 1086:	  else{
    #####: 1087:	    p++;//Next card
        -: 1088:	  }
        -: 1089:	}
        -: 1090:      }
        -: 1091:			    
        -: 1092:      else{
    #####: 1093:	if (supplyCount(estate, state) > 0){
    #####: 1094:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1095:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1096:	  if (supplyCount(estate, state) == 0){
    #####: 1097:	    isGameOver(state);
        -: 1098:	  }
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
        -: 1102:      
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case great_hall:
        -: 1106:      //+1 Card
    #####: 1107:      drawCard(currentPlayer, state);
        -: 1108:			
        -: 1109:      //+1 Actions
    #####: 1110:      state->numActions++;
        -: 1111:			
        -: 1112:      //discard card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case minion:
        -: 1117:      //+1 action
    #####: 1118:      state->numActions++;
        -: 1119:			
        -: 1120:      //discard card from hand
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
        -: 1122:			
    #####: 1123:      if (choice1)		//+2 coins
        -: 1124:	{
    #####: 1125:	  state->coins = state->coins + 2;
        -: 1126:	}
        -: 1127:			
    #####: 1128:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1129:	{
        -: 1130:	  //discard hand
    #####: 1131:	  while(numHandCards(state) > 0)
        -: 1132:	    {
    #####: 1133:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //draw 4
    #####: 1137:	  for (i = 0; i < 4; i++)
        -: 1138:	    {
    #####: 1139:	      drawCard(currentPlayer, state);
        -: 1140:	    }
        -: 1141:				
        -: 1142:	  //other players discard hand and redraw if hand size > 4
    #####: 1143:	  for (i = 0; i < state->numPlayers; i++)
        -: 1144:	    {
    #####: 1145:	      if (i != currentPlayer)
        -: 1146:		{
    #####: 1147:		  if ( state->handCount[i] > 4 )
        -: 1148:		    {
        -: 1149:		      //discard hand
    #####: 1150:		      while( state->handCount[i] > 0 )
        -: 1151:			{
    #####: 1152:			  discardCard(handPos, i, state, 0);
        -: 1153:			}
        -: 1154:							
        -: 1155:		      //draw 4
    #####: 1156:		      for (j = 0; j < 4; j++)
        -: 1157:			{
    #####: 1158:			  drawCard(i, state);
        -: 1159:			}
        -: 1160:		    }
        -: 1161:		}
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case steward:
    #####: 1168:      if (choice1 == 1)
        -: 1169:	{
        -: 1170:	  //+2 cards
    #####: 1171:	  drawCard(currentPlayer, state);
    #####: 1172:	  drawCard(currentPlayer, state);
        -: 1173:	}
    #####: 1174:      else if (choice1 == 2)
        -: 1175:	{
        -: 1176:	  //+2 coins
    #####: 1177:	  state->coins = state->coins + 2;
        -: 1178:	}
        -: 1179:      else
        -: 1180:	{
        -: 1181:	  //trash 2 cards in hand
    #####: 1182:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1183:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:			
        -: 1186:      //discard card from hand
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case tribute:
    #####: 1191:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1192:	if (state->deckCount[nextPlayer] > 0){
    #####: 1193:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1194:	  state->deckCount[nextPlayer]--;
        -: 1195:	}
    #####: 1196:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1197:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1198:	  state->discardCount[nextPlayer]--;
        -: 1199:	}
        -: 1200:	else{
        -: 1201:	  //No Card to Reveal
        -: 1202:	  if (DEBUG){
        -: 1203:	    printf("No cards to reveal\n");
        -: 1204:	  }
        -: 1205:	}
        -: 1206:      }
        -: 1207:	    
        -: 1208:      else{
    #####: 1209:	if (state->deckCount[nextPlayer] == 0){
    #####: 1210:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1211:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1212:	    state->deckCount[nextPlayer]++;
    #####: 1213:	    state->discard[nextPlayer][i] = -1;
    #####: 1214:	    state->discardCount[nextPlayer]--;
        -: 1215:	  }
        -: 1216:			    
    #####: 1217:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1218:	} 
    #####: 1219:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1220:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1221:	state->deckCount[nextPlayer]--;
    #####: 1222:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1223:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1224:	state->deckCount[nextPlayer]--;
        -: 1225:      }    
        -: 1226:		       
    #####: 1227:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1228:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1229:	state->playedCardCount++;
    #####: 1230:	tributeRevealedCards[1] = -1;
        -: 1231:      }
        -: 1232:
    #####: 1233:      for (i = 0; i <= 2; i ++){
    #####: 1234:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1235:	  state->coins += 2;
        -: 1236:	}
        -: 1237:		    
    #####: 1238:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1239:	  drawCard(currentPlayer, state);
    #####: 1240:	  drawCard(currentPlayer, state);
        -: 1241:	}
        -: 1242:	else{//Action Card
    #####: 1243:	  state->numActions = state->numActions + 2;
        -: 1244:	}
        -: 1245:      }
        -: 1246:	    
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case ambassador:
    #####: 1250:      j = 0;		//used to check if player has enough cards to discard
        -: 1251:
    #####: 1252:      if (choice2 > 2 || choice2 < 0)
        -: 1253:	{
    #####: 1254:	  return -1;				
        -: 1255:	}
        -: 1256:
    #####: 1257:      if (choice1 == handPos)
        -: 1258:	{
    #####: 1259:	  return -1;
        -: 1260:	}
        -: 1261:
    #####: 1262:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1263:	{
    #####: 1264:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1265:	    {
    #####: 1266:	      j++;
        -: 1267:	    }
        -: 1268:	}
    #####: 1269:      if (j < choice2)
        -: 1270:	{
    #####: 1271:	  return -1;				
        -: 1272:	}
        -: 1273:
        -: 1274:      if (DEBUG) 
        -: 1275:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1276:
        -: 1277:      //increase supply count for choosen card by amount being discarded
    #####: 1278:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1279:			
        -: 1280:      //each other player gains a copy of revealed card
    #####: 1281:      for (i = 0; i < state->numPlayers; i++)
        -: 1282:	{
    #####: 1283:	  if (i != currentPlayer)
        -: 1284:	    {
    #####: 1285:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1286:	    }
        -: 1287:	}
        -: 1288:
        -: 1289:      //discard played card from hand
    #####: 1290:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1291:
        -: 1292:      //trash copies of cards returned to supply
    #####: 1293:      for (j = 0; j < choice2; j++)
        -: 1294:	{
    #####: 1295:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1296:	    {
    #####: 1297:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1298:		{
    #####: 1299:		  discardCard(i, currentPlayer, state, 1);
    #####: 1300:		  break;
        -: 1301:		}
        -: 1302:	    }
        -: 1303:	}			
        -: 1304:
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case cutpurse:
        -: 1308:
    #####: 1309:      updateCoins(currentPlayer, state, 2);
    #####: 1310:      for (i = 0; i < state->numPlayers; i++)
        -: 1311:	{
    #####: 1312:	  if (i != currentPlayer)
        -: 1313:	    {
    #####: 1314:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1315:		{
    #####: 1316:		  if (state->hand[i][j] == copper)
        -: 1317:		    {
    #####: 1318:		      discardCard(j, i, state, 0);
    #####: 1319:		      break;
        -: 1320:		    }
    #####: 1321:		  if (j == state->handCount[i])
        -: 1322:		    {
    #####: 1323:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1324:			{
        -: 1325:			  if (DEBUG)
        -: 1326:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1327:			}	
    #####: 1328:		      break;
        -: 1329:		    }		
        -: 1330:		}
        -: 1331:					
        -: 1332:	    }
        -: 1333:				
        -: 1334:	}				
        -: 1335:
        -: 1336:      //discard played card from hand
    #####: 1337:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1338:
    #####: 1339:      return 0;
        -: 1340:
        -: 1341:		
        -: 1342:    case embargo: 
        -: 1343:      //+2 Coins
    #####: 1344:      state->coins = state->coins + 2;
        -: 1345:			
        -: 1346:      //see if selected pile is in play
    #####: 1347:      if ( state->supplyCount[choice1] == -1 )
        -: 1348:	{
    #####: 1349:	  return -1;
        -: 1350:	}
        -: 1351:			
        -: 1352:      //add embargo token to selected supply pile
    #####: 1353:      state->embargoTokens[choice1]++;
        -: 1354:			
        -: 1355:      //trash card
    #####: 1356:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1357:      return 0;
        -: 1358:		
        -: 1359:    case outpost:
        -: 1360:      //set outpost flag
       42: 1361:      state->outpostPlayed++;
        -: 1362:			
        -: 1363:      //discard card
       42: 1364:      discardCard(handPos, currentPlayer, state, 0);
       42: 1365:      return 0;
        -: 1366:		
        -: 1367:    case salvager:
        -: 1368:      //+1 buy
    #####: 1369:      state->numBuys++;
        -: 1370:			
    #####: 1371:      if (choice1)
        -: 1372:	{
        -: 1373:	  //gain coins equal to trashed card
    #####: 1374:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1375:	  //trash card
    #####: 1376:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1377:	}
        -: 1378:			
        -: 1379:      //discard card
    #####: 1380:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1381:      return 0;
        -: 1382:		
        -: 1383:    case sea_hag:
    #####: 1384:      for (i = 0; i < state->numPlayers; i++){
    #####: 1385:	if (i != currentPlayer){
    #####: 1386:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1387:	  state->discardCount[i]++;
    #####: 1388:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1389:	}
        -: 1390:      }
    #####: 1391:      return 0;
        -: 1392:		
        -: 1393:    case treasure_map:
        -: 1394:      //search hand for another treasure_map
    #####: 1395:      index = -1;
    #####: 1396:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1397:	{
    #####: 1398:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1399:	    {
    #####: 1400:	      index = i;
    #####: 1401:	      break;
        -: 1402:	    }
        -: 1403:	}
    #####: 1404:      if (index > -1)
        -: 1405:	{
        -: 1406:	  //trash both treasure cards
    #####: 1407:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1408:	  discardCard(index, currentPlayer, state, 1);
        -: 1409:
        -: 1410:	  //gain 4 Gold cards
    #####: 1411:	  for (i = 0; i < 4; i++)
        -: 1412:	    {
    #####: 1413:	      gainCard(gold, state, 1, currentPlayer);
        -: 1414:	    }
        -: 1415:				
        -: 1416:	  //return success
    #####: 1417:	  return 1;
        -: 1418:	}
        -: 1419:			
        -: 1420:      //no second treasure_map found in hand
    #####: 1421:      return -1;
        -: 1422:    }
        -: 1423:	
    #####: 1424:  return -1;
        -: 1425:}
        -: 1426:
        -: 1427:/********** END of cardEffct **********/
        -: 1428:
     1338: 1429:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1430:{
        -: 1431:	
        -: 1432:  //if card is not trashed, added to Played pile 
     1338: 1433:  if (trashFlag < 1)
        -: 1434:    {
        -: 1435:      //add card to played pile
     1338: 1436:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1338: 1437:      state->playedCardCount++;
        -: 1438:    }
        -: 1439:	
        -: 1440:  //set played card to -1
     1338: 1441:  state->hand[currentPlayer][handPos] = -1;
        -: 1442:	
        -: 1443:  //remove card from player's hand
     1338: 1444:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1445:    {
        -: 1446:      //reduce number of cards in hand
       74: 1447:      state->handCount[currentPlayer]--;
        -: 1448:    }
     1264: 1449:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1450:    {
        -: 1451:      //reduce number of cards in hand
    #####: 1452:      state->handCount[currentPlayer]--;
        -: 1453:    }
        -: 1454:  else 	
        -: 1455:    {
        -: 1456:      //replace discarded card with last card in hand
     1264: 1457:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1458:      //set last card to -1
     1264: 1459:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1460:      //reduce number of cards in hand
     1264: 1461:      state->handCount[currentPlayer]--;
        -: 1462:    }
        -: 1463:	
     1338: 1464:  return 0;
        -: 1465:}
        -: 1466:
    #####: 1467:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1468:{
        -: 1469:  //Note: supplyPos is enum of choosen card
        -: 1470:	
        -: 1471:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1472:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1473:    {
    #####: 1474:      return -1;
        -: 1475:    }
        -: 1476:	
        -: 1477:  //added card for [whoseTurn] current player:
        -: 1478:  // toFlag = 0 : add to discard
        -: 1479:  // toFlag = 1 : add to deck
        -: 1480:  // toFlag = 2 : add to hand
        -: 1481:
    #####: 1482:  if (toFlag == 1)
        -: 1483:    {
    #####: 1484:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1485:      state->deckCount[player]++;
        -: 1486:    }
    #####: 1487:  else if (toFlag == 2)
        -: 1488:    {
    #####: 1489:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1490:      state->handCount[player]++;
        -: 1491:    }
        -: 1492:  else
        -: 1493:    {
    #####: 1494:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1495:      state->discardCount[player]++;
        -: 1496:    }
        -: 1497:	
        -: 1498:  //decrease number in supply pile
    #####: 1499:  state->supplyCount[supplyPos]--;
        -: 1500:	 
    #####: 1501:  return 0;
        -: 1502:}
        -: 1503:
        -: 1504:/***** Use this function for Unit test 2 *****/
     5091: 1505:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1506:{
        -: 1507:  int i;
        -: 1508:	
        -: 1509:  //reset coin count
     5091: 1510:  state->coins = 0;
        -: 1511:
        -: 1512:  //add coins for each Treasure card in player's hand
    30546: 1513:  for (i = 0; i < state->handCount[player]; i++)
        -: 1514:    {
    25455: 1515:      if (state->hand[player][i] == copper)
        -: 1516:	{
    20364: 1517:	  state->coins += 1;
        -: 1518:	}
     5091: 1519:      else if (state->hand[player][i] == silver)
        -: 1520:	{
    #####: 1521:	  state->coins += 2;
        -: 1522:	}
     5091: 1523:      else if (state->hand[player][i] == gold)
        -: 1524:	{
    #####: 1525:	  state->coins += 3;
        -: 1526:	}	
        -: 1527:    }	
        -: 1528:
        -: 1529:  //add bonus
     5091: 1530:  state->coins += bonus;
        -: 1531:
     5091: 1532:  return 0;
        -: 1533:}
        -: 1534:
        -: 1535:
        -: 1536://end of dominion.c
        -: 1537:
TESTING Great_wall():
Test #1: actionCount = 0, handCount = 0 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 0, hnd: 0
Test #2: actionCount = 0, handCount = 1 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 1, hnd: 1
Test #3: actionCount = 0, handCount = 2 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 2, hnd: 2
Test #4: actionCount = 0, handCount = 3 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 3, hnd: 3
Test #5: actionCount = 0, handCount = 4 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 4, hnd: 4
Test #6: actionCount = 0, handCount = 5 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 5, hnd: 5
Test #7: actionCount = 0, handCount = 6 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 6, hnd: 6
Test #8: actionCount = 0, handCount = 7 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 7, hnd: 7
Test #9: actionCount = 0, handCount = 8 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 8, hnd: 8
Test #10: actionCount = 0, handCount = 9 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 9, hnd: 9
Test #11: actionCount = 0, handCount = 10 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 10, hnd: 10
Test #12: actionCount = 0, handCount = 11 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 11, hnd: 11
Test #13: actionCount = 0, handCount = 12 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 12, hnd: 12
Test #14: actionCount = 0, handCount = 13 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 13, hnd: 13
Test #15: actionCount = 0, handCount = 14 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 14, hnd: 14
Test #16: actionCount = 0, handCount = 15 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 15, hnd: 15
Test #17: actionCount = 0, handCount = 16 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 16, hnd: 16
Test #18: actionCount = 0, handCount = 17 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 17, hnd: 17
Test #19: actionCount = 0, handCount = 18 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 18, hnd: 18
Test #20: actionCount = 0, handCount = 19 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 19, hnd: 19
Test #21: actionCount = 0, handCount = 20 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 20, hnd: 20
Test #22: actionCount = 0, handCount = 21 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 21, hnd: 21
Test #23: actionCount = 0, handCount = 22 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 22, hnd: 22
Test #24: actionCount = 0, handCount = 23 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 23, hnd: 23
Test #25: actionCount = 0, handCount = 24 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 24, hnd: 24
Test #26: actionCount = 0, handCount = 25 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 25, hnd: 25
Test #27: actionCount = 0, handCount = 26 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 26, hnd: 26
Test #28: actionCount = 0, handCount = 27 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 27, hnd: 27
Test #29: actionCount = 0, handCount = 28 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 28, hnd: 28
Test #30: actionCount = 0, handCount = 29 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 29, hnd: 29
Test #31: actionCount = 0, handCount = 30 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 30, hnd: 30
Test #32: actionCount = 0, handCount = 31 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 31, hnd: 31
Test #33: actionCount = 0, handCount = 32 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 32, hnd: 32
Test #34: actionCount = 0, handCount = 33 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 33, hnd: 33
Test #35: actionCount = 0, handCount = 34 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 34, hnd: 34
Test #36: actionCount = 0, handCount = 35 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 35, hnd: 35
Test #37: actionCount = 0, handCount = 36 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 36, hnd: 36
Test #38: actionCount = 0, handCount = 37 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 37, hnd: 37
Test #39: actionCount = 0, handCount = 38 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 38, hnd: 38
Test #40: actionCount = 0, handCount = 39 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 39, hnd: 39
Test #41: actionCount = 0, handCount = 40 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 40, hnd: 40
Test #42: actionCount = 0, handCount = 41 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 41, hnd: 41
Test #43: actionCount = 0, handCount = 42 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 42, hnd: 42
Test #44: actionCount = 0, handCount = 43 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 43, hnd: 43
Test #45: actionCount = 0, handCount = 44 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 44, hnd: 44
Test #46: actionCount = 0, handCount = 45 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 45, hnd: 45
Test #47: actionCount = 0, handCount = 46 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 46, hnd: 46
Test #48: actionCount = 0, handCount = 47 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 47, hnd: 47
Test #49: actionCount = 0, handCount = 48 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 48, hnd: 48
Test #50: actionCount = 0, handCount = 49 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 49, hnd: 49
Test #51: actionCount = 0, handCount = 50 | 	Passed: Exp act: 1, Act: 1; Exp hnd: 50, hnd: 50
Test #52: actionCount = 1, handCount = 0 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 0, hnd: 0
Test #53: actionCount = 1, handCount = 1 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 1, hnd: 1
Test #54: actionCount = 1, handCount = 2 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 2, hnd: 2
Test #55: actionCount = 1, handCount = 3 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 3, hnd: 3
Test #56: actionCount = 1, handCount = 4 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 4, hnd: 4
Test #57: actionCount = 1, handCount = 5 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 5, hnd: 5
Test #58: actionCount = 1, handCount = 6 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 6, hnd: 6
Test #59: actionCount = 1, handCount = 7 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 7, hnd: 7
Test #60: actionCount = 1, handCount = 8 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 8, hnd: 8
Test #61: actionCount = 1, handCount = 9 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 9, hnd: 9
Test #62: actionCount = 1, handCount = 10 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 10, hnd: 10
Test #63: actionCount = 1, handCount = 11 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 11, hnd: 11
Test #64: actionCount = 1, handCount = 12 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 12, hnd: 12
Test #65: actionCount = 1, handCount = 13 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 13, hnd: 13
Test #66: actionCount = 1, handCount = 14 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 14, hnd: 14
Test #67: actionCount = 1, handCount = 15 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 15, hnd: 15
Test #68: actionCount = 1, handCount = 16 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 16, hnd: 16
Test #69: actionCount = 1, handCount = 17 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 17, hnd: 17
Test #70: actionCount = 1, handCount = 18 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 18, hnd: 18
Test #71: actionCount = 1, handCount = 19 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 19, hnd: 19
Test #72: actionCount = 1, handCount = 20 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 20, hnd: 20
Test #73: actionCount = 1, handCount = 21 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 21, hnd: 21
Test #74: actionCount = 1, handCount = 22 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 22, hnd: 22
Test #75: actionCount = 1, handCount = 23 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 23, hnd: 23
Test #76: actionCount = 1, handCount = 24 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 24, hnd: 24
Test #77: actionCount = 1, handCount = 25 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 25, hnd: 25
Test #78: actionCount = 1, handCount = 26 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 26, hnd: 26
Test #79: actionCount = 1, handCount = 27 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 27, hnd: 27
Test #80: actionCount = 1, handCount = 28 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 28, hnd: 28
Test #81: actionCount = 1, handCount = 29 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 29, hnd: 29
Test #82: actionCount = 1, handCount = 30 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 30, hnd: 30
Test #83: actionCount = 1, handCount = 31 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 31, hnd: 31
Test #84: actionCount = 1, handCount = 32 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 32, hnd: 32
Test #85: actionCount = 1, handCount = 33 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 33, hnd: 33
Test #86: actionCount = 1, handCount = 34 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 34, hnd: 34
Test #87: actionCount = 1, handCount = 35 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 35, hnd: 35
Test #88: actionCount = 1, handCount = 36 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 36, hnd: 36
Test #89: actionCount = 1, handCount = 37 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 37, hnd: 37
Test #90: actionCount = 1, handCount = 38 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 38, hnd: 38
Test #91: actionCount = 1, handCount = 39 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 39, hnd: 39
Test #92: actionCount = 1, handCount = 40 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 40, hnd: 40
Test #93: actionCount = 1, handCount = 41 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 41, hnd: 41
Test #94: actionCount = 1, handCount = 42 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 42, hnd: 42
Test #95: actionCount = 1, handCount = 43 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 43, hnd: 43
Test #96: actionCount = 1, handCount = 44 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 44, hnd: 44
Test #97: actionCount = 1, handCount = 45 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 45, hnd: 45
Test #98: actionCount = 1, handCount = 46 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 46, hnd: 46
Test #99: actionCount = 1, handCount = 47 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 47, hnd: 47
Test #100: actionCount = 1, handCount = 48 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 48, hnd: 48
Test #101: actionCount = 1, handCount = 49 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 49, hnd: 49
Test #102: actionCount = 1, handCount = 50 | 	Passed: Exp act: 2, Act: 2; Exp hnd: 50, hnd: 50
Test #103: actionCount = 2, handCount = 0 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 0, hnd: 0
Test #104: actionCount = 2, handCount = 1 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 1, hnd: 1
Test #105: actionCount = 2, handCount = 2 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 2, hnd: 2
Test #106: actionCount = 2, handCount = 3 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 3, hnd: 3
Test #107: actionCount = 2, handCount = 4 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 4, hnd: 4
Test #108: actionCount = 2, handCount = 5 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 5, hnd: 5
Test #109: actionCount = 2, handCount = 6 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 6, hnd: 6
Test #110: actionCount = 2, handCount = 7 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 7, hnd: 7
Test #111: actionCount = 2, handCount = 8 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 8, hnd: 8
Test #112: actionCount = 2, handCount = 9 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 9, hnd: 9
Test #113: actionCount = 2, handCount = 10 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 10, hnd: 10
Test #114: actionCount = 2, handCount = 11 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 11, hnd: 11
Test #115: actionCount = 2, handCount = 12 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 12, hnd: 12
Test #116: actionCount = 2, handCount = 13 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 13, hnd: 13
Test #117: actionCount = 2, handCount = 14 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 14, hnd: 14
Test #118: actionCount = 2, handCount = 15 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 15, hnd: 15
Test #119: actionCount = 2, handCount = 16 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 16, hnd: 16
Test #120: actionCount = 2, handCount = 17 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 17, hnd: 17
Test #121: actionCount = 2, handCount = 18 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 18, hnd: 18
Test #122: actionCount = 2, handCount = 19 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 19, hnd: 19
Test #123: actionCount = 2, handCount = 20 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 20, hnd: 20
Test #124: actionCount = 2, handCount = 21 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 21, hnd: 21
Test #125: actionCount = 2, handCount = 22 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 22, hnd: 22
Test #126: actionCount = 2, handCount = 23 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 23, hnd: 23
Test #127: actionCount = 2, handCount = 24 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 24, hnd: 24
Test #128: actionCount = 2, handCount = 25 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 25, hnd: 25
Test #129: actionCount = 2, handCount = 26 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 26, hnd: 26
Test #130: actionCount = 2, handCount = 27 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 27, hnd: 27
Test #131: actionCount = 2, handCount = 28 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 28, hnd: 28
Test #132: actionCount = 2, handCount = 29 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 29, hnd: 29
Test #133: actionCount = 2, handCount = 30 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 30, hnd: 30
Test #134: actionCount = 2, handCount = 31 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 31, hnd: 31
Test #135: actionCount = 2, handCount = 32 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 32, hnd: 32
Test #136: actionCount = 2, handCount = 33 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 33, hnd: 33
Test #137: actionCount = 2, handCount = 34 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 34, hnd: 34
Test #138: actionCount = 2, handCount = 35 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 35, hnd: 35
Test #139: actionCount = 2, handCount = 36 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 36, hnd: 36
Test #140: actionCount = 2, handCount = 37 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 37, hnd: 37
Test #141: actionCount = 2, handCount = 38 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 38, hnd: 38
Test #142: actionCount = 2, handCount = 39 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 39, hnd: 39
Test #143: actionCount = 2, handCount = 40 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 40, hnd: 40
Test #144: actionCount = 2, handCount = 41 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 41, hnd: 41
Test #145: actionCount = 2, handCount = 42 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 42, hnd: 42
Test #146: actionCount = 2, handCount = 43 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 43, hnd: 43
Test #147: actionCount = 2, handCount = 44 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 44, hnd: 44
Test #148: actionCount = 2, handCount = 45 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 45, hnd: 45
Test #149: actionCount = 2, handCount = 46 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 46, hnd: 46
Test #150: actionCount = 2, handCount = 47 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 47, hnd: 47
Test #151: actionCount = 2, handCount = 48 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 48, hnd: 48
Test #152: actionCount = 2, handCount = 49 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 49, hnd: 49
Test #153: actionCount = 2, handCount = 50 | 	Passed: Exp act: 3, Act: 3; Exp hnd: 50, hnd: 50
Test #154: actionCount = 3, handCount = 0 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 0, hnd: 0
Test #155: actionCount = 3, handCount = 1 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 1, hnd: 1
Test #156: actionCount = 3, handCount = 2 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 2, hnd: 2
Test #157: actionCount = 3, handCount = 3 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 3, hnd: 3
Test #158: actionCount = 3, handCount = 4 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 4, hnd: 4
Test #159: actionCount = 3, handCount = 5 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 5, hnd: 5
Test #160: actionCount = 3, handCount = 6 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 6, hnd: 6
Test #161: actionCount = 3, handCount = 7 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 7, hnd: 7
Test #162: actionCount = 3, handCount = 8 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 8, hnd: 8
Test #163: actionCount = 3, handCount = 9 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 9, hnd: 9
Test #164: actionCount = 3, handCount = 10 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 10, hnd: 10
Test #165: actionCount = 3, handCount = 11 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 11, hnd: 11
Test #166: actionCount = 3, handCount = 12 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 12, hnd: 12
Test #167: actionCount = 3, handCount = 13 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 13, hnd: 13
Test #168: actionCount = 3, handCount = 14 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 14, hnd: 14
Test #169: actionCount = 3, handCount = 15 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 15, hnd: 15
Test #170: actionCount = 3, handCount = 16 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 16, hnd: 16
Test #171: actionCount = 3, handCount = 17 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 17, hnd: 17
Test #172: actionCount = 3, handCount = 18 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 18, hnd: 18
Test #173: actionCount = 3, handCount = 19 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 19, hnd: 19
Test #174: actionCount = 3, handCount = 20 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 20, hnd: 20
Test #175: actionCount = 3, handCount = 21 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 21, hnd: 21
Test #176: actionCount = 3, handCount = 22 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 22, hnd: 22
Test #177: actionCount = 3, handCount = 23 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 23, hnd: 23
Test #178: actionCount = 3, handCount = 24 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 24, hnd: 24
Test #179: actionCount = 3, handCount = 25 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 25, hnd: 25
Test #180: actionCount = 3, handCount = 26 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 26, hnd: 26
Test #181: actionCount = 3, handCount = 27 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 27, hnd: 27
Test #182: actionCount = 3, handCount = 28 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 28, hnd: 28
Test #183: actionCount = 3, handCount = 29 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 29, hnd: 29
Test #184: actionCount = 3, handCount = 30 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 30, hnd: 30
Test #185: actionCount = 3, handCount = 31 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 31, hnd: 31
Test #186: actionCount = 3, handCount = 32 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 32, hnd: 32
Test #187: actionCount = 3, handCount = 33 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 33, hnd: 33
Test #188: actionCount = 3, handCount = 34 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 34, hnd: 34
Test #189: actionCount = 3, handCount = 35 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 35, hnd: 35
Test #190: actionCount = 3, handCount = 36 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 36, hnd: 36
Test #191: actionCount = 3, handCount = 37 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 37, hnd: 37
Test #192: actionCount = 3, handCount = 38 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 38, hnd: 38
Test #193: actionCount = 3, handCount = 39 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 39, hnd: 39
Test #194: actionCount = 3, handCount = 40 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 40, hnd: 40
Test #195: actionCount = 3, handCount = 41 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 41, hnd: 41
Test #196: actionCount = 3, handCount = 42 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 42, hnd: 42
Test #197: actionCount = 3, handCount = 43 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 43, hnd: 43
Test #198: actionCount = 3, handCount = 44 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 44, hnd: 44
Test #199: actionCount = 3, handCount = 45 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 45, hnd: 45
Test #200: actionCount = 3, handCount = 46 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 46, hnd: 46
Test #201: actionCount = 3, handCount = 47 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 47, hnd: 47
Test #202: actionCount = 3, handCount = 48 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 48, hnd: 48
Test #203: actionCount = 3, handCount = 49 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 49, hnd: 49
Test #204: actionCount = 3, handCount = 50 | 	Passed: Exp act: 4, Act: 4; Exp hnd: 50, hnd: 50
Test #205: actionCount = 4, handCount = 0 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 0, hnd: 0
Test #206: actionCount = 4, handCount = 1 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 1, hnd: 1
Test #207: actionCount = 4, handCount = 2 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 2, hnd: 2
Test #208: actionCount = 4, handCount = 3 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 3, hnd: 3
Test #209: actionCount = 4, handCount = 4 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 4, hnd: 4
Test #210: actionCount = 4, handCount = 5 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 5, hnd: 5
Test #211: actionCount = 4, handCount = 6 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 6, hnd: 6
Test #212: actionCount = 4, handCount = 7 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 7, hnd: 7
Test #213: actionCount = 4, handCount = 8 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 8, hnd: 8
Test #214: actionCount = 4, handCount = 9 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 9, hnd: 9
Test #215: actionCount = 4, handCount = 10 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 10, hnd: 10
Test #216: actionCount = 4, handCount = 11 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 11, hnd: 11
Test #217: actionCount = 4, handCount = 12 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 12, hnd: 12
Test #218: actionCount = 4, handCount = 13 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 13, hnd: 13
Test #219: actionCount = 4, handCount = 14 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 14, hnd: 14
Test #220: actionCount = 4, handCount = 15 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 15, hnd: 15
Test #221: actionCount = 4, handCount = 16 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 16, hnd: 16
Test #222: actionCount = 4, handCount = 17 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 17, hnd: 17
Test #223: actionCount = 4, handCount = 18 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 18, hnd: 18
Test #224: actionCount = 4, handCount = 19 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 19, hnd: 19
Test #225: actionCount = 4, handCount = 20 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 20, hnd: 20
Test #226: actionCount = 4, handCount = 21 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 21, hnd: 21
Test #227: actionCount = 4, handCount = 22 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 22, hnd: 22
Test #228: actionCount = 4, handCount = 23 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 23, hnd: 23
Test #229: actionCount = 4, handCount = 24 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 24, hnd: 24
Test #230: actionCount = 4, handCount = 25 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 25, hnd: 25
Test #231: actionCount = 4, handCount = 26 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 26, hnd: 26
Test #232: actionCount = 4, handCount = 27 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 27, hnd: 27
Test #233: actionCount = 4, handCount = 28 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 28, hnd: 28
Test #234: actionCount = 4, handCount = 29 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 29, hnd: 29
Test #235: actionCount = 4, handCount = 30 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 30, hnd: 30
Test #236: actionCount = 4, handCount = 31 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 31, hnd: 31
Test #237: actionCount = 4, handCount = 32 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 32, hnd: 32
Test #238: actionCount = 4, handCount = 33 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 33, hnd: 33
Test #239: actionCount = 4, handCount = 34 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 34, hnd: 34
Test #240: actionCount = 4, handCount = 35 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 35, hnd: 35
Test #241: actionCount = 4, handCount = 36 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 36, hnd: 36
Test #242: actionCount = 4, handCount = 37 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 37, hnd: 37
Test #243: actionCount = 4, handCount = 38 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 38, hnd: 38
Test #244: actionCount = 4, handCount = 39 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 39, hnd: 39
Test #245: actionCount = 4, handCount = 40 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 40, hnd: 40
Test #246: actionCount = 4, handCount = 41 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 41, hnd: 41
Test #247: actionCount = 4, handCount = 42 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 42, hnd: 42
Test #248: actionCount = 4, handCount = 43 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 43, hnd: 43
Test #249: actionCount = 4, handCount = 44 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 44, hnd: 44
Test #250: actionCount = 4, handCount = 45 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 45, hnd: 45
Test #251: actionCount = 4, handCount = 46 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 46, hnd: 46
Test #252: actionCount = 4, handCount = 47 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 47, hnd: 47
Test #253: actionCount = 4, handCount = 48 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 48, hnd: 48
Test #254: actionCount = 4, handCount = 49 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 49, hnd: 49
Test #255: actionCount = 4, handCount = 50 | 	Passed: Exp act: 5, Act: 5; Exp hnd: 50, hnd: 50
Test #256: actionCount = 5, handCount = 0 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 0, hnd: 0
Test #257: actionCount = 5, handCount = 1 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 1, hnd: 1
Test #258: actionCount = 5, handCount = 2 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 2, hnd: 2
Test #259: actionCount = 5, handCount = 3 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 3, hnd: 3
Test #260: actionCount = 5, handCount = 4 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 4, hnd: 4
Test #261: actionCount = 5, handCount = 5 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 5, hnd: 5
Test #262: actionCount = 5, handCount = 6 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 6, hnd: 6
Test #263: actionCount = 5, handCount = 7 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 7, hnd: 7
Test #264: actionCount = 5, handCount = 8 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 8, hnd: 8
Test #265: actionCount = 5, handCount = 9 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 9, hnd: 9
Test #266: actionCount = 5, handCount = 10 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 10, hnd: 10
Test #267: actionCount = 5, handCount = 11 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 11, hnd: 11
Test #268: actionCount = 5, handCount = 12 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 12, hnd: 12
Test #269: actionCount = 5, handCount = 13 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 13, hnd: 13
Test #270: actionCount = 5, handCount = 14 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 14, hnd: 14
Test #271: actionCount = 5, handCount = 15 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 15, hnd: 15
Test #272: actionCount = 5, handCount = 16 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 16, hnd: 16
Test #273: actionCount = 5, handCount = 17 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 17, hnd: 17
Test #274: actionCount = 5, handCount = 18 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 18, hnd: 18
Test #275: actionCount = 5, handCount = 19 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 19, hnd: 19
Test #276: actionCount = 5, handCount = 20 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 20, hnd: 20
Test #277: actionCount = 5, handCount = 21 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 21, hnd: 21
Test #278: actionCount = 5, handCount = 22 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 22, hnd: 22
Test #279: actionCount = 5, handCount = 23 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 23, hnd: 23
Test #280: actionCount = 5, handCount = 24 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 24, hnd: 24
Test #281: actionCount = 5, handCount = 25 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 25, hnd: 25
Test #282: actionCount = 5, handCount = 26 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 26, hnd: 26
Test #283: actionCount = 5, handCount = 27 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 27, hnd: 27
Test #284: actionCount = 5, handCount = 28 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 28, hnd: 28
Test #285: actionCount = 5, handCount = 29 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 29, hnd: 29
Test #286: actionCount = 5, handCount = 30 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 30, hnd: 30
Test #287: actionCount = 5, handCount = 31 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 31, hnd: 31
Test #288: actionCount = 5, handCount = 32 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 32, hnd: 32
Test #289: actionCount = 5, handCount = 33 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 33, hnd: 33
Test #290: actionCount = 5, handCount = 34 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 34, hnd: 34
Test #291: actionCount = 5, handCount = 35 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 35, hnd: 35
Test #292: actionCount = 5, handCount = 36 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 36, hnd: 36
Test #293: actionCount = 5, handCount = 37 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 37, hnd: 37
Test #294: actionCount = 5, handCount = 38 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 38, hnd: 38
Test #295: actionCount = 5, handCount = 39 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 39, hnd: 39
Test #296: actionCount = 5, handCount = 40 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 40, hnd: 40
Test #297: actionCount = 5, handCount = 41 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 41, hnd: 41
Test #298: actionCount = 5, handCount = 42 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 42, hnd: 42
Test #299: actionCount = 5, handCount = 43 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 43, hnd: 43
Test #300: actionCount = 5, handCount = 44 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 44, hnd: 44
Test #301: actionCount = 5, handCount = 45 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 45, hnd: 45
Test #302: actionCount = 5, handCount = 46 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 46, hnd: 46
Test #303: actionCount = 5, handCount = 47 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 47, hnd: 47
Test #304: actionCount = 5, handCount = 48 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 48, hnd: 48
Test #305: actionCount = 5, handCount = 49 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 49, hnd: 49
Test #306: actionCount = 5, handCount = 50 | 	Passed: Exp act: 6, Act: 6; Exp hnd: 50, hnd: 50
Test #307: actionCount = 6, handCount = 0 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 0, hnd: 0
Test #308: actionCount = 6, handCount = 1 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 1, hnd: 1
Test #309: actionCount = 6, handCount = 2 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 2, hnd: 2
Test #310: actionCount = 6, handCount = 3 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 3, hnd: 3
Test #311: actionCount = 6, handCount = 4 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 4, hnd: 4
Test #312: actionCount = 6, handCount = 5 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 5, hnd: 5
Test #313: actionCount = 6, handCount = 6 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 6, hnd: 6
Test #314: actionCount = 6, handCount = 7 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 7, hnd: 7
Test #315: actionCount = 6, handCount = 8 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 8, hnd: 8
Test #316: actionCount = 6, handCount = 9 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 9, hnd: 9
Test #317: actionCount = 6, handCount = 10 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 10, hnd: 10
Test #318: actionCount = 6, handCount = 11 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 11, hnd: 11
Test #319: actionCount = 6, handCount = 12 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 12, hnd: 12
Test #320: actionCount = 6, handCount = 13 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 13, hnd: 13
Test #321: actionCount = 6, handCount = 14 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 14, hnd: 14
Test #322: actionCount = 6, handCount = 15 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 15, hnd: 15
Test #323: actionCount = 6, handCount = 16 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 16, hnd: 16
Test #324: actionCount = 6, handCount = 17 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 17, hnd: 17
Test #325: actionCount = 6, handCount = 18 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 18, hnd: 18
Test #326: actionCount = 6, handCount = 19 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 19, hnd: 19
Test #327: actionCount = 6, handCount = 20 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 20, hnd: 20
Test #328: actionCount = 6, handCount = 21 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 21, hnd: 21
Test #329: actionCount = 6, handCount = 22 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 22, hnd: 22
Test #330: actionCount = 6, handCount = 23 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 23, hnd: 23
Test #331: actionCount = 6, handCount = 24 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 24, hnd: 24
Test #332: actionCount = 6, handCount = 25 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 25, hnd: 25
Test #333: actionCount = 6, handCount = 26 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 26, hnd: 26
Test #334: actionCount = 6, handCount = 27 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 27, hnd: 27
Test #335: actionCount = 6, handCount = 28 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 28, hnd: 28
Test #336: actionCount = 6, handCount = 29 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 29, hnd: 29
Test #337: actionCount = 6, handCount = 30 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 30, hnd: 30
Test #338: actionCount = 6, handCount = 31 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 31, hnd: 31
Test #339: actionCount = 6, handCount = 32 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 32, hnd: 32
Test #340: actionCount = 6, handCount = 33 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 33, hnd: 33
Test #341: actionCount = 6, handCount = 34 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 34, hnd: 34
Test #342: actionCount = 6, handCount = 35 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 35, hnd: 35
Test #343: actionCount = 6, handCount = 36 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 36, hnd: 36
Test #344: actionCount = 6, handCount = 37 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 37, hnd: 37
Test #345: actionCount = 6, handCount = 38 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 38, hnd: 38
Test #346: actionCount = 6, handCount = 39 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 39, hnd: 39
Test #347: actionCount = 6, handCount = 40 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 40, hnd: 40
Test #348: actionCount = 6, handCount = 41 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 41, hnd: 41
Test #349: actionCount = 6, handCount = 42 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 42, hnd: 42
Test #350: actionCount = 6, handCount = 43 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 43, hnd: 43
Test #351: actionCount = 6, handCount = 44 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 44, hnd: 44
Test #352: actionCount = 6, handCount = 45 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 45, hnd: 45
Test #353: actionCount = 6, handCount = 46 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 46, hnd: 46
Test #354: actionCount = 6, handCount = 47 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 47, hnd: 47
Test #355: actionCount = 6, handCount = 48 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 48, hnd: 48
Test #356: actionCount = 6, handCount = 49 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 49, hnd: 49
Test #357: actionCount = 6, handCount = 50 | 	Passed: Exp act: 7, Act: 7; Exp hnd: 50, hnd: 50
Test #358: actionCount = 7, handCount = 0 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 0, hnd: 0
Test #359: actionCount = 7, handCount = 1 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 1, hnd: 1
Test #360: actionCount = 7, handCount = 2 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 2, hnd: 2
Test #361: actionCount = 7, handCount = 3 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 3, hnd: 3
Test #362: actionCount = 7, handCount = 4 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 4, hnd: 4
Test #363: actionCount = 7, handCount = 5 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 5, hnd: 5
Test #364: actionCount = 7, handCount = 6 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 6, hnd: 6
Test #365: actionCount = 7, handCount = 7 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 7, hnd: 7
Test #366: actionCount = 7, handCount = 8 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 8, hnd: 8
Test #367: actionCount = 7, handCount = 9 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 9, hnd: 9
Test #368: actionCount = 7, handCount = 10 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 10, hnd: 10
Test #369: actionCount = 7, handCount = 11 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 11, hnd: 11
Test #370: actionCount = 7, handCount = 12 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 12, hnd: 12
Test #371: actionCount = 7, handCount = 13 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 13, hnd: 13
Test #372: actionCount = 7, handCount = 14 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 14, hnd: 14
Test #373: actionCount = 7, handCount = 15 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 15, hnd: 15
Test #374: actionCount = 7, handCount = 16 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 16, hnd: 16
Test #375: actionCount = 7, handCount = 17 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 17, hnd: 17
Test #376: actionCount = 7, handCount = 18 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 18, hnd: 18
Test #377: actionCount = 7, handCount = 19 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 19, hnd: 19
Test #378: actionCount = 7, handCount = 20 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 20, hnd: 20
Test #379: actionCount = 7, handCount = 21 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 21, hnd: 21
Test #380: actionCount = 7, handCount = 22 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 22, hnd: 22
Test #381: actionCount = 7, handCount = 23 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 23, hnd: 23
Test #382: actionCount = 7, handCount = 24 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 24, hnd: 24
Test #383: actionCount = 7, handCount = 25 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 25, hnd: 25
Test #384: actionCount = 7, handCount = 26 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 26, hnd: 26
Test #385: actionCount = 7, handCount = 27 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 27, hnd: 27
Test #386: actionCount = 7, handCount = 28 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 28, hnd: 28
Test #387: actionCount = 7, handCount = 29 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 29, hnd: 29
Test #388: actionCount = 7, handCount = 30 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 30, hnd: 30
Test #389: actionCount = 7, handCount = 31 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 31, hnd: 31
Test #390: actionCount = 7, handCount = 32 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 32, hnd: 32
Test #391: actionCount = 7, handCount = 33 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 33, hnd: 33
Test #392: actionCount = 7, handCount = 34 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 34, hnd: 34
Test #393: actionCount = 7, handCount = 35 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 35, hnd: 35
Test #394: actionCount = 7, handCount = 36 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 36, hnd: 36
Test #395: actionCount = 7, handCount = 37 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 37, hnd: 37
Test #396: actionCount = 7, handCount = 38 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 38, hnd: 38
Test #397: actionCount = 7, handCount = 39 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 39, hnd: 39
Test #398: actionCount = 7, handCount = 40 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 40, hnd: 40
Test #399: actionCount = 7, handCount = 41 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 41, hnd: 41
Test #400: actionCount = 7, handCount = 42 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 42, hnd: 42
Test #401: actionCount = 7, handCount = 43 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 43, hnd: 43
Test #402: actionCount = 7, handCount = 44 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 44, hnd: 44
Test #403: actionCount = 7, handCount = 45 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 45, hnd: 45
Test #404: actionCount = 7, handCount = 46 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 46, hnd: 46
Test #405: actionCount = 7, handCount = 47 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 47, hnd: 47
Test #406: actionCount = 7, handCount = 48 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 48, hnd: 48
Test #407: actionCount = 7, handCount = 49 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 49, hnd: 49
Test #408: actionCount = 7, handCount = 50 | 	Passed: Exp act: 8, Act: 8; Exp hnd: 50, hnd: 50
Test #409: actionCount = 8, handCount = 0 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 0, hnd: 0
Test #410: actionCount = 8, handCount = 1 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 1, hnd: 1
Test #411: actionCount = 8, handCount = 2 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 2, hnd: 2
Test #412: actionCount = 8, handCount = 3 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 3, hnd: 3
Test #413: actionCount = 8, handCount = 4 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 4, hnd: 4
Test #414: actionCount = 8, handCount = 5 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 5, hnd: 5
Test #415: actionCount = 8, handCount = 6 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 6, hnd: 6
Test #416: actionCount = 8, handCount = 7 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 7, hnd: 7
Test #417: actionCount = 8, handCount = 8 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 8, hnd: 8
Test #418: actionCount = 8, handCount = 9 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 9, hnd: 9
Test #419: actionCount = 8, handCount = 10 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 10, hnd: 10
Test #420: actionCount = 8, handCount = 11 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 11, hnd: 11
Test #421: actionCount = 8, handCount = 12 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 12, hnd: 12
Test #422: actionCount = 8, handCount = 13 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 13, hnd: 13
Test #423: actionCount = 8, handCount = 14 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 14, hnd: 14
Test #424: actionCount = 8, handCount = 15 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 15, hnd: 15
Test #425: actionCount = 8, handCount = 16 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 16, hnd: 16
Test #426: actionCount = 8, handCount = 17 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 17, hnd: 17
Test #427: actionCount = 8, handCount = 18 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 18, hnd: 18
Test #428: actionCount = 8, handCount = 19 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 19, hnd: 19
Test #429: actionCount = 8, handCount = 20 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 20, hnd: 20
Test #430: actionCount = 8, handCount = 21 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 21, hnd: 21
Test #431: actionCount = 8, handCount = 22 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 22, hnd: 22
Test #432: actionCount = 8, handCount = 23 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 23, hnd: 23
Test #433: actionCount = 8, handCount = 24 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 24, hnd: 24
Test #434: actionCount = 8, handCount = 25 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 25, hnd: 25
Test #435: actionCount = 8, handCount = 26 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 26, hnd: 26
Test #436: actionCount = 8, handCount = 27 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 27, hnd: 27
Test #437: actionCount = 8, handCount = 28 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 28, hnd: 28
Test #438: actionCount = 8, handCount = 29 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 29, hnd: 29
Test #439: actionCount = 8, handCount = 30 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 30, hnd: 30
Test #440: actionCount = 8, handCount = 31 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 31, hnd: 31
Test #441: actionCount = 8, handCount = 32 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 32, hnd: 32
Test #442: actionCount = 8, handCount = 33 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 33, hnd: 33
Test #443: actionCount = 8, handCount = 34 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 34, hnd: 34
Test #444: actionCount = 8, handCount = 35 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 35, hnd: 35
Test #445: actionCount = 8, handCount = 36 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 36, hnd: 36
Test #446: actionCount = 8, handCount = 37 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 37, hnd: 37
Test #447: actionCount = 8, handCount = 38 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 38, hnd: 38
Test #448: actionCount = 8, handCount = 39 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 39, hnd: 39
Test #449: actionCount = 8, handCount = 40 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 40, hnd: 40
Test #450: actionCount = 8, handCount = 41 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 41, hnd: 41
Test #451: actionCount = 8, handCount = 42 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 42, hnd: 42
Test #452: actionCount = 8, handCount = 43 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 43, hnd: 43
Test #453: actionCount = 8, handCount = 44 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 44, hnd: 44
Test #454: actionCount = 8, handCount = 45 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 45, hnd: 45
Test #455: actionCount = 8, handCount = 46 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 46, hnd: 46
Test #456: actionCount = 8, handCount = 47 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 47, hnd: 47
Test #457: actionCount = 8, handCount = 48 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 48, hnd: 48
Test #458: actionCount = 8, handCount = 49 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 49, hnd: 49
Test #459: actionCount = 8, handCount = 50 | 	Passed: Exp act: 9, Act: 9; Exp hnd: 50, hnd: 50
Test #460: actionCount = 9, handCount = 0 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 0, hnd: 0
Test #461: actionCount = 9, handCount = 1 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 1, hnd: 1
Test #462: actionCount = 9, handCount = 2 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 2, hnd: 2
Test #463: actionCount = 9, handCount = 3 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 3, hnd: 3
Test #464: actionCount = 9, handCount = 4 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 4, hnd: 4
Test #465: actionCount = 9, handCount = 5 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 5, hnd: 5
Test #466: actionCount = 9, handCount = 6 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 6, hnd: 6
Test #467: actionCount = 9, handCount = 7 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 7, hnd: 7
Test #468: actionCount = 9, handCount = 8 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 8, hnd: 8
Test #469: actionCount = 9, handCount = 9 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 9, hnd: 9
Test #470: actionCount = 9, handCount = 10 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 10, hnd: 10
Test #471: actionCount = 9, handCount = 11 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 11, hnd: 11
Test #472: actionCount = 9, handCount = 12 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 12, hnd: 12
Test #473: actionCount = 9, handCount = 13 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 13, hnd: 13
Test #474: actionCount = 9, handCount = 14 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 14, hnd: 14
Test #475: actionCount = 9, handCount = 15 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 15, hnd: 15
Test #476: actionCount = 9, handCount = 16 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 16, hnd: 16
Test #477: actionCount = 9, handCount = 17 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 17, hnd: 17
Test #478: actionCount = 9, handCount = 18 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 18, hnd: 18
Test #479: actionCount = 9, handCount = 19 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 19, hnd: 19
Test #480: actionCount = 9, handCount = 20 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 20, hnd: 20
Test #481: actionCount = 9, handCount = 21 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 21, hnd: 21
Test #482: actionCount = 9, handCount = 22 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 22, hnd: 22
Test #483: actionCount = 9, handCount = 23 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 23, hnd: 23
Test #484: actionCount = 9, handCount = 24 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 24, hnd: 24
Test #485: actionCount = 9, handCount = 25 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 25, hnd: 25
Test #486: actionCount = 9, handCount = 26 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 26, hnd: 26
Test #487: actionCount = 9, handCount = 27 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 27, hnd: 27
Test #488: actionCount = 9, handCount = 28 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 28, hnd: 28
Test #489: actionCount = 9, handCount = 29 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 29, hnd: 29
Test #490: actionCount = 9, handCount = 30 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 30, hnd: 30
Test #491: actionCount = 9, handCount = 31 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 31, hnd: 31
Test #492: actionCount = 9, handCount = 32 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 32, hnd: 32
Test #493: actionCount = 9, handCount = 33 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 33, hnd: 33
Test #494: actionCount = 9, handCount = 34 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 34, hnd: 34
Test #495: actionCount = 9, handCount = 35 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 35, hnd: 35
Test #496: actionCount = 9, handCount = 36 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 36, hnd: 36
Test #497: actionCount = 9, handCount = 37 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 37, hnd: 37
Test #498: actionCount = 9, handCount = 38 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 38, hnd: 38
Test #499: actionCount = 9, handCount = 39 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 39, hnd: 39
Test #500: actionCount = 9, handCount = 40 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 40, hnd: 40
Test #501: actionCount = 9, handCount = 41 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 41, hnd: 41
Test #502: actionCount = 9, handCount = 42 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 42, hnd: 42
Test #503: actionCount = 9, handCount = 43 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 43, hnd: 43
Test #504: actionCount = 9, handCount = 44 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 44, hnd: 44
Test #505: actionCount = 9, handCount = 45 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 45, hnd: 45
Test #506: actionCount = 9, handCount = 46 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 46, hnd: 46
Test #507: actionCount = 9, handCount = 47 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 47, hnd: 47
Test #508: actionCount = 9, handCount = 48 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 48, hnd: 48
Test #509: actionCount = 9, handCount = 49 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 49, hnd: 49
Test #510: actionCount = 9, handCount = 50 | 	Passed: Exp act: 10, Act: 10; Exp hnd: 50, hnd: 50
Test #511: actionCount = 10, handCount = 0 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 0, hnd: 0
Test #512: actionCount = 10, handCount = 1 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 1, hnd: 1
Test #513: actionCount = 10, handCount = 2 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 2, hnd: 2
Test #514: actionCount = 10, handCount = 3 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 3, hnd: 3
Test #515: actionCount = 10, handCount = 4 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 4, hnd: 4
Test #516: actionCount = 10, handCount = 5 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 5, hnd: 5
Test #517: actionCount = 10, handCount = 6 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 6, hnd: 6
Test #518: actionCount = 10, handCount = 7 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 7, hnd: 7
Test #519: actionCount = 10, handCount = 8 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 8, hnd: 8
Test #520: actionCount = 10, handCount = 9 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 9, hnd: 9
Test #521: actionCount = 10, handCount = 10 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 10, hnd: 10
Test #522: actionCount = 10, handCount = 11 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 11, hnd: 11
Test #523: actionCount = 10, handCount = 12 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 12, hnd: 12
Test #524: actionCount = 10, handCount = 13 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 13, hnd: 13
Test #525: actionCount = 10, handCount = 14 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 14, hnd: 14
Test #526: actionCount = 10, handCount = 15 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 15, hnd: 15
Test #527: actionCount = 10, handCount = 16 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 16, hnd: 16
Test #528: actionCount = 10, handCount = 17 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 17, hnd: 17
Test #529: actionCount = 10, handCount = 18 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 18, hnd: 18
Test #530: actionCount = 10, handCount = 19 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 19, hnd: 19
Test #531: actionCount = 10, handCount = 20 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 20, hnd: 20
Test #532: actionCount = 10, handCount = 21 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 21, hnd: 21
Test #533: actionCount = 10, handCount = 22 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 22, hnd: 22
Test #534: actionCount = 10, handCount = 23 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 23, hnd: 23
Test #535: actionCount = 10, handCount = 24 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 24, hnd: 24
Test #536: actionCount = 10, handCount = 25 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 25, hnd: 25
Test #537: actionCount = 10, handCount = 26 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 26, hnd: 26
Test #538: actionCount = 10, handCount = 27 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 27, hnd: 27
Test #539: actionCount = 10, handCount = 28 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 28, hnd: 28
Test #540: actionCount = 10, handCount = 29 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 29, hnd: 29
Test #541: actionCount = 10, handCount = 30 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 30, hnd: 30
Test #542: actionCount = 10, handCount = 31 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 31, hnd: 31
Test #543: actionCount = 10, handCount = 32 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 32, hnd: 32
Test #544: actionCount = 10, handCount = 33 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 33, hnd: 33
Test #545: actionCount = 10, handCount = 34 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 34, hnd: 34
Test #546: actionCount = 10, handCount = 35 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 35, hnd: 35
Test #547: actionCount = 10, handCount = 36 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 36, hnd: 36
Test #548: actionCount = 10, handCount = 37 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 37, hnd: 37
Test #549: actionCount = 10, handCount = 38 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 38, hnd: 38
Test #550: actionCount = 10, handCount = 39 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 39, hnd: 39
Test #551: actionCount = 10, handCount = 40 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 40, hnd: 40
Test #552: actionCount = 10, handCount = 41 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 41, hnd: 41
Test #553: actionCount = 10, handCount = 42 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 42, hnd: 42
Test #554: actionCount = 10, handCount = 43 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 43, hnd: 43
Test #555: actionCount = 10, handCount = 44 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 44, hnd: 44
Test #556: actionCount = 10, handCount = 45 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 45, hnd: 45
Test #557: actionCount = 10, handCount = 46 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 46, hnd: 46
Test #558: actionCount = 10, handCount = 47 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 47, hnd: 47
Test #559: actionCount = 10, handCount = 48 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 48, hnd: 48
Test #560: actionCount = 10, handCount = 49 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 49, hnd: 49
Test #561: actionCount = 10, handCount = 50 | 	Passed: Exp act: 11, Act: 11; Exp hnd: 50, hnd: 50
Test #562: actionCount = 11, handCount = 0 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 0, hnd: 0
Test #563: actionCount = 11, handCount = 1 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 1, hnd: 1
Test #564: actionCount = 11, handCount = 2 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 2, hnd: 2
Test #565: actionCount = 11, handCount = 3 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 3, hnd: 3
Test #566: actionCount = 11, handCount = 4 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 4, hnd: 4
Test #567: actionCount = 11, handCount = 5 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 5, hnd: 5
Test #568: actionCount = 11, handCount = 6 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 6, hnd: 6
Test #569: actionCount = 11, handCount = 7 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 7, hnd: 7
Test #570: actionCount = 11, handCount = 8 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 8, hnd: 8
Test #571: actionCount = 11, handCount = 9 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 9, hnd: 9
Test #572: actionCount = 11, handCount = 10 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 10, hnd: 10
Test #573: actionCount = 11, handCount = 11 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 11, hnd: 11
Test #574: actionCount = 11, handCount = 12 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 12, hnd: 12
Test #575: actionCount = 11, handCount = 13 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 13, hnd: 13
Test #576: actionCount = 11, handCount = 14 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 14, hnd: 14
Test #577: actionCount = 11, handCount = 15 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 15, hnd: 15
Test #578: actionCount = 11, handCount = 16 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 16, hnd: 16
Test #579: actionCount = 11, handCount = 17 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 17, hnd: 17
Test #580: actionCount = 11, handCount = 18 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 18, hnd: 18
Test #581: actionCount = 11, handCount = 19 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 19, hnd: 19
Test #582: actionCount = 11, handCount = 20 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 20, hnd: 20
Test #583: actionCount = 11, handCount = 21 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 21, hnd: 21
Test #584: actionCount = 11, handCount = 22 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 22, hnd: 22
Test #585: actionCount = 11, handCount = 23 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 23, hnd: 23
Test #586: actionCount = 11, handCount = 24 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 24, hnd: 24
Test #587: actionCount = 11, handCount = 25 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 25, hnd: 25
Test #588: actionCount = 11, handCount = 26 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 26, hnd: 26
Test #589: actionCount = 11, handCount = 27 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 27, hnd: 27
Test #590: actionCount = 11, handCount = 28 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 28, hnd: 28
Test #591: actionCount = 11, handCount = 29 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 29, hnd: 29
Test #592: actionCount = 11, handCount = 30 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 30, hnd: 30
Test #593: actionCount = 11, handCount = 31 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 31, hnd: 31
Test #594: actionCount = 11, handCount = 32 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 32, hnd: 32
Test #595: actionCount = 11, handCount = 33 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 33, hnd: 33
Test #596: actionCount = 11, handCount = 34 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 34, hnd: 34
Test #597: actionCount = 11, handCount = 35 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 35, hnd: 35
Test #598: actionCount = 11, handCount = 36 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 36, hnd: 36
Test #599: actionCount = 11, handCount = 37 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 37, hnd: 37
Test #600: actionCount = 11, handCount = 38 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 38, hnd: 38
Test #601: actionCount = 11, handCount = 39 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 39, hnd: 39
Test #602: actionCount = 11, handCount = 40 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 40, hnd: 40
Test #603: actionCount = 11, handCount = 41 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 41, hnd: 41
Test #604: actionCount = 11, handCount = 42 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 42, hnd: 42
Test #605: actionCount = 11, handCount = 43 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 43, hnd: 43
Test #606: actionCount = 11, handCount = 44 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 44, hnd: 44
Test #607: actionCount = 11, handCount = 45 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 45, hnd: 45
Test #608: actionCount = 11, handCount = 46 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 46, hnd: 46
Test #609: actionCount = 11, handCount = 47 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 47, hnd: 47
Test #610: actionCount = 11, handCount = 48 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 48, hnd: 48
Test #611: actionCount = 11, handCount = 49 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 49, hnd: 49
Test #612: actionCount = 11, handCount = 50 | 	Passed: Exp act: 12, Act: 12; Exp hnd: 50, hnd: 50
Test #613: actionCount = 12, handCount = 0 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 0, hnd: 0
Test #614: actionCount = 12, handCount = 1 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 1, hnd: 1
Test #615: actionCount = 12, handCount = 2 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 2, hnd: 2
Test #616: actionCount = 12, handCount = 3 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 3, hnd: 3
Test #617: actionCount = 12, handCount = 4 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 4, hnd: 4
Test #618: actionCount = 12, handCount = 5 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 5, hnd: 5
Test #619: actionCount = 12, handCount = 6 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 6, hnd: 6
Test #620: actionCount = 12, handCount = 7 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 7, hnd: 7
Test #621: actionCount = 12, handCount = 8 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 8, hnd: 8
Test #622: actionCount = 12, handCount = 9 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 9, hnd: 9
Test #623: actionCount = 12, handCount = 10 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 10, hnd: 10
Test #624: actionCount = 12, handCount = 11 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 11, hnd: 11
Test #625: actionCount = 12, handCount = 12 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 12, hnd: 12
Test #626: actionCount = 12, handCount = 13 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 13, hnd: 13
Test #627: actionCount = 12, handCount = 14 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 14, hnd: 14
Test #628: actionCount = 12, handCount = 15 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 15, hnd: 15
Test #629: actionCount = 12, handCount = 16 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 16, hnd: 16
Test #630: actionCount = 12, handCount = 17 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 17, hnd: 17
Test #631: actionCount = 12, handCount = 18 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 18, hnd: 18
Test #632: actionCount = 12, handCount = 19 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 19, hnd: 19
Test #633: actionCount = 12, handCount = 20 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 20, hnd: 20
Test #634: actionCount = 12, handCount = 21 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 21, hnd: 21
Test #635: actionCount = 12, handCount = 22 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 22, hnd: 22
Test #636: actionCount = 12, handCount = 23 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 23, hnd: 23
Test #637: actionCount = 12, handCount = 24 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 24, hnd: 24
Test #638: actionCount = 12, handCount = 25 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 25, hnd: 25
Test #639: actionCount = 12, handCount = 26 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 26, hnd: 26
Test #640: actionCount = 12, handCount = 27 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 27, hnd: 27
Test #641: actionCount = 12, handCount = 28 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 28, hnd: 28
Test #642: actionCount = 12, handCount = 29 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 29, hnd: 29
Test #643: actionCount = 12, handCount = 30 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 30, hnd: 30
Test #644: actionCount = 12, handCount = 31 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 31, hnd: 31
Test #645: actionCount = 12, handCount = 32 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 32, hnd: 32
Test #646: actionCount = 12, handCount = 33 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 33, hnd: 33
Test #647: actionCount = 12, handCount = 34 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 34, hnd: 34
Test #648: actionCount = 12, handCount = 35 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 35, hnd: 35
Test #649: actionCount = 12, handCount = 36 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 36, hnd: 36
Test #650: actionCount = 12, handCount = 37 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 37, hnd: 37
Test #651: actionCount = 12, handCount = 38 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 38, hnd: 38
Test #652: actionCount = 12, handCount = 39 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 39, hnd: 39
Test #653: actionCount = 12, handCount = 40 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 40, hnd: 40
Test #654: actionCount = 12, handCount = 41 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 41, hnd: 41
Test #655: actionCount = 12, handCount = 42 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 42, hnd: 42
Test #656: actionCount = 12, handCount = 43 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 43, hnd: 43
Test #657: actionCount = 12, handCount = 44 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 44, hnd: 44
Test #658: actionCount = 12, handCount = 45 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 45, hnd: 45
Test #659: actionCount = 12, handCount = 46 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 46, hnd: 46
Test #660: actionCount = 12, handCount = 47 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 47, hnd: 47
Test #661: actionCount = 12, handCount = 48 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 48, hnd: 48
Test #662: actionCount = 12, handCount = 49 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 49, hnd: 49
Test #663: actionCount = 12, handCount = 50 | 	Passed: Exp act: 13, Act: 13; Exp hnd: 50, hnd: 50
Test #664: actionCount = 13, handCount = 0 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 0, hnd: 0
Test #665: actionCount = 13, handCount = 1 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 1, hnd: 1
Test #666: actionCount = 13, handCount = 2 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 2, hnd: 2
Test #667: actionCount = 13, handCount = 3 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 3, hnd: 3
Test #668: actionCount = 13, handCount = 4 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 4, hnd: 4
Test #669: actionCount = 13, handCount = 5 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 5, hnd: 5
Test #670: actionCount = 13, handCount = 6 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 6, hnd: 6
Test #671: actionCount = 13, handCount = 7 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 7, hnd: 7
Test #672: actionCount = 13, handCount = 8 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 8, hnd: 8
Test #673: actionCount = 13, handCount = 9 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 9, hnd: 9
Test #674: actionCount = 13, handCount = 10 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 10, hnd: 10
Test #675: actionCount = 13, handCount = 11 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 11, hnd: 11
Test #676: actionCount = 13, handCount = 12 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 12, hnd: 12
Test #677: actionCount = 13, handCount = 13 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 13, hnd: 13
Test #678: actionCount = 13, handCount = 14 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 14, hnd: 14
Test #679: actionCount = 13, handCount = 15 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 15, hnd: 15
Test #680: actionCount = 13, handCount = 16 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 16, hnd: 16
Test #681: actionCount = 13, handCount = 17 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 17, hnd: 17
Test #682: actionCount = 13, handCount = 18 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 18, hnd: 18
Test #683: actionCount = 13, handCount = 19 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 19, hnd: 19
Test #684: actionCount = 13, handCount = 20 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 20, hnd: 20
Test #685: actionCount = 13, handCount = 21 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 21, hnd: 21
Test #686: actionCount = 13, handCount = 22 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 22, hnd: 22
Test #687: actionCount = 13, handCount = 23 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 23, hnd: 23
Test #688: actionCount = 13, handCount = 24 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 24, hnd: 24
Test #689: actionCount = 13, handCount = 25 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 25, hnd: 25
Test #690: actionCount = 13, handCount = 26 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 26, hnd: 26
Test #691: actionCount = 13, handCount = 27 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 27, hnd: 27
Test #692: actionCount = 13, handCount = 28 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 28, hnd: 28
Test #693: actionCount = 13, handCount = 29 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 29, hnd: 29
Test #694: actionCount = 13, handCount = 30 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 30, hnd: 30
Test #695: actionCount = 13, handCount = 31 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 31, hnd: 31
Test #696: actionCount = 13, handCount = 32 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 32, hnd: 32
Test #697: actionCount = 13, handCount = 33 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 33, hnd: 33
Test #698: actionCount = 13, handCount = 34 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 34, hnd: 34
Test #699: actionCount = 13, handCount = 35 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 35, hnd: 35
Test #700: actionCount = 13, handCount = 36 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 36, hnd: 36
Test #701: actionCount = 13, handCount = 37 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 37, hnd: 37
Test #702: actionCount = 13, handCount = 38 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 38, hnd: 38
Test #703: actionCount = 13, handCount = 39 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 39, hnd: 39
Test #704: actionCount = 13, handCount = 40 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 40, hnd: 40
Test #705: actionCount = 13, handCount = 41 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 41, hnd: 41
Test #706: actionCount = 13, handCount = 42 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 42, hnd: 42
Test #707: actionCount = 13, handCount = 43 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 43, hnd: 43
Test #708: actionCount = 13, handCount = 44 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 44, hnd: 44
Test #709: actionCount = 13, handCount = 45 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 45, hnd: 45
Test #710: actionCount = 13, handCount = 46 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 46, hnd: 46
Test #711: actionCount = 13, handCount = 47 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 47, hnd: 47
Test #712: actionCount = 13, handCount = 48 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 48, hnd: 48
Test #713: actionCount = 13, handCount = 49 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 49, hnd: 49
Test #714: actionCount = 13, handCount = 50 | 	Passed: Exp act: 14, Act: 14; Exp hnd: 50, hnd: 50
Test #715: actionCount = 14, handCount = 0 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 0, hnd: 0
Test #716: actionCount = 14, handCount = 1 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 1, hnd: 1
Test #717: actionCount = 14, handCount = 2 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 2, hnd: 2
Test #718: actionCount = 14, handCount = 3 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 3, hnd: 3
Test #719: actionCount = 14, handCount = 4 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 4, hnd: 4
Test #720: actionCount = 14, handCount = 5 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 5, hnd: 5
Test #721: actionCount = 14, handCount = 6 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 6, hnd: 6
Test #722: actionCount = 14, handCount = 7 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 7, hnd: 7
Test #723: actionCount = 14, handCount = 8 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 8, hnd: 8
Test #724: actionCount = 14, handCount = 9 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 9, hnd: 9
Test #725: actionCount = 14, handCount = 10 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 10, hnd: 10
Test #726: actionCount = 14, handCount = 11 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 11, hnd: 11
Test #727: actionCount = 14, handCount = 12 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 12, hnd: 12
Test #728: actionCount = 14, handCount = 13 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 13, hnd: 13
Test #729: actionCount = 14, handCount = 14 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 14, hnd: 14
Test #730: actionCount = 14, handCount = 15 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 15, hnd: 15
Test #731: actionCount = 14, handCount = 16 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 16, hnd: 16
Test #732: actionCount = 14, handCount = 17 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 17, hnd: 17
Test #733: actionCount = 14, handCount = 18 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 18, hnd: 18
Test #734: actionCount = 14, handCount = 19 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 19, hnd: 19
Test #735: actionCount = 14, handCount = 20 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 20, hnd: 20
Test #736: actionCount = 14, handCount = 21 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 21, hnd: 21
Test #737: actionCount = 14, handCount = 22 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 22, hnd: 22
Test #738: actionCount = 14, handCount = 23 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 23, hnd: 23
Test #739: actionCount = 14, handCount = 24 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 24, hnd: 24
Test #740: actionCount = 14, handCount = 25 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 25, hnd: 25
Test #741: actionCount = 14, handCount = 26 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 26, hnd: 26
Test #742: actionCount = 14, handCount = 27 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 27, hnd: 27
Test #743: actionCount = 14, handCount = 28 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 28, hnd: 28
Test #744: actionCount = 14, handCount = 29 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 29, hnd: 29
Test #745: actionCount = 14, handCount = 30 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 30, hnd: 30
Test #746: actionCount = 14, handCount = 31 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 31, hnd: 31
Test #747: actionCount = 14, handCount = 32 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 32, hnd: 32
Test #748: actionCount = 14, handCount = 33 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 33, hnd: 33
Test #749: actionCount = 14, handCount = 34 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 34, hnd: 34
Test #750: actionCount = 14, handCount = 35 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 35, hnd: 35
Test #751: actionCount = 14, handCount = 36 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 36, hnd: 36
Test #752: actionCount = 14, handCount = 37 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 37, hnd: 37
Test #753: actionCount = 14, handCount = 38 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 38, hnd: 38
Test #754: actionCount = 14, handCount = 39 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 39, hnd: 39
Test #755: actionCount = 14, handCount = 40 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 40, hnd: 40
Test #756: actionCount = 14, handCount = 41 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 41, hnd: 41
Test #757: actionCount = 14, handCount = 42 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 42, hnd: 42
Test #758: actionCount = 14, handCount = 43 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 43, hnd: 43
Test #759: actionCount = 14, handCount = 44 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 44, hnd: 44
Test #760: actionCount = 14, handCount = 45 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 45, hnd: 45
Test #761: actionCount = 14, handCount = 46 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 46, hnd: 46
Test #762: actionCount = 14, handCount = 47 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 47, hnd: 47
Test #763: actionCount = 14, handCount = 48 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 48, hnd: 48
Test #764: actionCount = 14, handCount = 49 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 49, hnd: 49
Test #765: actionCount = 14, handCount = 50 | 	Passed: Exp act: 15, Act: 15; Exp hnd: 50, hnd: 50
Test #766: actionCount = 15, handCount = 0 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 0, hnd: 0
Test #767: actionCount = 15, handCount = 1 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 1, hnd: 1
Test #768: actionCount = 15, handCount = 2 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 2, hnd: 2
Test #769: actionCount = 15, handCount = 3 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 3, hnd: 3
Test #770: actionCount = 15, handCount = 4 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 4, hnd: 4
Test #771: actionCount = 15, handCount = 5 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 5, hnd: 5
Test #772: actionCount = 15, handCount = 6 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 6, hnd: 6
Test #773: actionCount = 15, handCount = 7 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 7, hnd: 7
Test #774: actionCount = 15, handCount = 8 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 8, hnd: 8
Test #775: actionCount = 15, handCount = 9 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 9, hnd: 9
Test #776: actionCount = 15, handCount = 10 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 10, hnd: 10
Test #777: actionCount = 15, handCount = 11 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 11, hnd: 11
Test #778: actionCount = 15, handCount = 12 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 12, hnd: 12
Test #779: actionCount = 15, handCount = 13 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 13, hnd: 13
Test #780: actionCount = 15, handCount = 14 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 14, hnd: 14
Test #781: actionCount = 15, handCount = 15 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 15, hnd: 15
Test #782: actionCount = 15, handCount = 16 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 16, hnd: 16
Test #783: actionCount = 15, handCount = 17 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 17, hnd: 17
Test #784: actionCount = 15, handCount = 18 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 18, hnd: 18
Test #785: actionCount = 15, handCount = 19 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 19, hnd: 19
Test #786: actionCount = 15, handCount = 20 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 20, hnd: 20
Test #787: actionCount = 15, handCount = 21 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 21, hnd: 21
Test #788: actionCount = 15, handCount = 22 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 22, hnd: 22
Test #789: actionCount = 15, handCount = 23 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 23, hnd: 23
Test #790: actionCount = 15, handCount = 24 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 24, hnd: 24
Test #791: actionCount = 15, handCount = 25 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 25, hnd: 25
Test #792: actionCount = 15, handCount = 26 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 26, hnd: 26
Test #793: actionCount = 15, handCount = 27 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 27, hnd: 27
Test #794: actionCount = 15, handCount = 28 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 28, hnd: 28
Test #795: actionCount = 15, handCount = 29 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 29, hnd: 29
Test #796: actionCount = 15, handCount = 30 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 30, hnd: 30
Test #797: actionCount = 15, handCount = 31 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 31, hnd: 31
Test #798: actionCount = 15, handCount = 32 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 32, hnd: 32
Test #799: actionCount = 15, handCount = 33 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 33, hnd: 33
Test #800: actionCount = 15, handCount = 34 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 34, hnd: 34
Test #801: actionCount = 15, handCount = 35 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 35, hnd: 35
Test #802: actionCount = 15, handCount = 36 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 36, hnd: 36
Test #803: actionCount = 15, handCount = 37 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 37, hnd: 37
Test #804: actionCount = 15, handCount = 38 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 38, hnd: 38
Test #805: actionCount = 15, handCount = 39 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 39, hnd: 39
Test #806: actionCount = 15, handCount = 40 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 40, hnd: 40
Test #807: actionCount = 15, handCount = 41 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 41, hnd: 41
Test #808: actionCount = 15, handCount = 42 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 42, hnd: 42
Test #809: actionCount = 15, handCount = 43 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 43, hnd: 43
Test #810: actionCount = 15, handCount = 44 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 44, hnd: 44
Test #811: actionCount = 15, handCount = 45 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 45, hnd: 45
Test #812: actionCount = 15, handCount = 46 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 46, hnd: 46
Test #813: actionCount = 15, handCount = 47 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 47, hnd: 47
Test #814: actionCount = 15, handCount = 48 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 48, hnd: 48
Test #815: actionCount = 15, handCount = 49 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 49, hnd: 49
Test #816: actionCount = 15, handCount = 50 | 	Passed: Exp act: 16, Act: 16; Exp hnd: 50, hnd: 50
Test #817: actionCount = 16, handCount = 0 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 0, hnd: 0
Test #818: actionCount = 16, handCount = 1 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 1, hnd: 1
Test #819: actionCount = 16, handCount = 2 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 2, hnd: 2
Test #820: actionCount = 16, handCount = 3 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 3, hnd: 3
Test #821: actionCount = 16, handCount = 4 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 4, hnd: 4
Test #822: actionCount = 16, handCount = 5 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 5, hnd: 5
Test #823: actionCount = 16, handCount = 6 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 6, hnd: 6
Test #824: actionCount = 16, handCount = 7 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 7, hnd: 7
Test #825: actionCount = 16, handCount = 8 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 8, hnd: 8
Test #826: actionCount = 16, handCount = 9 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 9, hnd: 9
Test #827: actionCount = 16, handCount = 10 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 10, hnd: 10
Test #828: actionCount = 16, handCount = 11 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 11, hnd: 11
Test #829: actionCount = 16, handCount = 12 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 12, hnd: 12
Test #830: actionCount = 16, handCount = 13 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 13, hnd: 13
Test #831: actionCount = 16, handCount = 14 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 14, hnd: 14
Test #832: actionCount = 16, handCount = 15 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 15, hnd: 15
Test #833: actionCount = 16, handCount = 16 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 16, hnd: 16
Test #834: actionCount = 16, handCount = 17 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 17, hnd: 17
Test #835: actionCount = 16, handCount = 18 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 18, hnd: 18
Test #836: actionCount = 16, handCount = 19 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 19, hnd: 19
Test #837: actionCount = 16, handCount = 20 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 20, hnd: 20
Test #838: actionCount = 16, handCount = 21 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 21, hnd: 21
Test #839: actionCount = 16, handCount = 22 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 22, hnd: 22
Test #840: actionCount = 16, handCount = 23 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 23, hnd: 23
Test #841: actionCount = 16, handCount = 24 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 24, hnd: 24
Test #842: actionCount = 16, handCount = 25 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 25, hnd: 25
Test #843: actionCount = 16, handCount = 26 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 26, hnd: 26
Test #844: actionCount = 16, handCount = 27 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 27, hnd: 27
Test #845: actionCount = 16, handCount = 28 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 28, hnd: 28
Test #846: actionCount = 16, handCount = 29 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 29, hnd: 29
Test #847: actionCount = 16, handCount = 30 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 30, hnd: 30
Test #848: actionCount = 16, handCount = 31 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 31, hnd: 31
Test #849: actionCount = 16, handCount = 32 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 32, hnd: 32
Test #850: actionCount = 16, handCount = 33 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 33, hnd: 33
Test #851: actionCount = 16, handCount = 34 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 34, hnd: 34
Test #852: actionCount = 16, handCount = 35 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 35, hnd: 35
Test #853: actionCount = 16, handCount = 36 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 36, hnd: 36
Test #854: actionCount = 16, handCount = 37 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 37, hnd: 37
Test #855: actionCount = 16, handCount = 38 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 38, hnd: 38
Test #856: actionCount = 16, handCount = 39 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 39, hnd: 39
Test #857: actionCount = 16, handCount = 40 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 40, hnd: 40
Test #858: actionCount = 16, handCount = 41 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 41, hnd: 41
Test #859: actionCount = 16, handCount = 42 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 42, hnd: 42
Test #860: actionCount = 16, handCount = 43 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 43, hnd: 43
Test #861: actionCount = 16, handCount = 44 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 44, hnd: 44
Test #862: actionCount = 16, handCount = 45 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 45, hnd: 45
Test #863: actionCount = 16, handCount = 46 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 46, hnd: 46
Test #864: actionCount = 16, handCount = 47 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 47, hnd: 47
Test #865: actionCount = 16, handCount = 48 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 48, hnd: 48
Test #866: actionCount = 16, handCount = 49 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 49, hnd: 49
Test #867: actionCount = 16, handCount = 50 | 	Passed: Exp act: 17, Act: 17; Exp hnd: 50, hnd: 50
Test #868: actionCount = 17, handCount = 0 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 0, hnd: 0
Test #869: actionCount = 17, handCount = 1 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 1, hnd: 1
Test #870: actionCount = 17, handCount = 2 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 2, hnd: 2
Test #871: actionCount = 17, handCount = 3 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 3, hnd: 3
Test #872: actionCount = 17, handCount = 4 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 4, hnd: 4
Test #873: actionCount = 17, handCount = 5 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 5, hnd: 5
Test #874: actionCount = 17, handCount = 6 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 6, hnd: 6
Test #875: actionCount = 17, handCount = 7 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 7, hnd: 7
Test #876: actionCount = 17, handCount = 8 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 8, hnd: 8
Test #877: actionCount = 17, handCount = 9 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 9, hnd: 9
Test #878: actionCount = 17, handCount = 10 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 10, hnd: 10
Test #879: actionCount = 17, handCount = 11 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 11, hnd: 11
Test #880: actionCount = 17, handCount = 12 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 12, hnd: 12
Test #881: actionCount = 17, handCount = 13 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 13, hnd: 13
Test #882: actionCount = 17, handCount = 14 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 14, hnd: 14
Test #883: actionCount = 17, handCount = 15 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 15, hnd: 15
Test #884: actionCount = 17, handCount = 16 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 16, hnd: 16
Test #885: actionCount = 17, handCount = 17 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 17, hnd: 17
Test #886: actionCount = 17, handCount = 18 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 18, hnd: 18
Test #887: actionCount = 17, handCount = 19 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 19, hnd: 19
Test #888: actionCount = 17, handCount = 20 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 20, hnd: 20
Test #889: actionCount = 17, handCount = 21 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 21, hnd: 21
Test #890: actionCount = 17, handCount = 22 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 22, hnd: 22
Test #891: actionCount = 17, handCount = 23 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 23, hnd: 23
Test #892: actionCount = 17, handCount = 24 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 24, hnd: 24
Test #893: actionCount = 17, handCount = 25 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 25, hnd: 25
Test #894: actionCount = 17, handCount = 26 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 26, hnd: 26
Test #895: actionCount = 17, handCount = 27 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 27, hnd: 27
Test #896: actionCount = 17, handCount = 28 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 28, hnd: 28
Test #897: actionCount = 17, handCount = 29 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 29, hnd: 29
Test #898: actionCount = 17, handCount = 30 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 30, hnd: 30
Test #899: actionCount = 17, handCount = 31 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 31, hnd: 31
Test #900: actionCount = 17, handCount = 32 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 32, hnd: 32
Test #901: actionCount = 17, handCount = 33 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 33, hnd: 33
Test #902: actionCount = 17, handCount = 34 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 34, hnd: 34
Test #903: actionCount = 17, handCount = 35 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 35, hnd: 35
Test #904: actionCount = 17, handCount = 36 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 36, hnd: 36
Test #905: actionCount = 17, handCount = 37 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 37, hnd: 37
Test #906: actionCount = 17, handCount = 38 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 38, hnd: 38
Test #907: actionCount = 17, handCount = 39 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 39, hnd: 39
Test #908: actionCount = 17, handCount = 40 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 40, hnd: 40
Test #909: actionCount = 17, handCount = 41 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 41, hnd: 41
Test #910: actionCount = 17, handCount = 42 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 42, hnd: 42
Test #911: actionCount = 17, handCount = 43 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 43, hnd: 43
Test #912: actionCount = 17, handCount = 44 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 44, hnd: 44
Test #913: actionCount = 17, handCount = 45 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 45, hnd: 45
Test #914: actionCount = 17, handCount = 46 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 46, hnd: 46
Test #915: actionCount = 17, handCount = 47 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 47, hnd: 47
Test #916: actionCount = 17, handCount = 48 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 48, hnd: 48
Test #917: actionCount = 17, handCount = 49 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 49, hnd: 49
Test #918: actionCount = 17, handCount = 50 | 	Passed: Exp act: 18, Act: 18; Exp hnd: 50, hnd: 50
Test #919: actionCount = 18, handCount = 0 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 0, hnd: 0
Test #920: actionCount = 18, handCount = 1 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 1, hnd: 1
Test #921: actionCount = 18, handCount = 2 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 2, hnd: 2
Test #922: actionCount = 18, handCount = 3 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 3, hnd: 3
Test #923: actionCount = 18, handCount = 4 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 4, hnd: 4
Test #924: actionCount = 18, handCount = 5 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 5, hnd: 5
Test #925: actionCount = 18, handCount = 6 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 6, hnd: 6
Test #926: actionCount = 18, handCount = 7 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 7, hnd: 7
Test #927: actionCount = 18, handCount = 8 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 8, hnd: 8
Test #928: actionCount = 18, handCount = 9 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 9, hnd: 9
Test #929: actionCount = 18, handCount = 10 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 10, hnd: 10
Test #930: actionCount = 18, handCount = 11 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 11, hnd: 11
Test #931: actionCount = 18, handCount = 12 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 12, hnd: 12
Test #932: actionCount = 18, handCount = 13 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 13, hnd: 13
Test #933: actionCount = 18, handCount = 14 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 14, hnd: 14
Test #934: actionCount = 18, handCount = 15 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 15, hnd: 15
Test #935: actionCount = 18, handCount = 16 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 16, hnd: 16
Test #936: actionCount = 18, handCount = 17 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 17, hnd: 17
Test #937: actionCount = 18, handCount = 18 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 18, hnd: 18
Test #938: actionCount = 18, handCount = 19 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 19, hnd: 19
Test #939: actionCount = 18, handCount = 20 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 20, hnd: 20
Test #940: actionCount = 18, handCount = 21 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 21, hnd: 21
Test #941: actionCount = 18, handCount = 22 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 22, hnd: 22
Test #942: actionCount = 18, handCount = 23 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 23, hnd: 23
Test #943: actionCount = 18, handCount = 24 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 24, hnd: 24
Test #944: actionCount = 18, handCount = 25 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 25, hnd: 25
Test #945: actionCount = 18, handCount = 26 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 26, hnd: 26
Test #946: actionCount = 18, handCount = 27 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 27, hnd: 27
Test #947: actionCount = 18, handCount = 28 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 28, hnd: 28
Test #948: actionCount = 18, handCount = 29 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 29, hnd: 29
Test #949: actionCount = 18, handCount = 30 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 30, hnd: 30
Test #950: actionCount = 18, handCount = 31 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 31, hnd: 31
Test #951: actionCount = 18, handCount = 32 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 32, hnd: 32
Test #952: actionCount = 18, handCount = 33 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 33, hnd: 33
Test #953: actionCount = 18, handCount = 34 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 34, hnd: 34
Test #954: actionCount = 18, handCount = 35 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 35, hnd: 35
Test #955: actionCount = 18, handCount = 36 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 36, hnd: 36
Test #956: actionCount = 18, handCount = 37 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 37, hnd: 37
Test #957: actionCount = 18, handCount = 38 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 38, hnd: 38
Test #958: actionCount = 18, handCount = 39 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 39, hnd: 39
Test #959: actionCount = 18, handCount = 40 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 40, hnd: 40
Test #960: actionCount = 18, handCount = 41 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 41, hnd: 41
Test #961: actionCount = 18, handCount = 42 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 42, hnd: 42
Test #962: actionCount = 18, handCount = 43 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 43, hnd: 43
Test #963: actionCount = 18, handCount = 44 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 44, hnd: 44
Test #964: actionCount = 18, handCount = 45 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 45, hnd: 45
Test #965: actionCount = 18, handCount = 46 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 46, hnd: 46
Test #966: actionCount = 18, handCount = 47 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 47, hnd: 47
Test #967: actionCount = 18, handCount = 48 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 48, hnd: 48
Test #968: actionCount = 18, handCount = 49 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 49, hnd: 49
Test #969: actionCount = 18, handCount = 50 | 	Passed: Exp act: 19, Act: 19; Exp hnd: 50, hnd: 50
Test #970: actionCount = 19, handCount = 0 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 0, hnd: 0
Test #971: actionCount = 19, handCount = 1 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 1, hnd: 1
Test #972: actionCount = 19, handCount = 2 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 2, hnd: 2
Test #973: actionCount = 19, handCount = 3 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 3, hnd: 3
Test #974: actionCount = 19, handCount = 4 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 4, hnd: 4
Test #975: actionCount = 19, handCount = 5 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 5, hnd: 5
Test #976: actionCount = 19, handCount = 6 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 6, hnd: 6
Test #977: actionCount = 19, handCount = 7 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 7, hnd: 7
Test #978: actionCount = 19, handCount = 8 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 8, hnd: 8
Test #979: actionCount = 19, handCount = 9 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 9, hnd: 9
Test #980: actionCount = 19, handCount = 10 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 10, hnd: 10
Test #981: actionCount = 19, handCount = 11 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 11, hnd: 11
Test #982: actionCount = 19, handCount = 12 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 12, hnd: 12
Test #983: actionCount = 19, handCount = 13 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 13, hnd: 13
Test #984: actionCount = 19, handCount = 14 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 14, hnd: 14
Test #985: actionCount = 19, handCount = 15 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 15, hnd: 15
Test #986: actionCount = 19, handCount = 16 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 16, hnd: 16
Test #987: actionCount = 19, handCount = 17 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 17, hnd: 17
Test #988: actionCount = 19, handCount = 18 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 18, hnd: 18
Test #989: actionCount = 19, handCount = 19 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 19, hnd: 19
Test #990: actionCount = 19, handCount = 20 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 20, hnd: 20
Test #991: actionCount = 19, handCount = 21 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 21, hnd: 21
Test #992: actionCount = 19, handCount = 22 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 22, hnd: 22
Test #993: actionCount = 19, handCount = 23 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 23, hnd: 23
Test #994: actionCount = 19, handCount = 24 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 24, hnd: 24
Test #995: actionCount = 19, handCount = 25 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 25, hnd: 25
Test #996: actionCount = 19, handCount = 26 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 26, hnd: 26
Test #997: actionCount = 19, handCount = 27 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 27, hnd: 27
Test #998: actionCount = 19, handCount = 28 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 28, hnd: 28
Test #999: actionCount = 19, handCount = 29 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 29, hnd: 29
Test #1000: actionCount = 19, handCount = 30 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 30, hnd: 30
Test #1001: actionCount = 19, handCount = 31 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 31, hnd: 31
Test #1002: actionCount = 19, handCount = 32 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 32, hnd: 32
Test #1003: actionCount = 19, handCount = 33 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 33, hnd: 33
Test #1004: actionCount = 19, handCount = 34 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 34, hnd: 34
Test #1005: actionCount = 19, handCount = 35 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 35, hnd: 35
Test #1006: actionCount = 19, handCount = 36 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 36, hnd: 36
Test #1007: actionCount = 19, handCount = 37 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 37, hnd: 37
Test #1008: actionCount = 19, handCount = 38 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 38, hnd: 38
Test #1009: actionCount = 19, handCount = 39 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 39, hnd: 39
Test #1010: actionCount = 19, handCount = 40 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 40, hnd: 40
Test #1011: actionCount = 19, handCount = 41 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 41, hnd: 41
Test #1012: actionCount = 19, handCount = 42 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 42, hnd: 42
Test #1013: actionCount = 19, handCount = 43 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 43, hnd: 43
Test #1014: actionCount = 19, handCount = 44 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 44, hnd: 44
Test #1015: actionCount = 19, handCount = 45 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 45, hnd: 45
Test #1016: actionCount = 19, handCount = 46 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 46, hnd: 46
Test #1017: actionCount = 19, handCount = 47 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 47, hnd: 47
Test #1018: actionCount = 19, handCount = 48 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 48, hnd: 48
Test #1019: actionCount = 19, handCount = 49 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 49, hnd: 49
Test #1020: actionCount = 19, handCount = 50 | 	Passed: Exp act: 20, Act: 20; Exp hnd: 50, hnd: 50
Test #1021: actionCount = 20, handCount = 0 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 0, hnd: 0
Test #1022: actionCount = 20, handCount = 1 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 1, hnd: 1
Test #1023: actionCount = 20, handCount = 2 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 2, hnd: 2
Test #1024: actionCount = 20, handCount = 3 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 3, hnd: 3
Test #1025: actionCount = 20, handCount = 4 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 4, hnd: 4
Test #1026: actionCount = 20, handCount = 5 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 5, hnd: 5
Test #1027: actionCount = 20, handCount = 6 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 6, hnd: 6
Test #1028: actionCount = 20, handCount = 7 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 7, hnd: 7
Test #1029: actionCount = 20, handCount = 8 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 8, hnd: 8
Test #1030: actionCount = 20, handCount = 9 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 9, hnd: 9
Test #1031: actionCount = 20, handCount = 10 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 10, hnd: 10
Test #1032: actionCount = 20, handCount = 11 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 11, hnd: 11
Test #1033: actionCount = 20, handCount = 12 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 12, hnd: 12
Test #1034: actionCount = 20, handCount = 13 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 13, hnd: 13
Test #1035: actionCount = 20, handCount = 14 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 14, hnd: 14
Test #1036: actionCount = 20, handCount = 15 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 15, hnd: 15
Test #1037: actionCount = 20, handCount = 16 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 16, hnd: 16
Test #1038: actionCount = 20, handCount = 17 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 17, hnd: 17
Test #1039: actionCount = 20, handCount = 18 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 18, hnd: 18
Test #1040: actionCount = 20, handCount = 19 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 19, hnd: 19
Test #1041: actionCount = 20, handCount = 20 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 20, hnd: 20
Test #1042: actionCount = 20, handCount = 21 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 21, hnd: 21
Test #1043: actionCount = 20, handCount = 22 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 22, hnd: 22
Test #1044: actionCount = 20, handCount = 23 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 23, hnd: 23
Test #1045: actionCount = 20, handCount = 24 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 24, hnd: 24
Test #1046: actionCount = 20, handCount = 25 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 25, hnd: 25
Test #1047: actionCount = 20, handCount = 26 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 26, hnd: 26
Test #1048: actionCount = 20, handCount = 27 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 27, hnd: 27
Test #1049: actionCount = 20, handCount = 28 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 28, hnd: 28
Test #1050: actionCount = 20, handCount = 29 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 29, hnd: 29
Test #1051: actionCount = 20, handCount = 30 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 30, hnd: 30
Test #1052: actionCount = 20, handCount = 31 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 31, hnd: 31
Test #1053: actionCount = 20, handCount = 32 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 32, hnd: 32
Test #1054: actionCount = 20, handCount = 33 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 33, hnd: 33
Test #1055: actionCount = 20, handCount = 34 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 34, hnd: 34
Test #1056: actionCount = 20, handCount = 35 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 35, hnd: 35
Test #1057: actionCount = 20, handCount = 36 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 36, hnd: 36
Test #1058: actionCount = 20, handCount = 37 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 37, hnd: 37
Test #1059: actionCount = 20, handCount = 38 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 38, hnd: 38
Test #1060: actionCount = 20, handCount = 39 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 39, hnd: 39
Test #1061: actionCount = 20, handCount = 40 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 40, hnd: 40
Test #1062: actionCount = 20, handCount = 41 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 41, hnd: 41
Test #1063: actionCount = 20, handCount = 42 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 42, hnd: 42
Test #1064: actionCount = 20, handCount = 43 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 43, hnd: 43
Test #1065: actionCount = 20, handCount = 44 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 44, hnd: 44
Test #1066: actionCount = 20, handCount = 45 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 45, hnd: 45
Test #1067: actionCount = 20, handCount = 46 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 46, hnd: 46
Test #1068: actionCount = 20, handCount = 47 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 47, hnd: 47
Test #1069: actionCount = 20, handCount = 48 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 48, hnd: 48
Test #1070: actionCount = 20, handCount = 49 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 49, hnd: 49
Test #1071: actionCount = 20, handCount = 50 | 	Passed: Exp act: 21, Act: 21; Exp hnd: 50, hnd: 50
Test #1072: actionCount = 21, handCount = 0 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 0, hnd: 0
Test #1073: actionCount = 21, handCount = 1 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 1, hnd: 1
Test #1074: actionCount = 21, handCount = 2 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 2, hnd: 2
Test #1075: actionCount = 21, handCount = 3 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 3, hnd: 3
Test #1076: actionCount = 21, handCount = 4 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 4, hnd: 4
Test #1077: actionCount = 21, handCount = 5 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 5, hnd: 5
Test #1078: actionCount = 21, handCount = 6 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 6, hnd: 6
Test #1079: actionCount = 21, handCount = 7 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 7, hnd: 7
Test #1080: actionCount = 21, handCount = 8 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 8, hnd: 8
Test #1081: actionCount = 21, handCount = 9 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 9, hnd: 9
Test #1082: actionCount = 21, handCount = 10 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 10, hnd: 10
Test #1083: actionCount = 21, handCount = 11 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 11, hnd: 11
Test #1084: actionCount = 21, handCount = 12 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 12, hnd: 12
Test #1085: actionCount = 21, handCount = 13 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 13, hnd: 13
Test #1086: actionCount = 21, handCount = 14 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 14, hnd: 14
Test #1087: actionCount = 21, handCount = 15 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 15, hnd: 15
Test #1088: actionCount = 21, handCount = 16 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 16, hnd: 16
Test #1089: actionCount = 21, handCount = 17 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 17, hnd: 17
Test #1090: actionCount = 21, handCount = 18 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 18, hnd: 18
Test #1091: actionCount = 21, handCount = 19 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 19, hnd: 19
Test #1092: actionCount = 21, handCount = 20 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 20, hnd: 20
Test #1093: actionCount = 21, handCount = 21 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 21, hnd: 21
Test #1094: actionCount = 21, handCount = 22 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 22, hnd: 22
Test #1095: actionCount = 21, handCount = 23 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 23, hnd: 23
Test #1096: actionCount = 21, handCount = 24 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 24, hnd: 24
Test #1097: actionCount = 21, handCount = 25 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 25, hnd: 25
Test #1098: actionCount = 21, handCount = 26 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 26, hnd: 26
Test #1099: actionCount = 21, handCount = 27 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 27, hnd: 27
Test #1100: actionCount = 21, handCount = 28 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 28, hnd: 28
Test #1101: actionCount = 21, handCount = 29 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 29, hnd: 29
Test #1102: actionCount = 21, handCount = 30 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 30, hnd: 30
Test #1103: actionCount = 21, handCount = 31 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 31, hnd: 31
Test #1104: actionCount = 21, handCount = 32 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 32, hnd: 32
Test #1105: actionCount = 21, handCount = 33 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 33, hnd: 33
Test #1106: actionCount = 21, handCount = 34 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 34, hnd: 34
Test #1107: actionCount = 21, handCount = 35 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 35, hnd: 35
Test #1108: actionCount = 21, handCount = 36 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 36, hnd: 36
Test #1109: actionCount = 21, handCount = 37 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 37, hnd: 37
Test #1110: actionCount = 21, handCount = 38 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 38, hnd: 38
Test #1111: actionCount = 21, handCount = 39 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 39, hnd: 39
Test #1112: actionCount = 21, handCount = 40 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 40, hnd: 40
Test #1113: actionCount = 21, handCount = 41 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 41, hnd: 41
Test #1114: actionCount = 21, handCount = 42 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 42, hnd: 42
Test #1115: actionCount = 21, handCount = 43 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 43, hnd: 43
Test #1116: actionCount = 21, handCount = 44 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 44, hnd: 44
Test #1117: actionCount = 21, handCount = 45 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 45, hnd: 45
Test #1118: actionCount = 21, handCount = 46 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 46, hnd: 46
Test #1119: actionCount = 21, handCount = 47 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 47, hnd: 47
Test #1120: actionCount = 21, handCount = 48 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 48, hnd: 48
Test #1121: actionCount = 21, handCount = 49 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 49, hnd: 49
Test #1122: actionCount = 21, handCount = 50 | 	Passed: Exp act: 22, Act: 22; Exp hnd: 50, hnd: 50
Test #1123: actionCount = 22, handCount = 0 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 0, hnd: 0
Test #1124: actionCount = 22, handCount = 1 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 1, hnd: 1
Test #1125: actionCount = 22, handCount = 2 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 2, hnd: 2
Test #1126: actionCount = 22, handCount = 3 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 3, hnd: 3
Test #1127: actionCount = 22, handCount = 4 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 4, hnd: 4
Test #1128: actionCount = 22, handCount = 5 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 5, hnd: 5
Test #1129: actionCount = 22, handCount = 6 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 6, hnd: 6
Test #1130: actionCount = 22, handCount = 7 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 7, hnd: 7
Test #1131: actionCount = 22, handCount = 8 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 8, hnd: 8
Test #1132: actionCount = 22, handCount = 9 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 9, hnd: 9
Test #1133: actionCount = 22, handCount = 10 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 10, hnd: 10
Test #1134: actionCount = 22, handCount = 11 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 11, hnd: 11
Test #1135: actionCount = 22, handCount = 12 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 12, hnd: 12
Test #1136: actionCount = 22, handCount = 13 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 13, hnd: 13
Test #1137: actionCount = 22, handCount = 14 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 14, hnd: 14
Test #1138: actionCount = 22, handCount = 15 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 15, hnd: 15
Test #1139: actionCount = 22, handCount = 16 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 16, hnd: 16
Test #1140: actionCount = 22, handCount = 17 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 17, hnd: 17
Test #1141: actionCount = 22, handCount = 18 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 18, hnd: 18
Test #1142: actionCount = 22, handCount = 19 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 19, hnd: 19
Test #1143: actionCount = 22, handCount = 20 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 20, hnd: 20
Test #1144: actionCount = 22, handCount = 21 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 21, hnd: 21
Test #1145: actionCount = 22, handCount = 22 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 22, hnd: 22
Test #1146: actionCount = 22, handCount = 23 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 23, hnd: 23
Test #1147: actionCount = 22, handCount = 24 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 24, hnd: 24
Test #1148: actionCount = 22, handCount = 25 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 25, hnd: 25
Test #1149: actionCount = 22, handCount = 26 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 26, hnd: 26
Test #1150: actionCount = 22, handCount = 27 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 27, hnd: 27
Test #1151: actionCount = 22, handCount = 28 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 28, hnd: 28
Test #1152: actionCount = 22, handCount = 29 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 29, hnd: 29
Test #1153: actionCount = 22, handCount = 30 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 30, hnd: 30
Test #1154: actionCount = 22, handCount = 31 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 31, hnd: 31
Test #1155: actionCount = 22, handCount = 32 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 32, hnd: 32
Test #1156: actionCount = 22, handCount = 33 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 33, hnd: 33
Test #1157: actionCount = 22, handCount = 34 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 34, hnd: 34
Test #1158: actionCount = 22, handCount = 35 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 35, hnd: 35
Test #1159: actionCount = 22, handCount = 36 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 36, hnd: 36
Test #1160: actionCount = 22, handCount = 37 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 37, hnd: 37
Test #1161: actionCount = 22, handCount = 38 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 38, hnd: 38
Test #1162: actionCount = 22, handCount = 39 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 39, hnd: 39
Test #1163: actionCount = 22, handCount = 40 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 40, hnd: 40
Test #1164: actionCount = 22, handCount = 41 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 41, hnd: 41
Test #1165: actionCount = 22, handCount = 42 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 42, hnd: 42
Test #1166: actionCount = 22, handCount = 43 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 43, hnd: 43
Test #1167: actionCount = 22, handCount = 44 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 44, hnd: 44
Test #1168: actionCount = 22, handCount = 45 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 45, hnd: 45
Test #1169: actionCount = 22, handCount = 46 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 46, hnd: 46
Test #1170: actionCount = 22, handCount = 47 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 47, hnd: 47
Test #1171: actionCount = 22, handCount = 48 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 48, hnd: 48
Test #1172: actionCount = 22, handCount = 49 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 49, hnd: 49
Test #1173: actionCount = 22, handCount = 50 | 	Passed: Exp act: 23, Act: 23; Exp hnd: 50, hnd: 50
Test #1174: actionCount = 23, handCount = 0 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 0, hnd: 0
Test #1175: actionCount = 23, handCount = 1 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 1, hnd: 1
Test #1176: actionCount = 23, handCount = 2 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 2, hnd: 2
Test #1177: actionCount = 23, handCount = 3 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 3, hnd: 3
Test #1178: actionCount = 23, handCount = 4 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 4, hnd: 4
Test #1179: actionCount = 23, handCount = 5 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 5, hnd: 5
Test #1180: actionCount = 23, handCount = 6 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 6, hnd: 6
Test #1181: actionCount = 23, handCount = 7 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 7, hnd: 7
Test #1182: actionCount = 23, handCount = 8 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 8, hnd: 8
Test #1183: actionCount = 23, handCount = 9 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 9, hnd: 9
Test #1184: actionCount = 23, handCount = 10 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 10, hnd: 10
Test #1185: actionCount = 23, handCount = 11 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 11, hnd: 11
Test #1186: actionCount = 23, handCount = 12 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 12, hnd: 12
Test #1187: actionCount = 23, handCount = 13 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 13, hnd: 13
Test #1188: actionCount = 23, handCount = 14 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 14, hnd: 14
Test #1189: actionCount = 23, handCount = 15 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 15, hnd: 15
Test #1190: actionCount = 23, handCount = 16 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 16, hnd: 16
Test #1191: actionCount = 23, handCount = 17 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 17, hnd: 17
Test #1192: actionCount = 23, handCount = 18 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 18, hnd: 18
Test #1193: actionCount = 23, handCount = 19 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 19, hnd: 19
Test #1194: actionCount = 23, handCount = 20 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 20, hnd: 20
Test #1195: actionCount = 23, handCount = 21 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 21, hnd: 21
Test #1196: actionCount = 23, handCount = 22 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 22, hnd: 22
Test #1197: actionCount = 23, handCount = 23 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 23, hnd: 23
Test #1198: actionCount = 23, handCount = 24 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 24, hnd: 24
Test #1199: actionCount = 23, handCount = 25 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 25, hnd: 25
Test #1200: actionCount = 23, handCount = 26 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 26, hnd: 26
Test #1201: actionCount = 23, handCount = 27 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 27, hnd: 27
Test #1202: actionCount = 23, handCount = 28 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 28, hnd: 28
Test #1203: actionCount = 23, handCount = 29 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 29, hnd: 29
Test #1204: actionCount = 23, handCount = 30 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 30, hnd: 30
Test #1205: actionCount = 23, handCount = 31 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 31, hnd: 31
Test #1206: actionCount = 23, handCount = 32 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 32, hnd: 32
Test #1207: actionCount = 23, handCount = 33 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 33, hnd: 33
Test #1208: actionCount = 23, handCount = 34 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 34, hnd: 34
Test #1209: actionCount = 23, handCount = 35 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 35, hnd: 35
Test #1210: actionCount = 23, handCount = 36 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 36, hnd: 36
Test #1211: actionCount = 23, handCount = 37 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 37, hnd: 37
Test #1212: actionCount = 23, handCount = 38 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 38, hnd: 38
Test #1213: actionCount = 23, handCount = 39 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 39, hnd: 39
Test #1214: actionCount = 23, handCount = 40 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 40, hnd: 40
Test #1215: actionCount = 23, handCount = 41 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 41, hnd: 41
Test #1216: actionCount = 23, handCount = 42 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 42, hnd: 42
Test #1217: actionCount = 23, handCount = 43 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 43, hnd: 43
Test #1218: actionCount = 23, handCount = 44 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 44, hnd: 44
Test #1219: actionCount = 23, handCount = 45 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 45, hnd: 45
Test #1220: actionCount = 23, handCount = 46 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 46, hnd: 46
Test #1221: actionCount = 23, handCount = 47 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 47, hnd: 47
Test #1222: actionCount = 23, handCount = 48 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 48, hnd: 48
Test #1223: actionCount = 23, handCount = 49 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 49, hnd: 49
Test #1224: actionCount = 23, handCount = 50 | 	Passed: Exp act: 24, Act: 24; Exp hnd: 50, hnd: 50
Test #1225: actionCount = 24, handCount = 0 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 0, hnd: 0
Test #1226: actionCount = 24, handCount = 1 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 1, hnd: 1
Test #1227: actionCount = 24, handCount = 2 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 2, hnd: 2
Test #1228: actionCount = 24, handCount = 3 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 3, hnd: 3
Test #1229: actionCount = 24, handCount = 4 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 4, hnd: 4
Test #1230: actionCount = 24, handCount = 5 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 5, hnd: 5
Test #1231: actionCount = 24, handCount = 6 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 6, hnd: 6
Test #1232: actionCount = 24, handCount = 7 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 7, hnd: 7
Test #1233: actionCount = 24, handCount = 8 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 8, hnd: 8
Test #1234: actionCount = 24, handCount = 9 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 9, hnd: 9
Test #1235: actionCount = 24, handCount = 10 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 10, hnd: 10
Test #1236: actionCount = 24, handCount = 11 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 11, hnd: 11
Test #1237: actionCount = 24, handCount = 12 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 12, hnd: 12
Test #1238: actionCount = 24, handCount = 13 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 13, hnd: 13
Test #1239: actionCount = 24, handCount = 14 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 14, hnd: 14
Test #1240: actionCount = 24, handCount = 15 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 15, hnd: 15
Test #1241: actionCount = 24, handCount = 16 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 16, hnd: 16
Test #1242: actionCount = 24, handCount = 17 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 17, hnd: 17
Test #1243: actionCount = 24, handCount = 18 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 18, hnd: 18
Test #1244: actionCount = 24, handCount = 19 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 19, hnd: 19
Test #1245: actionCount = 24, handCount = 20 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 20, hnd: 20
Test #1246: actionCount = 24, handCount = 21 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 21, hnd: 21
Test #1247: actionCount = 24, handCount = 22 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 22, hnd: 22
Test #1248: actionCount = 24, handCount = 23 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 23, hnd: 23
Test #1249: actionCount = 24, handCount = 24 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 24, hnd: 24
Test #1250: actionCount = 24, handCount = 25 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 25, hnd: 25
Test #1251: actionCount = 24, handCount = 26 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 26, hnd: 26
Test #1252: actionCount = 24, handCount = 27 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 27, hnd: 27
Test #1253: actionCount = 24, handCount = 28 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 28, hnd: 28
Test #1254: actionCount = 24, handCount = 29 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 29, hnd: 29
Test #1255: actionCount = 24, handCount = 30 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 30, hnd: 30
Test #1256: actionCount = 24, handCount = 31 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 31, hnd: 31
Test #1257: actionCount = 24, handCount = 32 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 32, hnd: 32
Test #1258: actionCount = 24, handCount = 33 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 33, hnd: 33
Test #1259: actionCount = 24, handCount = 34 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 34, hnd: 34
Test #1260: actionCount = 24, handCount = 35 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 35, hnd: 35
Test #1261: actionCount = 24, handCount = 36 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 36, hnd: 36
Test #1262: actionCount = 24, handCount = 37 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 37, hnd: 37
Test #1263: actionCount = 24, handCount = 38 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 38, hnd: 38
Test #1264: actionCount = 24, handCount = 39 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 39, hnd: 39
Test #1265: actionCount = 24, handCount = 40 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 40, hnd: 40
Test #1266: actionCount = 24, handCount = 41 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 41, hnd: 41
Test #1267: actionCount = 24, handCount = 42 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 42, hnd: 42
Test #1268: actionCount = 24, handCount = 43 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 43, hnd: 43
Test #1269: actionCount = 24, handCount = 44 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 44, hnd: 44
Test #1270: actionCount = 24, handCount = 45 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 45, hnd: 45
Test #1271: actionCount = 24, handCount = 46 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 46, hnd: 46
Test #1272: actionCount = 24, handCount = 47 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 47, hnd: 47
Test #1273: actionCount = 24, handCount = 48 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 48, hnd: 48
Test #1274: actionCount = 24, handCount = 49 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 49, hnd: 49
Test #1275: actionCount = 24, handCount = 50 | 	Passed: Exp act: 25, Act: 25; Exp hnd: 50, hnd: 50
Test #1276: actionCount = 25, handCount = 0 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 0, hnd: 0
Test #1277: actionCount = 25, handCount = 1 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 1, hnd: 1
Test #1278: actionCount = 25, handCount = 2 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 2, hnd: 2
Test #1279: actionCount = 25, handCount = 3 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 3, hnd: 3
Test #1280: actionCount = 25, handCount = 4 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 4, hnd: 4
Test #1281: actionCount = 25, handCount = 5 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 5, hnd: 5
Test #1282: actionCount = 25, handCount = 6 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 6, hnd: 6
Test #1283: actionCount = 25, handCount = 7 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 7, hnd: 7
Test #1284: actionCount = 25, handCount = 8 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 8, hnd: 8
Test #1285: actionCount = 25, handCount = 9 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 9, hnd: 9
Test #1286: actionCount = 25, handCount = 10 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 10, hnd: 10
Test #1287: actionCount = 25, handCount = 11 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 11, hnd: 11
Test #1288: actionCount = 25, handCount = 12 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 12, hnd: 12
Test #1289: actionCount = 25, handCount = 13 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 13, hnd: 13
Test #1290: actionCount = 25, handCount = 14 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 14, hnd: 14
Test #1291: actionCount = 25, handCount = 15 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 15, hnd: 15
Test #1292: actionCount = 25, handCount = 16 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 16, hnd: 16
Test #1293: actionCount = 25, handCount = 17 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 17, hnd: 17
Test #1294: actionCount = 25, handCount = 18 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 18, hnd: 18
Test #1295: actionCount = 25, handCount = 19 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 19, hnd: 19
Test #1296: actionCount = 25, handCount = 20 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 20, hnd: 20
Test #1297: actionCount = 25, handCount = 21 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 21, hnd: 21
Test #1298: actionCount = 25, handCount = 22 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 22, hnd: 22
Test #1299: actionCount = 25, handCount = 23 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 23, hnd: 23
Test #1300: actionCount = 25, handCount = 24 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 24, hnd: 24
Test #1301: actionCount = 25, handCount = 25 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 25, hnd: 25
Test #1302: actionCount = 25, handCount = 26 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 26, hnd: 26
Test #1303: actionCount = 25, handCount = 27 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 27, hnd: 27
Test #1304: actionCount = 25, handCount = 28 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 28, hnd: 28
Test #1305: actionCount = 25, handCount = 29 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 29, hnd: 29
Test #1306: actionCount = 25, handCount = 30 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 30, hnd: 30
Test #1307: actionCount = 25, handCount = 31 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 31, hnd: 31
Test #1308: actionCount = 25, handCount = 32 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 32, hnd: 32
Test #1309: actionCount = 25, handCount = 33 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 33, hnd: 33
Test #1310: actionCount = 25, handCount = 34 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 34, hnd: 34
Test #1311: actionCount = 25, handCount = 35 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 35, hnd: 35
Test #1312: actionCount = 25, handCount = 36 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 36, hnd: 36
Test #1313: actionCount = 25, handCount = 37 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 37, hnd: 37
Test #1314: actionCount = 25, handCount = 38 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 38, hnd: 38
Test #1315: actionCount = 25, handCount = 39 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 39, hnd: 39
Test #1316: actionCount = 25, handCount = 40 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 40, hnd: 40
Test #1317: actionCount = 25, handCount = 41 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 41, hnd: 41
Test #1318: actionCount = 25, handCount = 42 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 42, hnd: 42
Test #1319: actionCount = 25, handCount = 43 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 43, hnd: 43
Test #1320: actionCount = 25, handCount = 44 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 44, hnd: 44
Test #1321: actionCount = 25, handCount = 45 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 45, hnd: 45
Test #1322: actionCount = 25, handCount = 46 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 46, hnd: 46
Test #1323: actionCount = 25, handCount = 47 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 47, hnd: 47
Test #1324: actionCount = 25, handCount = 48 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 48, hnd: 48
Test #1325: actionCount = 25, handCount = 49 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 49, hnd: 49
Test #1326: actionCount = 25, handCount = 50 | 	Passed: Exp act: 26, Act: 26; Exp hnd: 50, hnd: 50
Test #1327: actionCount = 26, handCount = 0 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 0, hnd: 0
Test #1328: actionCount = 26, handCount = 1 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 1, hnd: 1
Test #1329: actionCount = 26, handCount = 2 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 2, hnd: 2
Test #1330: actionCount = 26, handCount = 3 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 3, hnd: 3
Test #1331: actionCount = 26, handCount = 4 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 4, hnd: 4
Test #1332: actionCount = 26, handCount = 5 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 5, hnd: 5
Test #1333: actionCount = 26, handCount = 6 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 6, hnd: 6
Test #1334: actionCount = 26, handCount = 7 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 7, hnd: 7
Test #1335: actionCount = 26, handCount = 8 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 8, hnd: 8
Test #1336: actionCount = 26, handCount = 9 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 9, hnd: 9
Test #1337: actionCount = 26, handCount = 10 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 10, hnd: 10
Test #1338: actionCount = 26, handCount = 11 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 11, hnd: 11
Test #1339: actionCount = 26, handCount = 12 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 12, hnd: 12
Test #1340: actionCount = 26, handCount = 13 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 13, hnd: 13
Test #1341: actionCount = 26, handCount = 14 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 14, hnd: 14
Test #1342: actionCount = 26, handCount = 15 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 15, hnd: 15
Test #1343: actionCount = 26, handCount = 16 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 16, hnd: 16
Test #1344: actionCount = 26, handCount = 17 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 17, hnd: 17
Test #1345: actionCount = 26, handCount = 18 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 18, hnd: 18
Test #1346: actionCount = 26, handCount = 19 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 19, hnd: 19
Test #1347: actionCount = 26, handCount = 20 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 20, hnd: 20
Test #1348: actionCount = 26, handCount = 21 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 21, hnd: 21
Test #1349: actionCount = 26, handCount = 22 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 22, hnd: 22
Test #1350: actionCount = 26, handCount = 23 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 23, hnd: 23
Test #1351: actionCount = 26, handCount = 24 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 24, hnd: 24
Test #1352: actionCount = 26, handCount = 25 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 25, hnd: 25
Test #1353: actionCount = 26, handCount = 26 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 26, hnd: 26
Test #1354: actionCount = 26, handCount = 27 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 27, hnd: 27
Test #1355: actionCount = 26, handCount = 28 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 28, hnd: 28
Test #1356: actionCount = 26, handCount = 29 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 29, hnd: 29
Test #1357: actionCount = 26, handCount = 30 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 30, hnd: 30
Test #1358: actionCount = 26, handCount = 31 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 31, hnd: 31
Test #1359: actionCount = 26, handCount = 32 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 32, hnd: 32
Test #1360: actionCount = 26, handCount = 33 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 33, hnd: 33
Test #1361: actionCount = 26, handCount = 34 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 34, hnd: 34
Test #1362: actionCount = 26, handCount = 35 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 35, hnd: 35
Test #1363: actionCount = 26, handCount = 36 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 36, hnd: 36
Test #1364: actionCount = 26, handCount = 37 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 37, hnd: 37
Test #1365: actionCount = 26, handCount = 38 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 38, hnd: 38
Test #1366: actionCount = 26, handCount = 39 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 39, hnd: 39
Test #1367: actionCount = 26, handCount = 40 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 40, hnd: 40
Test #1368: actionCount = 26, handCount = 41 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 41, hnd: 41
Test #1369: actionCount = 26, handCount = 42 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 42, hnd: 42
Test #1370: actionCount = 26, handCount = 43 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 43, hnd: 43
Test #1371: actionCount = 26, handCount = 44 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 44, hnd: 44
Test #1372: actionCount = 26, handCount = 45 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 45, hnd: 45
Test #1373: actionCount = 26, handCount = 46 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 46, hnd: 46
Test #1374: actionCount = 26, handCount = 47 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 47, hnd: 47
Test #1375: actionCount = 26, handCount = 48 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 48, hnd: 48
Test #1376: actionCount = 26, handCount = 49 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 49, hnd: 49
Test #1377: actionCount = 26, handCount = 50 | 	Passed: Exp act: 27, Act: 27; Exp hnd: 50, hnd: 50
Test #1378: actionCount = 27, handCount = 0 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 0, hnd: 0
Test #1379: actionCount = 27, handCount = 1 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 1, hnd: 1
Test #1380: actionCount = 27, handCount = 2 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 2, hnd: 2
Test #1381: actionCount = 27, handCount = 3 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 3, hnd: 3
Test #1382: actionCount = 27, handCount = 4 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 4, hnd: 4
Test #1383: actionCount = 27, handCount = 5 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 5, hnd: 5
Test #1384: actionCount = 27, handCount = 6 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 6, hnd: 6
Test #1385: actionCount = 27, handCount = 7 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 7, hnd: 7
Test #1386: actionCount = 27, handCount = 8 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 8, hnd: 8
Test #1387: actionCount = 27, handCount = 9 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 9, hnd: 9
Test #1388: actionCount = 27, handCount = 10 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 10, hnd: 10
Test #1389: actionCount = 27, handCount = 11 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 11, hnd: 11
Test #1390: actionCount = 27, handCount = 12 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 12, hnd: 12
Test #1391: actionCount = 27, handCount = 13 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 13, hnd: 13
Test #1392: actionCount = 27, handCount = 14 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 14, hnd: 14
Test #1393: actionCount = 27, handCount = 15 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 15, hnd: 15
Test #1394: actionCount = 27, handCount = 16 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 16, hnd: 16
Test #1395: actionCount = 27, handCount = 17 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 17, hnd: 17
Test #1396: actionCount = 27, handCount = 18 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 18, hnd: 18
Test #1397: actionCount = 27, handCount = 19 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 19, hnd: 19
Test #1398: actionCount = 27, handCount = 20 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 20, hnd: 20
Test #1399: actionCount = 27, handCount = 21 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 21, hnd: 21
Test #1400: actionCount = 27, handCount = 22 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 22, hnd: 22
Test #1401: actionCount = 27, handCount = 23 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 23, hnd: 23
Test #1402: actionCount = 27, handCount = 24 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 24, hnd: 24
Test #1403: actionCount = 27, handCount = 25 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 25, hnd: 25
Test #1404: actionCount = 27, handCount = 26 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 26, hnd: 26
Test #1405: actionCount = 27, handCount = 27 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 27, hnd: 27
Test #1406: actionCount = 27, handCount = 28 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 28, hnd: 28
Test #1407: actionCount = 27, handCount = 29 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 29, hnd: 29
Test #1408: actionCount = 27, handCount = 30 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 30, hnd: 30
Test #1409: actionCount = 27, handCount = 31 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 31, hnd: 31
Test #1410: actionCount = 27, handCount = 32 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 32, hnd: 32
Test #1411: actionCount = 27, handCount = 33 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 33, hnd: 33
Test #1412: actionCount = 27, handCount = 34 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 34, hnd: 34
Test #1413: actionCount = 27, handCount = 35 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 35, hnd: 35
Test #1414: actionCount = 27, handCount = 36 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 36, hnd: 36
Test #1415: actionCount = 27, handCount = 37 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 37, hnd: 37
Test #1416: actionCount = 27, handCount = 38 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 38, hnd: 38
Test #1417: actionCount = 27, handCount = 39 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 39, hnd: 39
Test #1418: actionCount = 27, handCount = 40 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 40, hnd: 40
Test #1419: actionCount = 27, handCount = 41 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 41, hnd: 41
Test #1420: actionCount = 27, handCount = 42 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 42, hnd: 42
Test #1421: actionCount = 27, handCount = 43 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 43, hnd: 43
Test #1422: actionCount = 27, handCount = 44 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 44, hnd: 44
Test #1423: actionCount = 27, handCount = 45 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 45, hnd: 45
Test #1424: actionCount = 27, handCount = 46 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 46, hnd: 46
Test #1425: actionCount = 27, handCount = 47 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 47, hnd: 47
Test #1426: actionCount = 27, handCount = 48 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 48, hnd: 48
Test #1427: actionCount = 27, handCount = 49 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 49, hnd: 49
Test #1428: actionCount = 27, handCount = 50 | 	Passed: Exp act: 28, Act: 28; Exp hnd: 50, hnd: 50
Test #1429: actionCount = 28, handCount = 0 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 0, hnd: 0
Test #1430: actionCount = 28, handCount = 1 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 1, hnd: 1
Test #1431: actionCount = 28, handCount = 2 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 2, hnd: 2
Test #1432: actionCount = 28, handCount = 3 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 3, hnd: 3
Test #1433: actionCount = 28, handCount = 4 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 4, hnd: 4
Test #1434: actionCount = 28, handCount = 5 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 5, hnd: 5
Test #1435: actionCount = 28, handCount = 6 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 6, hnd: 6
Test #1436: actionCount = 28, handCount = 7 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 7, hnd: 7
Test #1437: actionCount = 28, handCount = 8 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 8, hnd: 8
Test #1438: actionCount = 28, handCount = 9 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 9, hnd: 9
Test #1439: actionCount = 28, handCount = 10 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 10, hnd: 10
Test #1440: actionCount = 28, handCount = 11 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 11, hnd: 11
Test #1441: actionCount = 28, handCount = 12 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 12, hnd: 12
Test #1442: actionCount = 28, handCount = 13 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 13, hnd: 13
Test #1443: actionCount = 28, handCount = 14 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 14, hnd: 14
Test #1444: actionCount = 28, handCount = 15 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 15, hnd: 15
Test #1445: actionCount = 28, handCount = 16 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 16, hnd: 16
Test #1446: actionCount = 28, handCount = 17 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 17, hnd: 17
Test #1447: actionCount = 28, handCount = 18 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 18, hnd: 18
Test #1448: actionCount = 28, handCount = 19 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 19, hnd: 19
Test #1449: actionCount = 28, handCount = 20 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 20, hnd: 20
Test #1450: actionCount = 28, handCount = 21 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 21, hnd: 21
Test #1451: actionCount = 28, handCount = 22 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 22, hnd: 22
Test #1452: actionCount = 28, handCount = 23 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 23, hnd: 23
Test #1453: actionCount = 28, handCount = 24 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 24, hnd: 24
Test #1454: actionCount = 28, handCount = 25 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 25, hnd: 25
Test #1455: actionCount = 28, handCount = 26 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 26, hnd: 26
Test #1456: actionCount = 28, handCount = 27 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 27, hnd: 27
Test #1457: actionCount = 28, handCount = 28 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 28, hnd: 28
Test #1458: actionCount = 28, handCount = 29 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 29, hnd: 29
Test #1459: actionCount = 28, handCount = 30 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 30, hnd: 30
Test #1460: actionCount = 28, handCount = 31 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 31, hnd: 31
Test #1461: actionCount = 28, handCount = 32 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 32, hnd: 32
Test #1462: actionCount = 28, handCount = 33 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 33, hnd: 33
Test #1463: actionCount = 28, handCount = 34 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 34, hnd: 34
Test #1464: actionCount = 28, handCount = 35 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 35, hnd: 35
Test #1465: actionCount = 28, handCount = 36 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 36, hnd: 36
Test #1466: actionCount = 28, handCount = 37 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 37, hnd: 37
Test #1467: actionCount = 28, handCount = 38 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 38, hnd: 38
Test #1468: actionCount = 28, handCount = 39 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 39, hnd: 39
Test #1469: actionCount = 28, handCount = 40 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 40, hnd: 40
Test #1470: actionCount = 28, handCount = 41 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 41, hnd: 41
Test #1471: actionCount = 28, handCount = 42 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 42, hnd: 42
Test #1472: actionCount = 28, handCount = 43 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 43, hnd: 43
Test #1473: actionCount = 28, handCount = 44 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 44, hnd: 44
Test #1474: actionCount = 28, handCount = 45 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 45, hnd: 45
Test #1475: actionCount = 28, handCount = 46 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 46, hnd: 46
Test #1476: actionCount = 28, handCount = 47 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 47, hnd: 47
Test #1477: actionCount = 28, handCount = 48 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 48, hnd: 48
Test #1478: actionCount = 28, handCount = 49 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 49, hnd: 49
Test #1479: actionCount = 28, handCount = 50 | 	Passed: Exp act: 29, Act: 29; Exp hnd: 50, hnd: 50
Test #1480: actionCount = 29, handCount = 0 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 0, hnd: 0
Test #1481: actionCount = 29, handCount = 1 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 1, hnd: 1
Test #1482: actionCount = 29, handCount = 2 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 2, hnd: 2
Test #1483: actionCount = 29, handCount = 3 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 3, hnd: 3
Test #1484: actionCount = 29, handCount = 4 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 4, hnd: 4
Test #1485: actionCount = 29, handCount = 5 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 5, hnd: 5
Test #1486: actionCount = 29, handCount = 6 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 6, hnd: 6
Test #1487: actionCount = 29, handCount = 7 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 7, hnd: 7
Test #1488: actionCount = 29, handCount = 8 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 8, hnd: 8
Test #1489: actionCount = 29, handCount = 9 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 9, hnd: 9
Test #1490: actionCount = 29, handCount = 10 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 10, hnd: 10
Test #1491: actionCount = 29, handCount = 11 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 11, hnd: 11
Test #1492: actionCount = 29, handCount = 12 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 12, hnd: 12
Test #1493: actionCount = 29, handCount = 13 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 13, hnd: 13
Test #1494: actionCount = 29, handCount = 14 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 14, hnd: 14
Test #1495: actionCount = 29, handCount = 15 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 15, hnd: 15
Test #1496: actionCount = 29, handCount = 16 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 16, hnd: 16
Test #1497: actionCount = 29, handCount = 17 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 17, hnd: 17
Test #1498: actionCount = 29, handCount = 18 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 18, hnd: 18
Test #1499: actionCount = 29, handCount = 19 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 19, hnd: 19
Test #1500: actionCount = 29, handCount = 20 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 20, hnd: 20
Test #1501: actionCount = 29, handCount = 21 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 21, hnd: 21
Test #1502: actionCount = 29, handCount = 22 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 22, hnd: 22
Test #1503: actionCount = 29, handCount = 23 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 23, hnd: 23
Test #1504: actionCount = 29, handCount = 24 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 24, hnd: 24
Test #1505: actionCount = 29, handCount = 25 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 25, hnd: 25
Test #1506: actionCount = 29, handCount = 26 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 26, hnd: 26
Test #1507: actionCount = 29, handCount = 27 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 27, hnd: 27
Test #1508: actionCount = 29, handCount = 28 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 28, hnd: 28
Test #1509: actionCount = 29, handCount = 29 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 29, hnd: 29
Test #1510: actionCount = 29, handCount = 30 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 30, hnd: 30
Test #1511: actionCount = 29, handCount = 31 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 31, hnd: 31
Test #1512: actionCount = 29, handCount = 32 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 32, hnd: 32
Test #1513: actionCount = 29, handCount = 33 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 33, hnd: 33
Test #1514: actionCount = 29, handCount = 34 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 34, hnd: 34
Test #1515: actionCount = 29, handCount = 35 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 35, hnd: 35
Test #1516: actionCount = 29, handCount = 36 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 36, hnd: 36
Test #1517: actionCount = 29, handCount = 37 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 37, hnd: 37
Test #1518: actionCount = 29, handCount = 38 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 38, hnd: 38
Test #1519: actionCount = 29, handCount = 39 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 39, hnd: 39
Test #1520: actionCount = 29, handCount = 40 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 40, hnd: 40
Test #1521: actionCount = 29, handCount = 41 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 41, hnd: 41
Test #1522: actionCount = 29, handCount = 42 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 42, hnd: 42
Test #1523: actionCount = 29, handCount = 43 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 43, hnd: 43
Test #1524: actionCount = 29, handCount = 44 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 44, hnd: 44
Test #1525: actionCount = 29, handCount = 45 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 45, hnd: 45
Test #1526: actionCount = 29, handCount = 46 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 46, hnd: 46
Test #1527: actionCount = 29, handCount = 47 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 47, hnd: 47
Test #1528: actionCount = 29, handCount = 48 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 48, hnd: 48
Test #1529: actionCount = 29, handCount = 49 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 49, hnd: 49
Test #1530: actionCount = 29, handCount = 50 | 	Passed: Exp act: 30, Act: 30; Exp hnd: 50, hnd: 50
Test #1531: actionCount = 30, handCount = 0 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 0, hnd: 0
Test #1532: actionCount = 30, handCount = 1 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 1, hnd: 1
Test #1533: actionCount = 30, handCount = 2 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 2, hnd: 2
Test #1534: actionCount = 30, handCount = 3 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 3, hnd: 3
Test #1535: actionCount = 30, handCount = 4 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 4, hnd: 4
Test #1536: actionCount = 30, handCount = 5 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 5, hnd: 5
Test #1537: actionCount = 30, handCount = 6 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 6, hnd: 6
Test #1538: actionCount = 30, handCount = 7 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 7, hnd: 7
Test #1539: actionCount = 30, handCount = 8 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 8, hnd: 8
Test #1540: actionCount = 30, handCount = 9 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 9, hnd: 9
Test #1541: actionCount = 30, handCount = 10 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 10, hnd: 10
Test #1542: actionCount = 30, handCount = 11 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 11, hnd: 11
Test #1543: actionCount = 30, handCount = 12 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 12, hnd: 12
Test #1544: actionCount = 30, handCount = 13 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 13, hnd: 13
Test #1545: actionCount = 30, handCount = 14 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 14, hnd: 14
Test #1546: actionCount = 30, handCount = 15 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 15, hnd: 15
Test #1547: actionCount = 30, handCount = 16 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 16, hnd: 16
Test #1548: actionCount = 30, handCount = 17 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 17, hnd: 17
Test #1549: actionCount = 30, handCount = 18 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 18, hnd: 18
Test #1550: actionCount = 30, handCount = 19 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 19, hnd: 19
Test #1551: actionCount = 30, handCount = 20 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 20, hnd: 20
Test #1552: actionCount = 30, handCount = 21 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 21, hnd: 21
Test #1553: actionCount = 30, handCount = 22 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 22, hnd: 22
Test #1554: actionCount = 30, handCount = 23 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 23, hnd: 23
Test #1555: actionCount = 30, handCount = 24 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 24, hnd: 24
Test #1556: actionCount = 30, handCount = 25 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 25, hnd: 25
Test #1557: actionCount = 30, handCount = 26 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 26, hnd: 26
Test #1558: actionCount = 30, handCount = 27 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 27, hnd: 27
Test #1559: actionCount = 30, handCount = 28 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 28, hnd: 28
Test #1560: actionCount = 30, handCount = 29 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 29, hnd: 29
Test #1561: actionCount = 30, handCount = 30 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 30, hnd: 30
Test #1562: actionCount = 30, handCount = 31 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 31, hnd: 31
Test #1563: actionCount = 30, handCount = 32 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 32, hnd: 32
Test #1564: actionCount = 30, handCount = 33 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 33, hnd: 33
Test #1565: actionCount = 30, handCount = 34 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 34, hnd: 34
Test #1566: actionCount = 30, handCount = 35 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 35, hnd: 35
Test #1567: actionCount = 30, handCount = 36 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 36, hnd: 36
Test #1568: actionCount = 30, handCount = 37 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 37, hnd: 37
Test #1569: actionCount = 30, handCount = 38 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 38, hnd: 38
Test #1570: actionCount = 30, handCount = 39 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 39, hnd: 39
Test #1571: actionCount = 30, handCount = 40 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 40, hnd: 40
Test #1572: actionCount = 30, handCount = 41 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 41, hnd: 41
Test #1573: actionCount = 30, handCount = 42 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 42, hnd: 42
Test #1574: actionCount = 30, handCount = 43 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 43, hnd: 43
Test #1575: actionCount = 30, handCount = 44 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 44, hnd: 44
Test #1576: actionCount = 30, handCount = 45 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 45, hnd: 45
Test #1577: actionCount = 30, handCount = 46 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 46, hnd: 46
Test #1578: actionCount = 30, handCount = 47 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 47, hnd: 47
Test #1579: actionCount = 30, handCount = 48 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 48, hnd: 48
Test #1580: actionCount = 30, handCount = 49 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 49, hnd: 49
Test #1581: actionCount = 30, handCount = 50 | 	Passed: Exp act: 31, Act: 31; Exp hnd: 50, hnd: 50
Test #1582: actionCount = 31, handCount = 0 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 0, hnd: 0
Test #1583: actionCount = 31, handCount = 1 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 1, hnd: 1
Test #1584: actionCount = 31, handCount = 2 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 2, hnd: 2
Test #1585: actionCount = 31, handCount = 3 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 3, hnd: 3
Test #1586: actionCount = 31, handCount = 4 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 4, hnd: 4
Test #1587: actionCount = 31, handCount = 5 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 5, hnd: 5
Test #1588: actionCount = 31, handCount = 6 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 6, hnd: 6
Test #1589: actionCount = 31, handCount = 7 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 7, hnd: 7
Test #1590: actionCount = 31, handCount = 8 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 8, hnd: 8
Test #1591: actionCount = 31, handCount = 9 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 9, hnd: 9
Test #1592: actionCount = 31, handCount = 10 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 10, hnd: 10
Test #1593: actionCount = 31, handCount = 11 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 11, hnd: 11
Test #1594: actionCount = 31, handCount = 12 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 12, hnd: 12
Test #1595: actionCount = 31, handCount = 13 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 13, hnd: 13
Test #1596: actionCount = 31, handCount = 14 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 14, hnd: 14
Test #1597: actionCount = 31, handCount = 15 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 15, hnd: 15
Test #1598: actionCount = 31, handCount = 16 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 16, hnd: 16
Test #1599: actionCount = 31, handCount = 17 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 17, hnd: 17
Test #1600: actionCount = 31, handCount = 18 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 18, hnd: 18
Test #1601: actionCount = 31, handCount = 19 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 19, hnd: 19
Test #1602: actionCount = 31, handCount = 20 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 20, hnd: 20
Test #1603: actionCount = 31, handCount = 21 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 21, hnd: 21
Test #1604: actionCount = 31, handCount = 22 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 22, hnd: 22
Test #1605: actionCount = 31, handCount = 23 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 23, hnd: 23
Test #1606: actionCount = 31, handCount = 24 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 24, hnd: 24
Test #1607: actionCount = 31, handCount = 25 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 25, hnd: 25
Test #1608: actionCount = 31, handCount = 26 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 26, hnd: 26
Test #1609: actionCount = 31, handCount = 27 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 27, hnd: 27
Test #1610: actionCount = 31, handCount = 28 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 28, hnd: 28
Test #1611: actionCount = 31, handCount = 29 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 29, hnd: 29
Test #1612: actionCount = 31, handCount = 30 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 30, hnd: 30
Test #1613: actionCount = 31, handCount = 31 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 31, hnd: 31
Test #1614: actionCount = 31, handCount = 32 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 32, hnd: 32
Test #1615: actionCount = 31, handCount = 33 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 33, hnd: 33
Test #1616: actionCount = 31, handCount = 34 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 34, hnd: 34
Test #1617: actionCount = 31, handCount = 35 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 35, hnd: 35
Test #1618: actionCount = 31, handCount = 36 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 36, hnd: 36
Test #1619: actionCount = 31, handCount = 37 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 37, hnd: 37
Test #1620: actionCount = 31, handCount = 38 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 38, hnd: 38
Test #1621: actionCount = 31, handCount = 39 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 39, hnd: 39
Test #1622: actionCount = 31, handCount = 40 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 40, hnd: 40
Test #1623: actionCount = 31, handCount = 41 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 41, hnd: 41
Test #1624: actionCount = 31, handCount = 42 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 42, hnd: 42
Test #1625: actionCount = 31, handCount = 43 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 43, hnd: 43
Test #1626: actionCount = 31, handCount = 44 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 44, hnd: 44
Test #1627: actionCount = 31, handCount = 45 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 45, hnd: 45
Test #1628: actionCount = 31, handCount = 46 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 46, hnd: 46
Test #1629: actionCount = 31, handCount = 47 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 47, hnd: 47
Test #1630: actionCount = 31, handCount = 48 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 48, hnd: 48
Test #1631: actionCount = 31, handCount = 49 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 49, hnd: 49
Test #1632: actionCount = 31, handCount = 50 | 	Passed: Exp act: 32, Act: 32; Exp hnd: 50, hnd: 50
Test #1633: actionCount = 32, handCount = 0 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 0, hnd: 0
Test #1634: actionCount = 32, handCount = 1 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 1, hnd: 1
Test #1635: actionCount = 32, handCount = 2 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 2, hnd: 2
Test #1636: actionCount = 32, handCount = 3 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 3, hnd: 3
Test #1637: actionCount = 32, handCount = 4 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 4, hnd: 4
Test #1638: actionCount = 32, handCount = 5 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 5, hnd: 5
Test #1639: actionCount = 32, handCount = 6 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 6, hnd: 6
Test #1640: actionCount = 32, handCount = 7 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 7, hnd: 7
Test #1641: actionCount = 32, handCount = 8 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 8, hnd: 8
Test #1642: actionCount = 32, handCount = 9 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 9, hnd: 9
Test #1643: actionCount = 32, handCount = 10 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 10, hnd: 10
Test #1644: actionCount = 32, handCount = 11 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 11, hnd: 11
Test #1645: actionCount = 32, handCount = 12 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 12, hnd: 12
Test #1646: actionCount = 32, handCount = 13 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 13, hnd: 13
Test #1647: actionCount = 32, handCount = 14 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 14, hnd: 14
Test #1648: actionCount = 32, handCount = 15 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 15, hnd: 15
Test #1649: actionCount = 32, handCount = 16 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 16, hnd: 16
Test #1650: actionCount = 32, handCount = 17 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 17, hnd: 17
Test #1651: actionCount = 32, handCount = 18 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 18, hnd: 18
Test #1652: actionCount = 32, handCount = 19 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 19, hnd: 19
Test #1653: actionCount = 32, handCount = 20 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 20, hnd: 20
Test #1654: actionCount = 32, handCount = 21 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 21, hnd: 21
Test #1655: actionCount = 32, handCount = 22 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 22, hnd: 22
Test #1656: actionCount = 32, handCount = 23 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 23, hnd: 23
Test #1657: actionCount = 32, handCount = 24 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 24, hnd: 24
Test #1658: actionCount = 32, handCount = 25 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 25, hnd: 25
Test #1659: actionCount = 32, handCount = 26 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 26, hnd: 26
Test #1660: actionCount = 32, handCount = 27 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 27, hnd: 27
Test #1661: actionCount = 32, handCount = 28 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 28, hnd: 28
Test #1662: actionCount = 32, handCount = 29 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 29, hnd: 29
Test #1663: actionCount = 32, handCount = 30 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 30, hnd: 30
Test #1664: actionCount = 32, handCount = 31 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 31, hnd: 31
Test #1665: actionCount = 32, handCount = 32 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 32, hnd: 32
Test #1666: actionCount = 32, handCount = 33 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 33, hnd: 33
Test #1667: actionCount = 32, handCount = 34 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 34, hnd: 34
Test #1668: actionCount = 32, handCount = 35 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 35, hnd: 35
Test #1669: actionCount = 32, handCount = 36 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 36, hnd: 36
Test #1670: actionCount = 32, handCount = 37 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 37, hnd: 37
Test #1671: actionCount = 32, handCount = 38 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 38, hnd: 38
Test #1672: actionCount = 32, handCount = 39 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 39, hnd: 39
Test #1673: actionCount = 32, handCount = 40 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 40, hnd: 40
Test #1674: actionCount = 32, handCount = 41 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 41, hnd: 41
Test #1675: actionCount = 32, handCount = 42 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 42, hnd: 42
Test #1676: actionCount = 32, handCount = 43 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 43, hnd: 43
Test #1677: actionCount = 32, handCount = 44 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 44, hnd: 44
Test #1678: actionCount = 32, handCount = 45 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 45, hnd: 45
Test #1679: actionCount = 32, handCount = 46 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 46, hnd: 46
Test #1680: actionCount = 32, handCount = 47 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 47, hnd: 47
Test #1681: actionCount = 32, handCount = 48 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 48, hnd: 48
Test #1682: actionCount = 32, handCount = 49 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 49, hnd: 49
Test #1683: actionCount = 32, handCount = 50 | 	Passed: Exp act: 33, Act: 33; Exp hnd: 50, hnd: 50
Test #1684: actionCount = 33, handCount = 0 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 0, hnd: 0
Test #1685: actionCount = 33, handCount = 1 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 1, hnd: 1
Test #1686: actionCount = 33, handCount = 2 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 2, hnd: 2
Test #1687: actionCount = 33, handCount = 3 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 3, hnd: 3
Test #1688: actionCount = 33, handCount = 4 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 4, hnd: 4
Test #1689: actionCount = 33, handCount = 5 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 5, hnd: 5
Test #1690: actionCount = 33, handCount = 6 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 6, hnd: 6
Test #1691: actionCount = 33, handCount = 7 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 7, hnd: 7
Test #1692: actionCount = 33, handCount = 8 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 8, hnd: 8
Test #1693: actionCount = 33, handCount = 9 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 9, hnd: 9
Test #1694: actionCount = 33, handCount = 10 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 10, hnd: 10
Test #1695: actionCount = 33, handCount = 11 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 11, hnd: 11
Test #1696: actionCount = 33, handCount = 12 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 12, hnd: 12
Test #1697: actionCount = 33, handCount = 13 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 13, hnd: 13
Test #1698: actionCount = 33, handCount = 14 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 14, hnd: 14
Test #1699: actionCount = 33, handCount = 15 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 15, hnd: 15
Test #1700: actionCount = 33, handCount = 16 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 16, hnd: 16
Test #1701: actionCount = 33, handCount = 17 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 17, hnd: 17
Test #1702: actionCount = 33, handCount = 18 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 18, hnd: 18
Test #1703: actionCount = 33, handCount = 19 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 19, hnd: 19
Test #1704: actionCount = 33, handCount = 20 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 20, hnd: 20
Test #1705: actionCount = 33, handCount = 21 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 21, hnd: 21
Test #1706: actionCount = 33, handCount = 22 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 22, hnd: 22
Test #1707: actionCount = 33, handCount = 23 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 23, hnd: 23
Test #1708: actionCount = 33, handCount = 24 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 24, hnd: 24
Test #1709: actionCount = 33, handCount = 25 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 25, hnd: 25
Test #1710: actionCount = 33, handCount = 26 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 26, hnd: 26
Test #1711: actionCount = 33, handCount = 27 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 27, hnd: 27
Test #1712: actionCount = 33, handCount = 28 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 28, hnd: 28
Test #1713: actionCount = 33, handCount = 29 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 29, hnd: 29
Test #1714: actionCount = 33, handCount = 30 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 30, hnd: 30
Test #1715: actionCount = 33, handCount = 31 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 31, hnd: 31
Test #1716: actionCount = 33, handCount = 32 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 32, hnd: 32
Test #1717: actionCount = 33, handCount = 33 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 33, hnd: 33
Test #1718: actionCount = 33, handCount = 34 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 34, hnd: 34
Test #1719: actionCount = 33, handCount = 35 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 35, hnd: 35
Test #1720: actionCount = 33, handCount = 36 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 36, hnd: 36
Test #1721: actionCount = 33, handCount = 37 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 37, hnd: 37
Test #1722: actionCount = 33, handCount = 38 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 38, hnd: 38
Test #1723: actionCount = 33, handCount = 39 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 39, hnd: 39
Test #1724: actionCount = 33, handCount = 40 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 40, hnd: 40
Test #1725: actionCount = 33, handCount = 41 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 41, hnd: 41
Test #1726: actionCount = 33, handCount = 42 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 42, hnd: 42
Test #1727: actionCount = 33, handCount = 43 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 43, hnd: 43
Test #1728: actionCount = 33, handCount = 44 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 44, hnd: 44
Test #1729: actionCount = 33, handCount = 45 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 45, hnd: 45
Test #1730: actionCount = 33, handCount = 46 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 46, hnd: 46
Test #1731: actionCount = 33, handCount = 47 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 47, hnd: 47
Test #1732: actionCount = 33, handCount = 48 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 48, hnd: 48
Test #1733: actionCount = 33, handCount = 49 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 49, hnd: 49
Test #1734: actionCount = 33, handCount = 50 | 	Passed: Exp act: 34, Act: 34; Exp hnd: 50, hnd: 50
Test #1735: actionCount = 34, handCount = 0 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 0, hnd: 0
Test #1736: actionCount = 34, handCount = 1 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 1, hnd: 1
Test #1737: actionCount = 34, handCount = 2 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 2, hnd: 2
Test #1738: actionCount = 34, handCount = 3 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 3, hnd: 3
Test #1739: actionCount = 34, handCount = 4 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 4, hnd: 4
Test #1740: actionCount = 34, handCount = 5 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 5, hnd: 5
Test #1741: actionCount = 34, handCount = 6 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 6, hnd: 6
Test #1742: actionCount = 34, handCount = 7 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 7, hnd: 7
Test #1743: actionCount = 34, handCount = 8 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 8, hnd: 8
Test #1744: actionCount = 34, handCount = 9 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 9, hnd: 9
Test #1745: actionCount = 34, handCount = 10 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 10, hnd: 10
Test #1746: actionCount = 34, handCount = 11 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 11, hnd: 11
Test #1747: actionCount = 34, handCount = 12 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 12, hnd: 12
Test #1748: actionCount = 34, handCount = 13 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 13, hnd: 13
Test #1749: actionCount = 34, handCount = 14 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 14, hnd: 14
Test #1750: actionCount = 34, handCount = 15 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 15, hnd: 15
Test #1751: actionCount = 34, handCount = 16 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 16, hnd: 16
Test #1752: actionCount = 34, handCount = 17 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 17, hnd: 17
Test #1753: actionCount = 34, handCount = 18 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 18, hnd: 18
Test #1754: actionCount = 34, handCount = 19 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 19, hnd: 19
Test #1755: actionCount = 34, handCount = 20 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 20, hnd: 20
Test #1756: actionCount = 34, handCount = 21 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 21, hnd: 21
Test #1757: actionCount = 34, handCount = 22 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 22, hnd: 22
Test #1758: actionCount = 34, handCount = 23 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 23, hnd: 23
Test #1759: actionCount = 34, handCount = 24 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 24, hnd: 24
Test #1760: actionCount = 34, handCount = 25 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 25, hnd: 25
Test #1761: actionCount = 34, handCount = 26 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 26, hnd: 26
Test #1762: actionCount = 34, handCount = 27 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 27, hnd: 27
Test #1763: actionCount = 34, handCount = 28 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 28, hnd: 28
Test #1764: actionCount = 34, handCount = 29 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 29, hnd: 29
Test #1765: actionCount = 34, handCount = 30 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 30, hnd: 30
Test #1766: actionCount = 34, handCount = 31 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 31, hnd: 31
Test #1767: actionCount = 34, handCount = 32 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 32, hnd: 32
Test #1768: actionCount = 34, handCount = 33 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 33, hnd: 33
Test #1769: actionCount = 34, handCount = 34 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 34, hnd: 34
Test #1770: actionCount = 34, handCount = 35 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 35, hnd: 35
Test #1771: actionCount = 34, handCount = 36 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 36, hnd: 36
Test #1772: actionCount = 34, handCount = 37 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 37, hnd: 37
Test #1773: actionCount = 34, handCount = 38 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 38, hnd: 38
Test #1774: actionCount = 34, handCount = 39 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 39, hnd: 39
Test #1775: actionCount = 34, handCount = 40 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 40, hnd: 40
Test #1776: actionCount = 34, handCount = 41 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 41, hnd: 41
Test #1777: actionCount = 34, handCount = 42 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 42, hnd: 42
Test #1778: actionCount = 34, handCount = 43 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 43, hnd: 43
Test #1779: actionCount = 34, handCount = 44 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 44, hnd: 44
Test #1780: actionCount = 34, handCount = 45 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 45, hnd: 45
Test #1781: actionCount = 34, handCount = 46 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 46, hnd: 46
Test #1782: actionCount = 34, handCount = 47 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 47, hnd: 47
Test #1783: actionCount = 34, handCount = 48 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 48, hnd: 48
Test #1784: actionCount = 34, handCount = 49 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 49, hnd: 49
Test #1785: actionCount = 34, handCount = 50 | 	Passed: Exp act: 35, Act: 35; Exp hnd: 50, hnd: 50
Test #1786: actionCount = 35, handCount = 0 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 0, hnd: 0
Test #1787: actionCount = 35, handCount = 1 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 1, hnd: 1
Test #1788: actionCount = 35, handCount = 2 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 2, hnd: 2
Test #1789: actionCount = 35, handCount = 3 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 3, hnd: 3
Test #1790: actionCount = 35, handCount = 4 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 4, hnd: 4
Test #1791: actionCount = 35, handCount = 5 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 5, hnd: 5
Test #1792: actionCount = 35, handCount = 6 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 6, hnd: 6
Test #1793: actionCount = 35, handCount = 7 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 7, hnd: 7
Test #1794: actionCount = 35, handCount = 8 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 8, hnd: 8
Test #1795: actionCount = 35, handCount = 9 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 9, hnd: 9
Test #1796: actionCount = 35, handCount = 10 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 10, hnd: 10
Test #1797: actionCount = 35, handCount = 11 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 11, hnd: 11
Test #1798: actionCount = 35, handCount = 12 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 12, hnd: 12
Test #1799: actionCount = 35, handCount = 13 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 13, hnd: 13
Test #1800: actionCount = 35, handCount = 14 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 14, hnd: 14
Test #1801: actionCount = 35, handCount = 15 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 15, hnd: 15
Test #1802: actionCount = 35, handCount = 16 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 16, hnd: 16
Test #1803: actionCount = 35, handCount = 17 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 17, hnd: 17
Test #1804: actionCount = 35, handCount = 18 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 18, hnd: 18
Test #1805: actionCount = 35, handCount = 19 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 19, hnd: 19
Test #1806: actionCount = 35, handCount = 20 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 20, hnd: 20
Test #1807: actionCount = 35, handCount = 21 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 21, hnd: 21
Test #1808: actionCount = 35, handCount = 22 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 22, hnd: 22
Test #1809: actionCount = 35, handCount = 23 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 23, hnd: 23
Test #1810: actionCount = 35, handCount = 24 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 24, hnd: 24
Test #1811: actionCount = 35, handCount = 25 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 25, hnd: 25
Test #1812: actionCount = 35, handCount = 26 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 26, hnd: 26
Test #1813: actionCount = 35, handCount = 27 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 27, hnd: 27
Test #1814: actionCount = 35, handCount = 28 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 28, hnd: 28
Test #1815: actionCount = 35, handCount = 29 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 29, hnd: 29
Test #1816: actionCount = 35, handCount = 30 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 30, hnd: 30
Test #1817: actionCount = 35, handCount = 31 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 31, hnd: 31
Test #1818: actionCount = 35, handCount = 32 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 32, hnd: 32
Test #1819: actionCount = 35, handCount = 33 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 33, hnd: 33
Test #1820: actionCount = 35, handCount = 34 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 34, hnd: 34
Test #1821: actionCount = 35, handCount = 35 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 35, hnd: 35
Test #1822: actionCount = 35, handCount = 36 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 36, hnd: 36
Test #1823: actionCount = 35, handCount = 37 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 37, hnd: 37
Test #1824: actionCount = 35, handCount = 38 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 38, hnd: 38
Test #1825: actionCount = 35, handCount = 39 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 39, hnd: 39
Test #1826: actionCount = 35, handCount = 40 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 40, hnd: 40
Test #1827: actionCount = 35, handCount = 41 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 41, hnd: 41
Test #1828: actionCount = 35, handCount = 42 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 42, hnd: 42
Test #1829: actionCount = 35, handCount = 43 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 43, hnd: 43
Test #1830: actionCount = 35, handCount = 44 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 44, hnd: 44
Test #1831: actionCount = 35, handCount = 45 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 45, hnd: 45
Test #1832: actionCount = 35, handCount = 46 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 46, hnd: 46
Test #1833: actionCount = 35, handCount = 47 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 47, hnd: 47
Test #1834: actionCount = 35, handCount = 48 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 48, hnd: 48
Test #1835: actionCount = 35, handCount = 49 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 49, hnd: 49
Test #1836: actionCount = 35, handCount = 50 | 	Passed: Exp act: 36, Act: 36; Exp hnd: 50, hnd: 50
Test #1837: actionCount = 36, handCount = 0 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 0, hnd: 0
Test #1838: actionCount = 36, handCount = 1 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 1, hnd: 1
Test #1839: actionCount = 36, handCount = 2 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 2, hnd: 2
Test #1840: actionCount = 36, handCount = 3 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 3, hnd: 3
Test #1841: actionCount = 36, handCount = 4 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 4, hnd: 4
Test #1842: actionCount = 36, handCount = 5 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 5, hnd: 5
Test #1843: actionCount = 36, handCount = 6 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 6, hnd: 6
Test #1844: actionCount = 36, handCount = 7 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 7, hnd: 7
Test #1845: actionCount = 36, handCount = 8 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 8, hnd: 8
Test #1846: actionCount = 36, handCount = 9 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 9, hnd: 9
Test #1847: actionCount = 36, handCount = 10 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 10, hnd: 10
Test #1848: actionCount = 36, handCount = 11 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 11, hnd: 11
Test #1849: actionCount = 36, handCount = 12 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 12, hnd: 12
Test #1850: actionCount = 36, handCount = 13 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 13, hnd: 13
Test #1851: actionCount = 36, handCount = 14 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 14, hnd: 14
Test #1852: actionCount = 36, handCount = 15 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 15, hnd: 15
Test #1853: actionCount = 36, handCount = 16 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 16, hnd: 16
Test #1854: actionCount = 36, handCount = 17 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 17, hnd: 17
Test #1855: actionCount = 36, handCount = 18 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 18, hnd: 18
Test #1856: actionCount = 36, handCount = 19 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 19, hnd: 19
Test #1857: actionCount = 36, handCount = 20 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 20, hnd: 20
Test #1858: actionCount = 36, handCount = 21 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 21, hnd: 21
Test #1859: actionCount = 36, handCount = 22 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 22, hnd: 22
Test #1860: actionCount = 36, handCount = 23 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 23, hnd: 23
Test #1861: actionCount = 36, handCount = 24 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 24, hnd: 24
Test #1862: actionCount = 36, handCount = 25 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 25, hnd: 25
Test #1863: actionCount = 36, handCount = 26 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 26, hnd: 26
Test #1864: actionCount = 36, handCount = 27 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 27, hnd: 27
Test #1865: actionCount = 36, handCount = 28 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 28, hnd: 28
Test #1866: actionCount = 36, handCount = 29 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 29, hnd: 29
Test #1867: actionCount = 36, handCount = 30 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 30, hnd: 30
Test #1868: actionCount = 36, handCount = 31 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 31, hnd: 31
Test #1869: actionCount = 36, handCount = 32 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 32, hnd: 32
Test #1870: actionCount = 36, handCount = 33 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 33, hnd: 33
Test #1871: actionCount = 36, handCount = 34 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 34, hnd: 34
Test #1872: actionCount = 36, handCount = 35 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 35, hnd: 35
Test #1873: actionCount = 36, handCount = 36 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 36, hnd: 36
Test #1874: actionCount = 36, handCount = 37 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 37, hnd: 37
Test #1875: actionCount = 36, handCount = 38 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 38, hnd: 38
Test #1876: actionCount = 36, handCount = 39 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 39, hnd: 39
Test #1877: actionCount = 36, handCount = 40 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 40, hnd: 40
Test #1878: actionCount = 36, handCount = 41 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 41, hnd: 41
Test #1879: actionCount = 36, handCount = 42 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 42, hnd: 42
Test #1880: actionCount = 36, handCount = 43 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 43, hnd: 43
Test #1881: actionCount = 36, handCount = 44 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 44, hnd: 44
Test #1882: actionCount = 36, handCount = 45 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 45, hnd: 45
Test #1883: actionCount = 36, handCount = 46 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 46, hnd: 46
Test #1884: actionCount = 36, handCount = 47 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 47, hnd: 47
Test #1885: actionCount = 36, handCount = 48 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 48, hnd: 48
Test #1886: actionCount = 36, handCount = 49 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 49, hnd: 49
Test #1887: actionCount = 36, handCount = 50 | 	Passed: Exp act: 37, Act: 37; Exp hnd: 50, hnd: 50
Test #1888: actionCount = 37, handCount = 0 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 0, hnd: 0
Test #1889: actionCount = 37, handCount = 1 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 1, hnd: 1
Test #1890: actionCount = 37, handCount = 2 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 2, hnd: 2
Test #1891: actionCount = 37, handCount = 3 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 3, hnd: 3
Test #1892: actionCount = 37, handCount = 4 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 4, hnd: 4
Test #1893: actionCount = 37, handCount = 5 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 5, hnd: 5
Test #1894: actionCount = 37, handCount = 6 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 6, hnd: 6
Test #1895: actionCount = 37, handCount = 7 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 7, hnd: 7
Test #1896: actionCount = 37, handCount = 8 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 8, hnd: 8
Test #1897: actionCount = 37, handCount = 9 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 9, hnd: 9
Test #1898: actionCount = 37, handCount = 10 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 10, hnd: 10
Test #1899: actionCount = 37, handCount = 11 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 11, hnd: 11
Test #1900: actionCount = 37, handCount = 12 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 12, hnd: 12
Test #1901: actionCount = 37, handCount = 13 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 13, hnd: 13
Test #1902: actionCount = 37, handCount = 14 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 14, hnd: 14
Test #1903: actionCount = 37, handCount = 15 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 15, hnd: 15
Test #1904: actionCount = 37, handCount = 16 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 16, hnd: 16
Test #1905: actionCount = 37, handCount = 17 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 17, hnd: 17
Test #1906: actionCount = 37, handCount = 18 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 18, hnd: 18
Test #1907: actionCount = 37, handCount = 19 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 19, hnd: 19
Test #1908: actionCount = 37, handCount = 20 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 20, hnd: 20
Test #1909: actionCount = 37, handCount = 21 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 21, hnd: 21
Test #1910: actionCount = 37, handCount = 22 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 22, hnd: 22
Test #1911: actionCount = 37, handCount = 23 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 23, hnd: 23
Test #1912: actionCount = 37, handCount = 24 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 24, hnd: 24
Test #1913: actionCount = 37, handCount = 25 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 25, hnd: 25
Test #1914: actionCount = 37, handCount = 26 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 26, hnd: 26
Test #1915: actionCount = 37, handCount = 27 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 27, hnd: 27
Test #1916: actionCount = 37, handCount = 28 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 28, hnd: 28
Test #1917: actionCount = 37, handCount = 29 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 29, hnd: 29
Test #1918: actionCount = 37, handCount = 30 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 30, hnd: 30
Test #1919: actionCount = 37, handCount = 31 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 31, hnd: 31
Test #1920: actionCount = 37, handCount = 32 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 32, hnd: 32
Test #1921: actionCount = 37, handCount = 33 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 33, hnd: 33
Test #1922: actionCount = 37, handCount = 34 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 34, hnd: 34
Test #1923: actionCount = 37, handCount = 35 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 35, hnd: 35
Test #1924: actionCount = 37, handCount = 36 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 36, hnd: 36
Test #1925: actionCount = 37, handCount = 37 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 37, hnd: 37
Test #1926: actionCount = 37, handCount = 38 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 38, hnd: 38
Test #1927: actionCount = 37, handCount = 39 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 39, hnd: 39
Test #1928: actionCount = 37, handCount = 40 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 40, hnd: 40
Test #1929: actionCount = 37, handCount = 41 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 41, hnd: 41
Test #1930: actionCount = 37, handCount = 42 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 42, hnd: 42
Test #1931: actionCount = 37, handCount = 43 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 43, hnd: 43
Test #1932: actionCount = 37, handCount = 44 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 44, hnd: 44
Test #1933: actionCount = 37, handCount = 45 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 45, hnd: 45
Test #1934: actionCount = 37, handCount = 46 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 46, hnd: 46
Test #1935: actionCount = 37, handCount = 47 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 47, hnd: 47
Test #1936: actionCount = 37, handCount = 48 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 48, hnd: 48
Test #1937: actionCount = 37, handCount = 49 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 49, hnd: 49
Test #1938: actionCount = 37, handCount = 50 | 	Passed: Exp act: 38, Act: 38; Exp hnd: 50, hnd: 50
Test #1939: actionCount = 38, handCount = 0 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 0, hnd: 0
Test #1940: actionCount = 38, handCount = 1 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 1, hnd: 1
Test #1941: actionCount = 38, handCount = 2 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 2, hnd: 2
Test #1942: actionCount = 38, handCount = 3 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 3, hnd: 3
Test #1943: actionCount = 38, handCount = 4 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 4, hnd: 4
Test #1944: actionCount = 38, handCount = 5 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 5, hnd: 5
Test #1945: actionCount = 38, handCount = 6 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 6, hnd: 6
Test #1946: actionCount = 38, handCount = 7 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 7, hnd: 7
Test #1947: actionCount = 38, handCount = 8 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 8, hnd: 8
Test #1948: actionCount = 38, handCount = 9 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 9, hnd: 9
Test #1949: actionCount = 38, handCount = 10 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 10, hnd: 10
Test #1950: actionCount = 38, handCount = 11 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 11, hnd: 11
Test #1951: actionCount = 38, handCount = 12 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 12, hnd: 12
Test #1952: actionCount = 38, handCount = 13 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 13, hnd: 13
Test #1953: actionCount = 38, handCount = 14 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 14, hnd: 14
Test #1954: actionCount = 38, handCount = 15 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 15, hnd: 15
Test #1955: actionCount = 38, handCount = 16 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 16, hnd: 16
Test #1956: actionCount = 38, handCount = 17 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 17, hnd: 17
Test #1957: actionCount = 38, handCount = 18 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 18, hnd: 18
Test #1958: actionCount = 38, handCount = 19 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 19, hnd: 19
Test #1959: actionCount = 38, handCount = 20 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 20, hnd: 20
Test #1960: actionCount = 38, handCount = 21 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 21, hnd: 21
Test #1961: actionCount = 38, handCount = 22 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 22, hnd: 22
Test #1962: actionCount = 38, handCount = 23 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 23, hnd: 23
Test #1963: actionCount = 38, handCount = 24 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 24, hnd: 24
Test #1964: actionCount = 38, handCount = 25 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 25, hnd: 25
Test #1965: actionCount = 38, handCount = 26 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 26, hnd: 26
Test #1966: actionCount = 38, handCount = 27 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 27, hnd: 27
Test #1967: actionCount = 38, handCount = 28 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 28, hnd: 28
Test #1968: actionCount = 38, handCount = 29 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 29, hnd: 29
Test #1969: actionCount = 38, handCount = 30 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 30, hnd: 30
Test #1970: actionCount = 38, handCount = 31 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 31, hnd: 31
Test #1971: actionCount = 38, handCount = 32 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 32, hnd: 32
Test #1972: actionCount = 38, handCount = 33 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 33, hnd: 33
Test #1973: actionCount = 38, handCount = 34 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 34, hnd: 34
Test #1974: actionCount = 38, handCount = 35 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 35, hnd: 35
Test #1975: actionCount = 38, handCount = 36 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 36, hnd: 36
Test #1976: actionCount = 38, handCount = 37 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 37, hnd: 37
Test #1977: actionCount = 38, handCount = 38 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 38, hnd: 38
Test #1978: actionCount = 38, handCount = 39 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 39, hnd: 39
Test #1979: actionCount = 38, handCount = 40 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 40, hnd: 40
Test #1980: actionCount = 38, handCount = 41 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 41, hnd: 41
Test #1981: actionCount = 38, handCount = 42 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 42, hnd: 42
Test #1982: actionCount = 38, handCount = 43 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 43, hnd: 43
Test #1983: actionCount = 38, handCount = 44 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 44, hnd: 44
Test #1984: actionCount = 38, handCount = 45 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 45, hnd: 45
Test #1985: actionCount = 38, handCount = 46 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 46, hnd: 46
Test #1986: actionCount = 38, handCount = 47 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 47, hnd: 47
Test #1987: actionCount = 38, handCount = 48 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 48, hnd: 48
Test #1988: actionCount = 38, handCount = 49 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 49, hnd: 49
Test #1989: actionCount = 38, handCount = 50 | 	Passed: Exp act: 39, Act: 39; Exp hnd: 50, hnd: 50
Test #1990: actionCount = 39, handCount = 0 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 0, hnd: 0
Test #1991: actionCount = 39, handCount = 1 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 1, hnd: 1
Test #1992: actionCount = 39, handCount = 2 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 2, hnd: 2
Test #1993: actionCount = 39, handCount = 3 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 3, hnd: 3
Test #1994: actionCount = 39, handCount = 4 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 4, hnd: 4
Test #1995: actionCount = 39, handCount = 5 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 5, hnd: 5
Test #1996: actionCount = 39, handCount = 6 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 6, hnd: 6
Test #1997: actionCount = 39, handCount = 7 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 7, hnd: 7
Test #1998: actionCount = 39, handCount = 8 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 8, hnd: 8
Test #1999: actionCount = 39, handCount = 9 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 9, hnd: 9
Test #2000: actionCount = 39, handCount = 10 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 10, hnd: 10
Test #2001: actionCount = 39, handCount = 11 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 11, hnd: 11
Test #2002: actionCount = 39, handCount = 12 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 12, hnd: 12
Test #2003: actionCount = 39, handCount = 13 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 13, hnd: 13
Test #2004: actionCount = 39, handCount = 14 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 14, hnd: 14
Test #2005: actionCount = 39, handCount = 15 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 15, hnd: 15
Test #2006: actionCount = 39, handCount = 16 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 16, hnd: 16
Test #2007: actionCount = 39, handCount = 17 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 17, hnd: 17
Test #2008: actionCount = 39, handCount = 18 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 18, hnd: 18
Test #2009: actionCount = 39, handCount = 19 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 19, hnd: 19
Test #2010: actionCount = 39, handCount = 20 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 20, hnd: 20
Test #2011: actionCount = 39, handCount = 21 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 21, hnd: 21
Test #2012: actionCount = 39, handCount = 22 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 22, hnd: 22
Test #2013: actionCount = 39, handCount = 23 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 23, hnd: 23
Test #2014: actionCount = 39, handCount = 24 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 24, hnd: 24
Test #2015: actionCount = 39, handCount = 25 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 25, hnd: 25
Test #2016: actionCount = 39, handCount = 26 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 26, hnd: 26
Test #2017: actionCount = 39, handCount = 27 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 27, hnd: 27
Test #2018: actionCount = 39, handCount = 28 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 28, hnd: 28
Test #2019: actionCount = 39, handCount = 29 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 29, hnd: 29
Test #2020: actionCount = 39, handCount = 30 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 30, hnd: 30
Test #2021: actionCount = 39, handCount = 31 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 31, hnd: 31
Test #2022: actionCount = 39, handCount = 32 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 32, hnd: 32
Test #2023: actionCount = 39, handCount = 33 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 33, hnd: 33
Test #2024: actionCount = 39, handCount = 34 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 34, hnd: 34
Test #2025: actionCount = 39, handCount = 35 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 35, hnd: 35
Test #2026: actionCount = 39, handCount = 36 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 36, hnd: 36
Test #2027: actionCount = 39, handCount = 37 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 37, hnd: 37
Test #2028: actionCount = 39, handCount = 38 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 38, hnd: 38
Test #2029: actionCount = 39, handCount = 39 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 39, hnd: 39
Test #2030: actionCount = 39, handCount = 40 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 40, hnd: 40
Test #2031: actionCount = 39, handCount = 41 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 41, hnd: 41
Test #2032: actionCount = 39, handCount = 42 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 42, hnd: 42
Test #2033: actionCount = 39, handCount = 43 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 43, hnd: 43
Test #2034: actionCount = 39, handCount = 44 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 44, hnd: 44
Test #2035: actionCount = 39, handCount = 45 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 45, hnd: 45
Test #2036: actionCount = 39, handCount = 46 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 46, hnd: 46
Test #2037: actionCount = 39, handCount = 47 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 47, hnd: 47
Test #2038: actionCount = 39, handCount = 48 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 48, hnd: 48
Test #2039: actionCount = 39, handCount = 49 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 49, hnd: 49
Test #2040: actionCount = 39, handCount = 50 | 	Passed: Exp act: 40, Act: 40; Exp hnd: 50, hnd: 50
Test #2041: actionCount = 40, handCount = 0 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 0, hnd: 0
Test #2042: actionCount = 40, handCount = 1 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 1, hnd: 1
Test #2043: actionCount = 40, handCount = 2 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 2, hnd: 2
Test #2044: actionCount = 40, handCount = 3 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 3, hnd: 3
Test #2045: actionCount = 40, handCount = 4 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 4, hnd: 4
Test #2046: actionCount = 40, handCount = 5 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 5, hnd: 5
Test #2047: actionCount = 40, handCount = 6 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 6, hnd: 6
Test #2048: actionCount = 40, handCount = 7 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 7, hnd: 7
Test #2049: actionCount = 40, handCount = 8 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 8, hnd: 8
Test #2050: actionCount = 40, handCount = 9 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 9, hnd: 9
Test #2051: actionCount = 40, handCount = 10 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 10, hnd: 10
Test #2052: actionCount = 40, handCount = 11 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 11, hnd: 11
Test #2053: actionCount = 40, handCount = 12 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 12, hnd: 12
Test #2054: actionCount = 40, handCount = 13 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 13, hnd: 13
Test #2055: actionCount = 40, handCount = 14 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 14, hnd: 14
Test #2056: actionCount = 40, handCount = 15 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 15, hnd: 15
Test #2057: actionCount = 40, handCount = 16 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 16, hnd: 16
Test #2058: actionCount = 40, handCount = 17 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 17, hnd: 17
Test #2059: actionCount = 40, handCount = 18 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 18, hnd: 18
Test #2060: actionCount = 40, handCount = 19 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 19, hnd: 19
Test #2061: actionCount = 40, handCount = 20 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 20, hnd: 20
Test #2062: actionCount = 40, handCount = 21 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 21, hnd: 21
Test #2063: actionCount = 40, handCount = 22 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 22, hnd: 22
Test #2064: actionCount = 40, handCount = 23 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 23, hnd: 23
Test #2065: actionCount = 40, handCount = 24 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 24, hnd: 24
Test #2066: actionCount = 40, handCount = 25 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 25, hnd: 25
Test #2067: actionCount = 40, handCount = 26 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 26, hnd: 26
Test #2068: actionCount = 40, handCount = 27 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 27, hnd: 27
Test #2069: actionCount = 40, handCount = 28 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 28, hnd: 28
Test #2070: actionCount = 40, handCount = 29 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 29, hnd: 29
Test #2071: actionCount = 40, handCount = 30 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 30, hnd: 30
Test #2072: actionCount = 40, handCount = 31 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 31, hnd: 31
Test #2073: actionCount = 40, handCount = 32 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 32, hnd: 32
Test #2074: actionCount = 40, handCount = 33 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 33, hnd: 33
Test #2075: actionCount = 40, handCount = 34 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 34, hnd: 34
Test #2076: actionCount = 40, handCount = 35 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 35, hnd: 35
Test #2077: actionCount = 40, handCount = 36 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 36, hnd: 36
Test #2078: actionCount = 40, handCount = 37 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 37, hnd: 37
Test #2079: actionCount = 40, handCount = 38 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 38, hnd: 38
Test #2080: actionCount = 40, handCount = 39 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 39, hnd: 39
Test #2081: actionCount = 40, handCount = 40 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 40, hnd: 40
Test #2082: actionCount = 40, handCount = 41 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 41, hnd: 41
Test #2083: actionCount = 40, handCount = 42 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 42, hnd: 42
Test #2084: actionCount = 40, handCount = 43 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 43, hnd: 43
Test #2085: actionCount = 40, handCount = 44 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 44, hnd: 44
Test #2086: actionCount = 40, handCount = 45 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 45, hnd: 45
Test #2087: actionCount = 40, handCount = 46 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 46, hnd: 46
Test #2088: actionCount = 40, handCount = 47 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 47, hnd: 47
Test #2089: actionCount = 40, handCount = 48 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 48, hnd: 48
Test #2090: actionCount = 40, handCount = 49 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 49, hnd: 49
Test #2091: actionCount = 40, handCount = 50 | 	Passed: Exp act: 41, Act: 41; Exp hnd: 50, hnd: 50
Test #2092: actionCount = 41, handCount = 0 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 0, hnd: 0
Test #2093: actionCount = 41, handCount = 1 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 1, hnd: 1
Test #2094: actionCount = 41, handCount = 2 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 2, hnd: 2
Test #2095: actionCount = 41, handCount = 3 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 3, hnd: 3
Test #2096: actionCount = 41, handCount = 4 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 4, hnd: 4
Test #2097: actionCount = 41, handCount = 5 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 5, hnd: 5
Test #2098: actionCount = 41, handCount = 6 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 6, hnd: 6
Test #2099: actionCount = 41, handCount = 7 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 7, hnd: 7
Test #2100: actionCount = 41, handCount = 8 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 8, hnd: 8
Test #2101: actionCount = 41, handCount = 9 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 9, hnd: 9
Test #2102: actionCount = 41, handCount = 10 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 10, hnd: 10
Test #2103: actionCount = 41, handCount = 11 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 11, hnd: 11
Test #2104: actionCount = 41, handCount = 12 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 12, hnd: 12
Test #2105: actionCount = 41, handCount = 13 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 13, hnd: 13
Test #2106: actionCount = 41, handCount = 14 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 14, hnd: 14
Test #2107: actionCount = 41, handCount = 15 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 15, hnd: 15
Test #2108: actionCount = 41, handCount = 16 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 16, hnd: 16
Test #2109: actionCount = 41, handCount = 17 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 17, hnd: 17
Test #2110: actionCount = 41, handCount = 18 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 18, hnd: 18
Test #2111: actionCount = 41, handCount = 19 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 19, hnd: 19
Test #2112: actionCount = 41, handCount = 20 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 20, hnd: 20
Test #2113: actionCount = 41, handCount = 21 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 21, hnd: 21
Test #2114: actionCount = 41, handCount = 22 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 22, hnd: 22
Test #2115: actionCount = 41, handCount = 23 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 23, hnd: 23
Test #2116: actionCount = 41, handCount = 24 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 24, hnd: 24
Test #2117: actionCount = 41, handCount = 25 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 25, hnd: 25
Test #2118: actionCount = 41, handCount = 26 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 26, hnd: 26
Test #2119: actionCount = 41, handCount = 27 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 27, hnd: 27
Test #2120: actionCount = 41, handCount = 28 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 28, hnd: 28
Test #2121: actionCount = 41, handCount = 29 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 29, hnd: 29
Test #2122: actionCount = 41, handCount = 30 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 30, hnd: 30
Test #2123: actionCount = 41, handCount = 31 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 31, hnd: 31
Test #2124: actionCount = 41, handCount = 32 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 32, hnd: 32
Test #2125: actionCount = 41, handCount = 33 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 33, hnd: 33
Test #2126: actionCount = 41, handCount = 34 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 34, hnd: 34
Test #2127: actionCount = 41, handCount = 35 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 35, hnd: 35
Test #2128: actionCount = 41, handCount = 36 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 36, hnd: 36
Test #2129: actionCount = 41, handCount = 37 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 37, hnd: 37
Test #2130: actionCount = 41, handCount = 38 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 38, hnd: 38
Test #2131: actionCount = 41, handCount = 39 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 39, hnd: 39
Test #2132: actionCount = 41, handCount = 40 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 40, hnd: 40
Test #2133: actionCount = 41, handCount = 41 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 41, hnd: 41
Test #2134: actionCount = 41, handCount = 42 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 42, hnd: 42
Test #2135: actionCount = 41, handCount = 43 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 43, hnd: 43
Test #2136: actionCount = 41, handCount = 44 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 44, hnd: 44
Test #2137: actionCount = 41, handCount = 45 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 45, hnd: 45
Test #2138: actionCount = 41, handCount = 46 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 46, hnd: 46
Test #2139: actionCount = 41, handCount = 47 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 47, hnd: 47
Test #2140: actionCount = 41, handCount = 48 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 48, hnd: 48
Test #2141: actionCount = 41, handCount = 49 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 49, hnd: 49
Test #2142: actionCount = 41, handCount = 50 | 	Passed: Exp act: 42, Act: 42; Exp hnd: 50, hnd: 50
Test #2143: actionCount = 42, handCount = 0 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 0, hnd: 0
Test #2144: actionCount = 42, handCount = 1 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 1, hnd: 1
Test #2145: actionCount = 42, handCount = 2 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 2, hnd: 2
Test #2146: actionCount = 42, handCount = 3 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 3, hnd: 3
Test #2147: actionCount = 42, handCount = 4 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 4, hnd: 4
Test #2148: actionCount = 42, handCount = 5 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 5, hnd: 5
Test #2149: actionCount = 42, handCount = 6 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 6, hnd: 6
Test #2150: actionCount = 42, handCount = 7 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 7, hnd: 7
Test #2151: actionCount = 42, handCount = 8 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 8, hnd: 8
Test #2152: actionCount = 42, handCount = 9 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 9, hnd: 9
Test #2153: actionCount = 42, handCount = 10 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 10, hnd: 10
Test #2154: actionCount = 42, handCount = 11 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 11, hnd: 11
Test #2155: actionCount = 42, handCount = 12 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 12, hnd: 12
Test #2156: actionCount = 42, handCount = 13 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 13, hnd: 13
Test #2157: actionCount = 42, handCount = 14 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 14, hnd: 14
Test #2158: actionCount = 42, handCount = 15 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 15, hnd: 15
Test #2159: actionCount = 42, handCount = 16 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 16, hnd: 16
Test #2160: actionCount = 42, handCount = 17 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 17, hnd: 17
Test #2161: actionCount = 42, handCount = 18 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 18, hnd: 18
Test #2162: actionCount = 42, handCount = 19 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 19, hnd: 19
Test #2163: actionCount = 42, handCount = 20 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 20, hnd: 20
Test #2164: actionCount = 42, handCount = 21 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 21, hnd: 21
Test #2165: actionCount = 42, handCount = 22 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 22, hnd: 22
Test #2166: actionCount = 42, handCount = 23 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 23, hnd: 23
Test #2167: actionCount = 42, handCount = 24 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 24, hnd: 24
Test #2168: actionCount = 42, handCount = 25 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 25, hnd: 25
Test #2169: actionCount = 42, handCount = 26 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 26, hnd: 26
Test #2170: actionCount = 42, handCount = 27 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 27, hnd: 27
Test #2171: actionCount = 42, handCount = 28 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 28, hnd: 28
Test #2172: actionCount = 42, handCount = 29 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 29, hnd: 29
Test #2173: actionCount = 42, handCount = 30 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 30, hnd: 30
Test #2174: actionCount = 42, handCount = 31 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 31, hnd: 31
Test #2175: actionCount = 42, handCount = 32 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 32, hnd: 32
Test #2176: actionCount = 42, handCount = 33 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 33, hnd: 33
Test #2177: actionCount = 42, handCount = 34 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 34, hnd: 34
Test #2178: actionCount = 42, handCount = 35 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 35, hnd: 35
Test #2179: actionCount = 42, handCount = 36 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 36, hnd: 36
Test #2180: actionCount = 42, handCount = 37 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 37, hnd: 37
Test #2181: actionCount = 42, handCount = 38 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 38, hnd: 38
Test #2182: actionCount = 42, handCount = 39 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 39, hnd: 39
Test #2183: actionCount = 42, handCount = 40 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 40, hnd: 40
Test #2184: actionCount = 42, handCount = 41 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 41, hnd: 41
Test #2185: actionCount = 42, handCount = 42 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 42, hnd: 42
Test #2186: actionCount = 42, handCount = 43 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 43, hnd: 43
Test #2187: actionCount = 42, handCount = 44 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 44, hnd: 44
Test #2188: actionCount = 42, handCount = 45 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 45, hnd: 45
Test #2189: actionCount = 42, handCount = 46 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 46, hnd: 46
Test #2190: actionCount = 42, handCount = 47 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 47, hnd: 47
Test #2191: actionCount = 42, handCount = 48 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 48, hnd: 48
Test #2192: actionCount = 42, handCount = 49 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 49, hnd: 49
Test #2193: actionCount = 42, handCount = 50 | 	Passed: Exp act: 43, Act: 43; Exp hnd: 50, hnd: 50
Test #2194: actionCount = 43, handCount = 0 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 0, hnd: 0
Test #2195: actionCount = 43, handCount = 1 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 1, hnd: 1
Test #2196: actionCount = 43, handCount = 2 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 2, hnd: 2
Test #2197: actionCount = 43, handCount = 3 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 3, hnd: 3
Test #2198: actionCount = 43, handCount = 4 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 4, hnd: 4
Test #2199: actionCount = 43, handCount = 5 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 5, hnd: 5
Test #2200: actionCount = 43, handCount = 6 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 6, hnd: 6
Test #2201: actionCount = 43, handCount = 7 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 7, hnd: 7
Test #2202: actionCount = 43, handCount = 8 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 8, hnd: 8
Test #2203: actionCount = 43, handCount = 9 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 9, hnd: 9
Test #2204: actionCount = 43, handCount = 10 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 10, hnd: 10
Test #2205: actionCount = 43, handCount = 11 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 11, hnd: 11
Test #2206: actionCount = 43, handCount = 12 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 12, hnd: 12
Test #2207: actionCount = 43, handCount = 13 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 13, hnd: 13
Test #2208: actionCount = 43, handCount = 14 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 14, hnd: 14
Test #2209: actionCount = 43, handCount = 15 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 15, hnd: 15
Test #2210: actionCount = 43, handCount = 16 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 16, hnd: 16
Test #2211: actionCount = 43, handCount = 17 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 17, hnd: 17
Test #2212: actionCount = 43, handCount = 18 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 18, hnd: 18
Test #2213: actionCount = 43, handCount = 19 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 19, hnd: 19
Test #2214: actionCount = 43, handCount = 20 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 20, hnd: 20
Test #2215: actionCount = 43, handCount = 21 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 21, hnd: 21
Test #2216: actionCount = 43, handCount = 22 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 22, hnd: 22
Test #2217: actionCount = 43, handCount = 23 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 23, hnd: 23
Test #2218: actionCount = 43, handCount = 24 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 24, hnd: 24
Test #2219: actionCount = 43, handCount = 25 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 25, hnd: 25
Test #2220: actionCount = 43, handCount = 26 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 26, hnd: 26
Test #2221: actionCount = 43, handCount = 27 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 27, hnd: 27
Test #2222: actionCount = 43, handCount = 28 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 28, hnd: 28
Test #2223: actionCount = 43, handCount = 29 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 29, hnd: 29
Test #2224: actionCount = 43, handCount = 30 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 30, hnd: 30
Test #2225: actionCount = 43, handCount = 31 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 31, hnd: 31
Test #2226: actionCount = 43, handCount = 32 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 32, hnd: 32
Test #2227: actionCount = 43, handCount = 33 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 33, hnd: 33
Test #2228: actionCount = 43, handCount = 34 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 34, hnd: 34
Test #2229: actionCount = 43, handCount = 35 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 35, hnd: 35
Test #2230: actionCount = 43, handCount = 36 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 36, hnd: 36
Test #2231: actionCount = 43, handCount = 37 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 37, hnd: 37
Test #2232: actionCount = 43, handCount = 38 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 38, hnd: 38
Test #2233: actionCount = 43, handCount = 39 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 39, hnd: 39
Test #2234: actionCount = 43, handCount = 40 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 40, hnd: 40
Test #2235: actionCount = 43, handCount = 41 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 41, hnd: 41
Test #2236: actionCount = 43, handCount = 42 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 42, hnd: 42
Test #2237: actionCount = 43, handCount = 43 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 43, hnd: 43
Test #2238: actionCount = 43, handCount = 44 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 44, hnd: 44
Test #2239: actionCount = 43, handCount = 45 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 45, hnd: 45
Test #2240: actionCount = 43, handCount = 46 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 46, hnd: 46
Test #2241: actionCount = 43, handCount = 47 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 47, hnd: 47
Test #2242: actionCount = 43, handCount = 48 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 48, hnd: 48
Test #2243: actionCount = 43, handCount = 49 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 49, hnd: 49
Test #2244: actionCount = 43, handCount = 50 | 	Passed: Exp act: 44, Act: 44; Exp hnd: 50, hnd: 50
Test #2245: actionCount = 44, handCount = 0 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 0, hnd: 0
Test #2246: actionCount = 44, handCount = 1 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 1, hnd: 1
Test #2247: actionCount = 44, handCount = 2 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 2, hnd: 2
Test #2248: actionCount = 44, handCount = 3 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 3, hnd: 3
Test #2249: actionCount = 44, handCount = 4 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 4, hnd: 4
Test #2250: actionCount = 44, handCount = 5 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 5, hnd: 5
Test #2251: actionCount = 44, handCount = 6 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 6, hnd: 6
Test #2252: actionCount = 44, handCount = 7 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 7, hnd: 7
Test #2253: actionCount = 44, handCount = 8 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 8, hnd: 8
Test #2254: actionCount = 44, handCount = 9 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 9, hnd: 9
Test #2255: actionCount = 44, handCount = 10 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 10, hnd: 10
Test #2256: actionCount = 44, handCount = 11 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 11, hnd: 11
Test #2257: actionCount = 44, handCount = 12 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 12, hnd: 12
Test #2258: actionCount = 44, handCount = 13 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 13, hnd: 13
Test #2259: actionCount = 44, handCount = 14 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 14, hnd: 14
Test #2260: actionCount = 44, handCount = 15 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 15, hnd: 15
Test #2261: actionCount = 44, handCount = 16 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 16, hnd: 16
Test #2262: actionCount = 44, handCount = 17 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 17, hnd: 17
Test #2263: actionCount = 44, handCount = 18 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 18, hnd: 18
Test #2264: actionCount = 44, handCount = 19 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 19, hnd: 19
Test #2265: actionCount = 44, handCount = 20 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 20, hnd: 20
Test #2266: actionCount = 44, handCount = 21 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 21, hnd: 21
Test #2267: actionCount = 44, handCount = 22 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 22, hnd: 22
Test #2268: actionCount = 44, handCount = 23 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 23, hnd: 23
Test #2269: actionCount = 44, handCount = 24 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 24, hnd: 24
Test #2270: actionCount = 44, handCount = 25 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 25, hnd: 25
Test #2271: actionCount = 44, handCount = 26 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 26, hnd: 26
Test #2272: actionCount = 44, handCount = 27 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 27, hnd: 27
Test #2273: actionCount = 44, handCount = 28 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 28, hnd: 28
Test #2274: actionCount = 44, handCount = 29 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 29, hnd: 29
Test #2275: actionCount = 44, handCount = 30 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 30, hnd: 30
Test #2276: actionCount = 44, handCount = 31 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 31, hnd: 31
Test #2277: actionCount = 44, handCount = 32 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 32, hnd: 32
Test #2278: actionCount = 44, handCount = 33 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 33, hnd: 33
Test #2279: actionCount = 44, handCount = 34 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 34, hnd: 34
Test #2280: actionCount = 44, handCount = 35 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 35, hnd: 35
Test #2281: actionCount = 44, handCount = 36 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 36, hnd: 36
Test #2282: actionCount = 44, handCount = 37 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 37, hnd: 37
Test #2283: actionCount = 44, handCount = 38 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 38, hnd: 38
Test #2284: actionCount = 44, handCount = 39 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 39, hnd: 39
Test #2285: actionCount = 44, handCount = 40 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 40, hnd: 40
Test #2286: actionCount = 44, handCount = 41 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 41, hnd: 41
Test #2287: actionCount = 44, handCount = 42 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 42, hnd: 42
Test #2288: actionCount = 44, handCount = 43 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 43, hnd: 43
Test #2289: actionCount = 44, handCount = 44 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 44, hnd: 44
Test #2290: actionCount = 44, handCount = 45 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 45, hnd: 45
Test #2291: actionCount = 44, handCount = 46 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 46, hnd: 46
Test #2292: actionCount = 44, handCount = 47 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 47, hnd: 47
Test #2293: actionCount = 44, handCount = 48 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 48, hnd: 48
Test #2294: actionCount = 44, handCount = 49 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 49, hnd: 49
Test #2295: actionCount = 44, handCount = 50 | 	Passed: Exp act: 45, Act: 45; Exp hnd: 50, hnd: 50
Test #2296: actionCount = 45, handCount = 0 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 0, hnd: 0
Test #2297: actionCount = 45, handCount = 1 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 1, hnd: 1
Test #2298: actionCount = 45, handCount = 2 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 2, hnd: 2
Test #2299: actionCount = 45, handCount = 3 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 3, hnd: 3
Test #2300: actionCount = 45, handCount = 4 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 4, hnd: 4
Test #2301: actionCount = 45, handCount = 5 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 5, hnd: 5
Test #2302: actionCount = 45, handCount = 6 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 6, hnd: 6
Test #2303: actionCount = 45, handCount = 7 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 7, hnd: 7
Test #2304: actionCount = 45, handCount = 8 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 8, hnd: 8
Test #2305: actionCount = 45, handCount = 9 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 9, hnd: 9
Test #2306: actionCount = 45, handCount = 10 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 10, hnd: 10
Test #2307: actionCount = 45, handCount = 11 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 11, hnd: 11
Test #2308: actionCount = 45, handCount = 12 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 12, hnd: 12
Test #2309: actionCount = 45, handCount = 13 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 13, hnd: 13
Test #2310: actionCount = 45, handCount = 14 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 14, hnd: 14
Test #2311: actionCount = 45, handCount = 15 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 15, hnd: 15
Test #2312: actionCount = 45, handCount = 16 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 16, hnd: 16
Test #2313: actionCount = 45, handCount = 17 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 17, hnd: 17
Test #2314: actionCount = 45, handCount = 18 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 18, hnd: 18
Test #2315: actionCount = 45, handCount = 19 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 19, hnd: 19
Test #2316: actionCount = 45, handCount = 20 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 20, hnd: 20
Test #2317: actionCount = 45, handCount = 21 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 21, hnd: 21
Test #2318: actionCount = 45, handCount = 22 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 22, hnd: 22
Test #2319: actionCount = 45, handCount = 23 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 23, hnd: 23
Test #2320: actionCount = 45, handCount = 24 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 24, hnd: 24
Test #2321: actionCount = 45, handCount = 25 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 25, hnd: 25
Test #2322: actionCount = 45, handCount = 26 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 26, hnd: 26
Test #2323: actionCount = 45, handCount = 27 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 27, hnd: 27
Test #2324: actionCount = 45, handCount = 28 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 28, hnd: 28
Test #2325: actionCount = 45, handCount = 29 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 29, hnd: 29
Test #2326: actionCount = 45, handCount = 30 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 30, hnd: 30
Test #2327: actionCount = 45, handCount = 31 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 31, hnd: 31
Test #2328: actionCount = 45, handCount = 32 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 32, hnd: 32
Test #2329: actionCount = 45, handCount = 33 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 33, hnd: 33
Test #2330: actionCount = 45, handCount = 34 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 34, hnd: 34
Test #2331: actionCount = 45, handCount = 35 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 35, hnd: 35
Test #2332: actionCount = 45, handCount = 36 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 36, hnd: 36
Test #2333: actionCount = 45, handCount = 37 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 37, hnd: 37
Test #2334: actionCount = 45, handCount = 38 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 38, hnd: 38
Test #2335: actionCount = 45, handCount = 39 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 39, hnd: 39
Test #2336: actionCount = 45, handCount = 40 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 40, hnd: 40
Test #2337: actionCount = 45, handCount = 41 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 41, hnd: 41
Test #2338: actionCount = 45, handCount = 42 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 42, hnd: 42
Test #2339: actionCount = 45, handCount = 43 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 43, hnd: 43
Test #2340: actionCount = 45, handCount = 44 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 44, hnd: 44
Test #2341: actionCount = 45, handCount = 45 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 45, hnd: 45
Test #2342: actionCount = 45, handCount = 46 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 46, hnd: 46
Test #2343: actionCount = 45, handCount = 47 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 47, hnd: 47
Test #2344: actionCount = 45, handCount = 48 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 48, hnd: 48
Test #2345: actionCount = 45, handCount = 49 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 49, hnd: 49
Test #2346: actionCount = 45, handCount = 50 | 	Passed: Exp act: 46, Act: 46; Exp hnd: 50, hnd: 50
Test #2347: actionCount = 46, handCount = 0 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 0, hnd: 0
Test #2348: actionCount = 46, handCount = 1 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 1, hnd: 1
Test #2349: actionCount = 46, handCount = 2 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 2, hnd: 2
Test #2350: actionCount = 46, handCount = 3 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 3, hnd: 3
Test #2351: actionCount = 46, handCount = 4 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 4, hnd: 4
Test #2352: actionCount = 46, handCount = 5 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 5, hnd: 5
Test #2353: actionCount = 46, handCount = 6 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 6, hnd: 6
Test #2354: actionCount = 46, handCount = 7 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 7, hnd: 7
Test #2355: actionCount = 46, handCount = 8 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 8, hnd: 8
Test #2356: actionCount = 46, handCount = 9 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 9, hnd: 9
Test #2357: actionCount = 46, handCount = 10 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 10, hnd: 10
Test #2358: actionCount = 46, handCount = 11 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 11, hnd: 11
Test #2359: actionCount = 46, handCount = 12 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 12, hnd: 12
Test #2360: actionCount = 46, handCount = 13 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 13, hnd: 13
Test #2361: actionCount = 46, handCount = 14 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 14, hnd: 14
Test #2362: actionCount = 46, handCount = 15 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 15, hnd: 15
Test #2363: actionCount = 46, handCount = 16 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 16, hnd: 16
Test #2364: actionCount = 46, handCount = 17 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 17, hnd: 17
Test #2365: actionCount = 46, handCount = 18 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 18, hnd: 18
Test #2366: actionCount = 46, handCount = 19 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 19, hnd: 19
Test #2367: actionCount = 46, handCount = 20 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 20, hnd: 20
Test #2368: actionCount = 46, handCount = 21 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 21, hnd: 21
Test #2369: actionCount = 46, handCount = 22 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 22, hnd: 22
Test #2370: actionCount = 46, handCount = 23 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 23, hnd: 23
Test #2371: actionCount = 46, handCount = 24 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 24, hnd: 24
Test #2372: actionCount = 46, handCount = 25 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 25, hnd: 25
Test #2373: actionCount = 46, handCount = 26 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 26, hnd: 26
Test #2374: actionCount = 46, handCount = 27 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 27, hnd: 27
Test #2375: actionCount = 46, handCount = 28 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 28, hnd: 28
Test #2376: actionCount = 46, handCount = 29 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 29, hnd: 29
Test #2377: actionCount = 46, handCount = 30 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 30, hnd: 30
Test #2378: actionCount = 46, handCount = 31 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 31, hnd: 31
Test #2379: actionCount = 46, handCount = 32 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 32, hnd: 32
Test #2380: actionCount = 46, handCount = 33 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 33, hnd: 33
Test #2381: actionCount = 46, handCount = 34 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 34, hnd: 34
Test #2382: actionCount = 46, handCount = 35 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 35, hnd: 35
Test #2383: actionCount = 46, handCount = 36 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 36, hnd: 36
Test #2384: actionCount = 46, handCount = 37 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 37, hnd: 37
Test #2385: actionCount = 46, handCount = 38 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 38, hnd: 38
Test #2386: actionCount = 46, handCount = 39 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 39, hnd: 39
Test #2387: actionCount = 46, handCount = 40 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 40, hnd: 40
Test #2388: actionCount = 46, handCount = 41 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 41, hnd: 41
Test #2389: actionCount = 46, handCount = 42 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 42, hnd: 42
Test #2390: actionCount = 46, handCount = 43 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 43, hnd: 43
Test #2391: actionCount = 46, handCount = 44 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 44, hnd: 44
Test #2392: actionCount = 46, handCount = 45 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 45, hnd: 45
Test #2393: actionCount = 46, handCount = 46 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 46, hnd: 46
Test #2394: actionCount = 46, handCount = 47 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 47, hnd: 47
Test #2395: actionCount = 46, handCount = 48 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 48, hnd: 48
Test #2396: actionCount = 46, handCount = 49 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 49, hnd: 49
Test #2397: actionCount = 46, handCount = 50 | 	Passed: Exp act: 47, Act: 47; Exp hnd: 50, hnd: 50
Test #2398: actionCount = 47, handCount = 0 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 0, hnd: 0
Test #2399: actionCount = 47, handCount = 1 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 1, hnd: 1
Test #2400: actionCount = 47, handCount = 2 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 2, hnd: 2
Test #2401: actionCount = 47, handCount = 3 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 3, hnd: 3
Test #2402: actionCount = 47, handCount = 4 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 4, hnd: 4
Test #2403: actionCount = 47, handCount = 5 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 5, hnd: 5
Test #2404: actionCount = 47, handCount = 6 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 6, hnd: 6
Test #2405: actionCount = 47, handCount = 7 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 7, hnd: 7
Test #2406: actionCount = 47, handCount = 8 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 8, hnd: 8
Test #2407: actionCount = 47, handCount = 9 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 9, hnd: 9
Test #2408: actionCount = 47, handCount = 10 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 10, hnd: 10
Test #2409: actionCount = 47, handCount = 11 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 11, hnd: 11
Test #2410: actionCount = 47, handCount = 12 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 12, hnd: 12
Test #2411: actionCount = 47, handCount = 13 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 13, hnd: 13
Test #2412: actionCount = 47, handCount = 14 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 14, hnd: 14
Test #2413: actionCount = 47, handCount = 15 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 15, hnd: 15
Test #2414: actionCount = 47, handCount = 16 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 16, hnd: 16
Test #2415: actionCount = 47, handCount = 17 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 17, hnd: 17
Test #2416: actionCount = 47, handCount = 18 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 18, hnd: 18
Test #2417: actionCount = 47, handCount = 19 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 19, hnd: 19
Test #2418: actionCount = 47, handCount = 20 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 20, hnd: 20
Test #2419: actionCount = 47, handCount = 21 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 21, hnd: 21
Test #2420: actionCount = 47, handCount = 22 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 22, hnd: 22
Test #2421: actionCount = 47, handCount = 23 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 23, hnd: 23
Test #2422: actionCount = 47, handCount = 24 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 24, hnd: 24
Test #2423: actionCount = 47, handCount = 25 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 25, hnd: 25
Test #2424: actionCount = 47, handCount = 26 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 26, hnd: 26
Test #2425: actionCount = 47, handCount = 27 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 27, hnd: 27
Test #2426: actionCount = 47, handCount = 28 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 28, hnd: 28
Test #2427: actionCount = 47, handCount = 29 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 29, hnd: 29
Test #2428: actionCount = 47, handCount = 30 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 30, hnd: 30
Test #2429: actionCount = 47, handCount = 31 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 31, hnd: 31
Test #2430: actionCount = 47, handCount = 32 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 32, hnd: 32
Test #2431: actionCount = 47, handCount = 33 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 33, hnd: 33
Test #2432: actionCount = 47, handCount = 34 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 34, hnd: 34
Test #2433: actionCount = 47, handCount = 35 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 35, hnd: 35
Test #2434: actionCount = 47, handCount = 36 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 36, hnd: 36
Test #2435: actionCount = 47, handCount = 37 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 37, hnd: 37
Test #2436: actionCount = 47, handCount = 38 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 38, hnd: 38
Test #2437: actionCount = 47, handCount = 39 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 39, hnd: 39
Test #2438: actionCount = 47, handCount = 40 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 40, hnd: 40
Test #2439: actionCount = 47, handCount = 41 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 41, hnd: 41
Test #2440: actionCount = 47, handCount = 42 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 42, hnd: 42
Test #2441: actionCount = 47, handCount = 43 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 43, hnd: 43
Test #2442: actionCount = 47, handCount = 44 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 44, hnd: 44
Test #2443: actionCount = 47, handCount = 45 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 45, hnd: 45
Test #2444: actionCount = 47, handCount = 46 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 46, hnd: 46
Test #2445: actionCount = 47, handCount = 47 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 47, hnd: 47
Test #2446: actionCount = 47, handCount = 48 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 48, hnd: 48
Test #2447: actionCount = 47, handCount = 49 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 49, hnd: 49
Test #2448: actionCount = 47, handCount = 50 | 	Passed: Exp act: 48, Act: 48; Exp hnd: 50, hnd: 50
Test #2449: actionCount = 48, handCount = 0 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 0, hnd: 0
Test #2450: actionCount = 48, handCount = 1 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 1, hnd: 1
Test #2451: actionCount = 48, handCount = 2 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 2, hnd: 2
Test #2452: actionCount = 48, handCount = 3 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 3, hnd: 3
Test #2453: actionCount = 48, handCount = 4 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 4, hnd: 4
Test #2454: actionCount = 48, handCount = 5 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 5, hnd: 5
Test #2455: actionCount = 48, handCount = 6 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 6, hnd: 6
Test #2456: actionCount = 48, handCount = 7 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 7, hnd: 7
Test #2457: actionCount = 48, handCount = 8 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 8, hnd: 8
Test #2458: actionCount = 48, handCount = 9 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 9, hnd: 9
Test #2459: actionCount = 48, handCount = 10 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 10, hnd: 10
Test #2460: actionCount = 48, handCount = 11 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 11, hnd: 11
Test #2461: actionCount = 48, handCount = 12 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 12, hnd: 12
Test #2462: actionCount = 48, handCount = 13 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 13, hnd: 13
Test #2463: actionCount = 48, handCount = 14 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 14, hnd: 14
Test #2464: actionCount = 48, handCount = 15 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 15, hnd: 15
Test #2465: actionCount = 48, handCount = 16 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 16, hnd: 16
Test #2466: actionCount = 48, handCount = 17 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 17, hnd: 17
Test #2467: actionCount = 48, handCount = 18 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 18, hnd: 18
Test #2468: actionCount = 48, handCount = 19 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 19, hnd: 19
Test #2469: actionCount = 48, handCount = 20 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 20, hnd: 20
Test #2470: actionCount = 48, handCount = 21 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 21, hnd: 21
Test #2471: actionCount = 48, handCount = 22 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 22, hnd: 22
Test #2472: actionCount = 48, handCount = 23 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 23, hnd: 23
Test #2473: actionCount = 48, handCount = 24 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 24, hnd: 24
Test #2474: actionCount = 48, handCount = 25 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 25, hnd: 25
Test #2475: actionCount = 48, handCount = 26 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 26, hnd: 26
Test #2476: actionCount = 48, handCount = 27 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 27, hnd: 27
Test #2477: actionCount = 48, handCount = 28 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 28, hnd: 28
Test #2478: actionCount = 48, handCount = 29 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 29, hnd: 29
Test #2479: actionCount = 48, handCount = 30 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 30, hnd: 30
Test #2480: actionCount = 48, handCount = 31 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 31, hnd: 31
Test #2481: actionCount = 48, handCount = 32 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 32, hnd: 32
Test #2482: actionCount = 48, handCount = 33 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 33, hnd: 33
Test #2483: actionCount = 48, handCount = 34 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 34, hnd: 34
Test #2484: actionCount = 48, handCount = 35 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 35, hnd: 35
Test #2485: actionCount = 48, handCount = 36 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 36, hnd: 36
Test #2486: actionCount = 48, handCount = 37 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 37, hnd: 37
Test #2487: actionCount = 48, handCount = 38 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 38, hnd: 38
Test #2488: actionCount = 48, handCount = 39 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 39, hnd: 39
Test #2489: actionCount = 48, handCount = 40 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 40, hnd: 40
Test #2490: actionCount = 48, handCount = 41 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 41, hnd: 41
Test #2491: actionCount = 48, handCount = 42 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 42, hnd: 42
Test #2492: actionCount = 48, handCount = 43 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 43, hnd: 43
Test #2493: actionCount = 48, handCount = 44 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 44, hnd: 44
Test #2494: actionCount = 48, handCount = 45 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 45, hnd: 45
Test #2495: actionCount = 48, handCount = 46 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 46, hnd: 46
Test #2496: actionCount = 48, handCount = 47 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 47, hnd: 47
Test #2497: actionCount = 48, handCount = 48 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 48, hnd: 48
Test #2498: actionCount = 48, handCount = 49 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 49, hnd: 49
Test #2499: actionCount = 48, handCount = 50 | 	Passed: Exp act: 49, Act: 49; Exp hnd: 50, hnd: 50
Test #2500: actionCount = 49, handCount = 0 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 0, hnd: 0
Test #2501: actionCount = 49, handCount = 1 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 1, hnd: 1
Test #2502: actionCount = 49, handCount = 2 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 2, hnd: 2
Test #2503: actionCount = 49, handCount = 3 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 3, hnd: 3
Test #2504: actionCount = 49, handCount = 4 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 4, hnd: 4
Test #2505: actionCount = 49, handCount = 5 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 5, hnd: 5
Test #2506: actionCount = 49, handCount = 6 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 6, hnd: 6
Test #2507: actionCount = 49, handCount = 7 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 7, hnd: 7
Test #2508: actionCount = 49, handCount = 8 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 8, hnd: 8
Test #2509: actionCount = 49, handCount = 9 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 9, hnd: 9
Test #2510: actionCount = 49, handCount = 10 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 10, hnd: 10
Test #2511: actionCount = 49, handCount = 11 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 11, hnd: 11
Test #2512: actionCount = 49, handCount = 12 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 12, hnd: 12
Test #2513: actionCount = 49, handCount = 13 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 13, hnd: 13
Test #2514: actionCount = 49, handCount = 14 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 14, hnd: 14
Test #2515: actionCount = 49, handCount = 15 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 15, hnd: 15
Test #2516: actionCount = 49, handCount = 16 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 16, hnd: 16
Test #2517: actionCount = 49, handCount = 17 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 17, hnd: 17
Test #2518: actionCount = 49, handCount = 18 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 18, hnd: 18
Test #2519: actionCount = 49, handCount = 19 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 19, hnd: 19
Test #2520: actionCount = 49, handCount = 20 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 20, hnd: 20
Test #2521: actionCount = 49, handCount = 21 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 21, hnd: 21
Test #2522: actionCount = 49, handCount = 22 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 22, hnd: 22
Test #2523: actionCount = 49, handCount = 23 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 23, hnd: 23
Test #2524: actionCount = 49, handCount = 24 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 24, hnd: 24
Test #2525: actionCount = 49, handCount = 25 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 25, hnd: 25
Test #2526: actionCount = 49, handCount = 26 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 26, hnd: 26
Test #2527: actionCount = 49, handCount = 27 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 27, hnd: 27
Test #2528: actionCount = 49, handCount = 28 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 28, hnd: 28
Test #2529: actionCount = 49, handCount = 29 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 29, hnd: 29
Test #2530: actionCount = 49, handCount = 30 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 30, hnd: 30
Test #2531: actionCount = 49, handCount = 31 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 31, hnd: 31
Test #2532: actionCount = 49, handCount = 32 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 32, hnd: 32
Test #2533: actionCount = 49, handCount = 33 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 33, hnd: 33
Test #2534: actionCount = 49, handCount = 34 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 34, hnd: 34
Test #2535: actionCount = 49, handCount = 35 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 35, hnd: 35
Test #2536: actionCount = 49, handCount = 36 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 36, hnd: 36
Test #2537: actionCount = 49, handCount = 37 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 37, hnd: 37
Test #2538: actionCount = 49, handCount = 38 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 38, hnd: 38
Test #2539: actionCount = 49, handCount = 39 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 39, hnd: 39
Test #2540: actionCount = 49, handCount = 40 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 40, hnd: 40
Test #2541: actionCount = 49, handCount = 41 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 41, hnd: 41
Test #2542: actionCount = 49, handCount = 42 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 42, hnd: 42
Test #2543: actionCount = 49, handCount = 43 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 43, hnd: 43
Test #2544: actionCount = 49, handCount = 44 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 44, hnd: 44
Test #2545: actionCount = 49, handCount = 45 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 45, hnd: 45
Test #2546: actionCount = 49, handCount = 46 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 46, hnd: 46
Test #2547: actionCount = 49, handCount = 47 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 47, hnd: 47
Test #2548: actionCount = 49, handCount = 48 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 48, hnd: 48
Test #2549: actionCount = 49, handCount = 49 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 49, hnd: 49
Test #2550: actionCount = 49, handCount = 50 | 	Passed: Exp act: 50, Act: 50; Exp hnd: 50, hnd: 50
Test #2551: actionCount = 50, handCount = 0 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 0, hnd: 0
Test #2552: actionCount = 50, handCount = 1 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 1, hnd: 1
Test #2553: actionCount = 50, handCount = 2 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 2, hnd: 2
Test #2554: actionCount = 50, handCount = 3 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 3, hnd: 3
Test #2555: actionCount = 50, handCount = 4 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 4, hnd: 4
Test #2556: actionCount = 50, handCount = 5 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 5, hnd: 5
Test #2557: actionCount = 50, handCount = 6 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 6, hnd: 6
Test #2558: actionCount = 50, handCount = 7 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 7, hnd: 7
Test #2559: actionCount = 50, handCount = 8 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 8, hnd: 8
Test #2560: actionCount = 50, handCount = 9 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 9, hnd: 9
Test #2561: actionCount = 50, handCount = 10 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 10, hnd: 10
Test #2562: actionCount = 50, handCount = 11 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 11, hnd: 11
Test #2563: actionCount = 50, handCount = 12 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 12, hnd: 12
Test #2564: actionCount = 50, handCount = 13 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 13, hnd: 13
Test #2565: actionCount = 50, handCount = 14 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 14, hnd: 14
Test #2566: actionCount = 50, handCount = 15 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 15, hnd: 15
Test #2567: actionCount = 50, handCount = 16 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 16, hnd: 16
Test #2568: actionCount = 50, handCount = 17 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 17, hnd: 17
Test #2569: actionCount = 50, handCount = 18 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 18, hnd: 18
Test #2570: actionCount = 50, handCount = 19 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 19, hnd: 19
Test #2571: actionCount = 50, handCount = 20 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 20, hnd: 20
Test #2572: actionCount = 50, handCount = 21 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 21, hnd: 21
Test #2573: actionCount = 50, handCount = 22 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 22, hnd: 22
Test #2574: actionCount = 50, handCount = 23 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 23, hnd: 23
Test #2575: actionCount = 50, handCount = 24 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 24, hnd: 24
Test #2576: actionCount = 50, handCount = 25 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 25, hnd: 25
Test #2577: actionCount = 50, handCount = 26 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 26, hnd: 26
Test #2578: actionCount = 50, handCount = 27 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 27, hnd: 27
Test #2579: actionCount = 50, handCount = 28 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 28, hnd: 28
Test #2580: actionCount = 50, handCount = 29 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 29, hnd: 29
Test #2581: actionCount = 50, handCount = 30 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 30, hnd: 30
Test #2582: actionCount = 50, handCount = 31 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 31, hnd: 31
Test #2583: actionCount = 50, handCount = 32 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 32, hnd: 32
Test #2584: actionCount = 50, handCount = 33 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 33, hnd: 33
Test #2585: actionCount = 50, handCount = 34 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 34, hnd: 34
Test #2586: actionCount = 50, handCount = 35 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 35, hnd: 35
Test #2587: actionCount = 50, handCount = 36 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 36, hnd: 36
Test #2588: actionCount = 50, handCount = 37 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 37, hnd: 37
Test #2589: actionCount = 50, handCount = 38 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 38, hnd: 38
Test #2590: actionCount = 50, handCount = 39 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 39, hnd: 39
Test #2591: actionCount = 50, handCount = 40 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 40, hnd: 40
Test #2592: actionCount = 50, handCount = 41 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 41, hnd: 41
Test #2593: actionCount = 50, handCount = 42 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 42, hnd: 42
Test #2594: actionCount = 50, handCount = 43 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 43, hnd: 43
Test #2595: actionCount = 50, handCount = 44 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 44, hnd: 44
Test #2596: actionCount = 50, handCount = 45 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 45, hnd: 45
Test #2597: actionCount = 50, handCount = 46 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 46, hnd: 46
Test #2598: actionCount = 50, handCount = 47 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 47, hnd: 47
Test #2599: actionCount = 50, handCount = 48 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 48, hnd: 48
Test #2600: actionCount = 50, handCount = 49 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 49, hnd: 49
Test #2601: actionCount = 50, handCount = 50 | 	Passed: Exp act: 51, Act: 51; Exp hnd: 50, hnd: 50
All tests passed!

Times ran: 2601 | Tests Failed: 0
File 'dominion.c'
Lines executed:27.50% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/***** Refactored cards - now with bugs!*****/
        -:    9:
        -:   10:/* Smithy */
        -:   11:/* Card Test 1 */
        -:   12:/* Random tester card1 */
     1296:   13:int play_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:   14:{
        -:   15:	int i;
        -:   16:
        -:   17:      //+3 Cards
     3888:   18:        for (i = 1; i < 3; i++) /* BUG: i = 1 instead of i = 0 */
        -:   19:	{
     2592:   20:	  drawCard(currentPlayer, state);
        -:   21:	}
        -:   22:			
        -:   23:      //discard card from hand
     1296:   24:      discardCard(handPos, currentPlayer, state, 0);
     1296:   25:      return 0;
        -:   26:}
        -:   27:
        -:   28:/* Adventurer */
        -:   29:/* Card Test 2 */
        -:   30:/* Random tester */
    #####:   31:int play_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:   32:{
        -:   33:	int cardDrawn;
        -:   34:
    #####:   35:	while(drawntreasure<2){
    #####:   36:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   37:		  shuffle(currentPlayer, state);
        -:   38:		}
    #####:   39:		drawCard(currentPlayer, state);
    #####:   40:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   41:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   42:		  drawntreasure++;
        -:   43:		else{
    #####:   44:		  temphand[z]=cardDrawn;
    #####:   45:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   46:		  z++;
        -:   47:		}
        -:   48:	      }
    #####:   49:	      while(z-1>0){ /* BUG: '>' instead of '>=' */
    #####:   50:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   51:		z=z-1;
        -:   52:	      }
    #####:   53:	      return 0;
        -:   54:}
        -:   55:
        -:   56:/* Council Room */
        -:   57:/* Card Test 3 */
    #####:   58:int play_council_room(int currentPlayer, struct gameState *state, int handPos)
        -:   59:{
        -:   60:	int i;
        -:   61:
        -:   62:      //+4 Cards
    #####:   63:      for (i = 0; i < 3; i++) /* BUG: draw 3 cards instead of 4 */
        -:   64:	{
    #####:   65:	  drawCard(currentPlayer, state);
        -:   66:	}
        -:   67:			
        -:   68:      //+1 Buy
    #####:   69:      state->numBuys++;
        -:   70:			
        -:   71:      //Each other player draws a card
    #####:   72:      for (i = 0; i < state->numPlayers; i++)
        -:   73:	{
    #####:   74:	  if ( i != currentPlayer )
        -:   75:	    {
    #####:   76:	      drawCard(i, state);
        -:   77:	    }
        -:   78:	}
        -:   79:			
        -:   80:      //put played card in played card pile
    #####:   81:      discardCard(handPos, currentPlayer, state, 0);
        -:   82:			
    #####:   83:      return 0;
        -:   84:}
        -:   85:
        -:   86:/* Mine */
    #####:   87:int play_mine(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:   88:{
        -:   89:	int i;
        -:   90:	int j;
        -:   91:
    #####:   92:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:   93:
    #####:   94:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:   95:	  {
    #####:   96:	    return -1;
        -:   97:	  }
        -:   98:		  
    #####:   99:	if (choice2 > treasure_map || choice2 < curse)
        -:  100:	  {
    #####:  101:	    return -1;
        -:  102:	  }
        -:  103:
    #####:  104:	if ( (getCost(state->hand[currentPlayer][choice1]) + 4) > getCost(choice2) ) /* BUG: Gain treasure costing up to 4 more instead of 3 */
        -:  105:	  {
    #####:  106:	    return -1;
        -:  107:	  }
        -:  108:
    #####:  109:	gainCard(choice2, state, 2, currentPlayer);
        -:  110:
        -:  111:	//discard card from hand
    #####:  112:	discardCard(handPos, currentPlayer, state, 0);
        -:  113:
        -:  114:	//discard trashed card
    #####:  115:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  116:	  {
    #####:  117:	    if (state->hand[currentPlayer][i] == j)
        -:  118:	      {
    #####:  119:		discardCard(i, currentPlayer, state, 0);			
    #####:  120:		break;
        -:  121:	      }
        -:  122:	  }
        -:  123:			  
    #####:  124:	return 0;
        -:  125:}
        -:  126:
        -:  127:/* Remodel */
    #####:  128:int play_remodel(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  129:{
        -:  130:	int i;
        -:  131:	int j;
        -:  132:
    #####:  133:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  134:
    #####:  135:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  136:	{
    #####:  137:	  return -1;
        -:  138:	}
        -:  139:
    #####:  140:      gainCard(choice2, state, 0, currentPlayer);
        -:  141:
        -:  142:      //discard card from hand
    #####:  143:      discardCard(handPos, currentPlayer, state, 0);
        -:  144:
        -:  145:      //discard trashed card
    #####:  146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  147:	{
    #####:  148:	  if (state->hand[currentPlayer][i] == j)
        -:  149:	    {
    #####:  150:	      discardCard(i, currentPlayer, state, 0);			
    #####:  151:	      break;
        -:  152:	    }
        -:  153:	}
        -:  154:
        -:  155:
    #####:  156:      return 0;
        -:  157:}
        -:  158:
        -:  159:/* Village */
        -:  160:/* Card Test 4 */
        -:  161:/* Random tester card 2 */
    #####:  162:int play_village(int currentPlayer, struct gameState *state, int handPos)
        -:  163:{
        -:  164:      //+1 Card
    #####:  165:      drawCard(currentPlayer, state);
        -:  166:			
        -:  167:      //+2 Actions
    #####:  168:      state->numActions = state->numActions + 2;
        -:  169:			
        -:  170:      //discard played card from hand
    #####:  171:      discardCard(handPos, currentPlayer, state, 0);
    #####:  172:      return 0;
        -:  173:}
        -:  174:
        -:  175:/***** End refactoring *****/
        -:  176:
        -:  177:
   240760:  178:int compare(const void* a, const void* b) {
   240760:  179:  if (*(int*)a > *(int*)b)
     4950:  180:    return 1;
   235810:  181:  if (*(int*)a < *(int*)b)
    66486:  182:    return -1;
   169324:  183:  return 0;
        -:  184:}
        -:  185:
    #####:  186:struct gameState* newGame() {
    #####:  187:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  188:  return g;
        -:  189:}
        -:  190:
    #####:  191:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  192:		  int k8, int k9, int k10) {
    #####:  193:  int* k = malloc(10 * sizeof(int));
    #####:  194:  k[0] = k1;
    #####:  195:  k[1] = k2;
    #####:  196:  k[2] = k3;
    #####:  197:  k[3] = k4;
    #####:  198:  k[4] = k5;
    #####:  199:  k[5] = k6;
    #####:  200:  k[6] = k7;
    #####:  201:  k[7] = k8;
    #####:  202:  k[8] = k9;
    #####:  203:  k[9] = k10;
    #####:  204:  return k;
        -:  205:}
        -:  206:
     7692:  207:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  208:		   struct gameState *state) {
        -:  209:
        -:  210:  int i;
        -:  211:  int j;
        -:  212:  int it;			
        -:  213:  //set up random number generator
     7692:  214:  SelectStream(1);
     7692:  215:  PutSeed((long)randomSeed);
        -:  216:  
        -:  217:  //check number of players
     7692:  218:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  219:    {
    #####:  220:      return -1;
        -:  221:    }
        -:  222:
        -:  223:  //set number of players
     7692:  224:  state->numPlayers = numPlayers;
        -:  225:
        -:  226:  //check selected kingdom cards are different
    84612:  227:  for (i = 0; i < 10; i++)
        -:  228:    {
   846120:  229:      for (j = 0; j < 10; j++)
        -:  230:        {
   769200:  231:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  232:	    {
    #####:  233:	      return -1;
        -:  234:	    }
        -:  235:        }
        -:  236:    }
        -:  237:
        -:  238:
        -:  239:  //initialize supply
        -:  240:  ///////////////////////////////
        -:  241:
        -:  242:  //set number of Curse cards
     7692:  243:  if (numPlayers == 2)
        -:  244:    {
     7692:  245:      state->supplyCount[curse] = 10;
        -:  246:    }
    #####:  247:  else if (numPlayers == 3)
        -:  248:    {
    #####:  249:      state->supplyCount[curse] = 20;
        -:  250:    }
        -:  251:  else
        -:  252:    {
    #####:  253:      state->supplyCount[curse] = 30;
        -:  254:    }
        -:  255:
        -:  256:  //set number of Victory cards
     7692:  257:  if (numPlayers == 2)
        -:  258:    {
     7692:  259:      state->supplyCount[estate] = 8;
     7692:  260:      state->supplyCount[duchy] = 8;
     7692:  261:      state->supplyCount[province] = 8;
        -:  262:    }
        -:  263:  else
        -:  264:    {
    #####:  265:      state->supplyCount[estate] = 12;
    #####:  266:      state->supplyCount[duchy] = 12;
    #####:  267:      state->supplyCount[province] = 12;
        -:  268:    }
        -:  269:
        -:  270:  //set number of Treasure cards
     7692:  271:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     7692:  272:  state->supplyCount[silver] = 40;
     7692:  273:  state->supplyCount[gold] = 30;
        -:  274:
        -:  275:  //set number of Kingdom cards
   161532:  276:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  277:    {
  1269180:  278:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  279:	{
  1192260:  280:	  if (kingdomCards[j] == i)
        -:  281:	    {
        -:  282:	      //check if card is a 'Victory' Kingdom card
    76920:  283:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  284:		{
    30768:  285:		  if (numPlayers == 2){ 
    15384:  286:		    state->supplyCount[i] = 8; 
        -:  287:		  }
    #####:  288:		  else{ state->supplyCount[i] = 12; }
        -:  289:		}
        -:  290:	      else
        -:  291:		{
    61536:  292:		  state->supplyCount[i] = 10;
        -:  293:		}
    76920:  294:	      break;
        -:  295:	    }
        -:  296:	  else    //card is not in the set choosen for the game
        -:  297:	    {
  1115340:  298:	      state->supplyCount[i] = -1;
        -:  299:	    }
        -:  300:	}
        -:  301:
        -:  302:    }
        -:  303:
        -:  304:  ////////////////////////
        -:  305:  //supply intilization complete
        -:  306:
        -:  307:  //set player decks
    23076:  308:  for (i = 0; i < numPlayers; i++)
        -:  309:    {
    15384:  310:      state->deckCount[i] = 0;
    61536:  311:      for (j = 0; j < 3; j++)
        -:  312:	{
    46152:  313:	  state->deck[i][j] = estate;
    46152:  314:	  state->deckCount[i]++;
        -:  315:	}
   123072:  316:      for (j = 3; j < 10; j++)
        -:  317:	{
   107688:  318:	  state->deck[i][j] = copper;
   107688:  319:	  state->deckCount[i]++;		
        -:  320:	}
        -:  321:    }
        -:  322:
        -:  323:  //shuffle player decks
    23076:  324:  for (i = 0; i < numPlayers; i++)
        -:  325:    {
    15384:  326:      if ( shuffle(i, state) < 0 )
        -:  327:	{
    #####:  328:	  return -1;
        -:  329:	}
        -:  330:    }
        -:  331:
        -:  332:  //draw player hands
    23076:  333:  for (i = 0; i < numPlayers; i++)
        -:  334:    {  
        -:  335:      //initialize hand size to zero
    15384:  336:      state->handCount[i] = 0;
    15384:  337:      state->discardCount[i] = 0;
        -:  338:      //draw 5 cards
        -:  339:      // for (j = 0; j < 5; j++)
        -:  340:      //	{
        -:  341:      //	  drawCard(i, state);
        -:  342:      //	}
        -:  343:    }
        -:  344:  
        -:  345:  //set embargo tokens to 0 for all supply piles
   215376:  346:  for (i = 0; i <= treasure_map; i++)
        -:  347:    {
   207684:  348:      state->embargoTokens[i] = 0;
        -:  349:    }
        -:  350:
        -:  351:  //initialize first player's turn
     7692:  352:  state->outpostPlayed = 0;
     7692:  353:  state->phase = 0;
     7692:  354:  state->numActions = 1;
     7692:  355:  state->numBuys = 1;
     7692:  356:  state->playedCardCount = 0;
     7692:  357:  state->whoseTurn = 0;
     7692:  358:  state->handCount[state->whoseTurn] = 0;
        -:  359:  //int it; move to top
        -:  360:
        -:  361:  //Moved draw cards to here, only drawing at the start of a turn
    46152:  362:  for (it = 0; it < 5; it++){
    38460:  363:    drawCard(state->whoseTurn, state);
        -:  364:  }
        -:  365:
     7692:  366:  updateCoins(state->whoseTurn, state, 0);
        -:  367:
     7692:  368:  return 0;
        -:  369:}
        -:  370:
    16032:  371:int shuffle(int player, struct gameState *state) {
        -:  372: 
        -:  373:
        -:  374:  int newDeck[MAX_DECK];
    16032:  375:  int newDeckPos = 0;
        -:  376:  int card;
        -:  377:  int i;
        -:  378:
    16032:  379:  if (state->deckCount[player] < 1)
      648:  380:    return -1;
    15384:  381:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  382:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  383:
   184608:  384:  while (state->deckCount[player] > 0) {
   153840:  385:    card = floor(Random() * state->deckCount[player]);
   153840:  386:    newDeck[newDeckPos] = state->deck[player][card];
   153840:  387:    newDeckPos++;
   538440:  388:    for (i = card; i < state->deckCount[player]-1; i++) {
   384600:  389:      state->deck[player][i] = state->deck[player][i+1];
        -:  390:    }
   153840:  391:    state->deckCount[player]--;
        -:  392:  }
   169224:  393:  for (i = 0; i < newDeckPos; i++) {
   153840:  394:    state->deck[player][i] = newDeck[i];
   153840:  395:    state->deckCount[player]++;
        -:  396:  }
        -:  397:
    15384:  398:  return 0;
        -:  399:}
        -:  400:
    #####:  401:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  402:{	
        -:  403:  int card;
    #####:  404:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  405:
        -:  406:  //check if it is the right phase
    #####:  407:  if (state->phase != 0)
        -:  408:    {
    #####:  409:      return -1;
        -:  410:    }
        -:  411:	
        -:  412:  //check if player has enough actions
    #####:  413:  if ( state->numActions < 1 )
        -:  414:    {
    #####:  415:      return -1;
        -:  416:    }
        -:  417:	
        -:  418:  //get card played
    #####:  419:  card = handCard(handPos, state);
        -:  420:	
        -:  421:  //check if selected card is an action
    #####:  422:  if ( card < adventurer || card > treasure_map )
        -:  423:    {
    #####:  424:      return -1;
        -:  425:    }
        -:  426:	
        -:  427:  //play card
    #####:  428:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  429:    {
    #####:  430:      return -1;
        -:  431:    }
        -:  432:	
        -:  433:  //reduce number of actions
    #####:  434:  state->numActions--;
        -:  435:
        -:  436:  //update coins (Treasure cards may be added with card draws)
    #####:  437:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  438:	
    #####:  439:  return 0;
        -:  440:}
        -:  441:
    #####:  442:int buyCard(int supplyPos, struct gameState *state) {
        -:  443:  int who;
        -:  444:  if (DEBUG){
        -:  445:    printf("Entering buyCard...\n");
        -:  446:  }
        -:  447:
        -:  448:  // I don't know what to do about the phase thing.
        -:  449:
    #####:  450:  who = state->whoseTurn;
        -:  451:
    #####:  452:  if (state->numBuys < 1){
        -:  453:    if (DEBUG)
        -:  454:      printf("You do not have any buys left\n");
    #####:  455:    return -1;
    #####:  456:  } else if (supplyCount(supplyPos, state) <1){
        -:  457:    if (DEBUG)
        -:  458:      printf("There are not any of that type of card left\n");
    #####:  459:    return -1;
    #####:  460:  } else if (state->coins < getCost(supplyPos)){
        -:  461:    if (DEBUG) 
        -:  462:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  463:    return -1;
        -:  464:  } else {
    #####:  465:    state->phase=1;
        -:  466:    //state->supplyCount[supplyPos]--;
    #####:  467:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  468:  
    #####:  469:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  470:    state->numBuys--;
        -:  471:    if (DEBUG)
        -:  472:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  473:  }
        -:  474:
        -:  475:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  476:  //state->discardCount[who]++;
        -:  477:    
    #####:  478:  return 0;
        -:  479:}
        -:  480:
        -:  481:/***** Use this function for Unit test 4 *****/
    #####:  482:int numHandCards(struct gameState *state) {
    #####:  483:  return state->handCount[ whoseTurn(state) ];
        -:  484:}
        -:  485:
    #####:  486:int handCard(int handPos, struct gameState *state) {
    #####:  487:  int currentPlayer = whoseTurn(state);
    #####:  488:  return state->hand[currentPlayer][handPos];
        -:  489:}
        -:  490:
        -:  491:/***** Use this function for Unit test 3 *****/
    #####:  492:int supplyCount(int card, struct gameState *state) {
    #####:  493:  return state->supplyCount[card];
        -:  494:}
        -:  495:
     2662:  496:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  497:  int i;
     2662:  498:  int count = 0;
        -:  499:
    15972:  500:  for (i = 0; i < state->deckCount[player]; i++)
        -:  501:    {
    13310:  502:      if (state->deck[player][i] == card) count++;
        -:  503:    }
        -:  504:
    15972:  505:  for (i = 0; i < state->handCount[player]; i++)
        -:  506:    {
    13310:  507:      if (state->hand[player][i] == card) count++;
        -:  508:    }
        -:  509:
    15972:  510:  for (i = 0; i < state->discardCount[player]; i++)
        -:  511:    {
    13310:  512:      if (state->discard[player][i] == card) count++;
        -:  513:    }
        -:  514:
     2662:  515:  return count;
        -:  516:}
        -:  517:
     3939:  518:int whoseTurn(struct gameState *state) {
     3939:  519:  return state->whoseTurn;
        -:  520:}
        -:  521:
    #####:  522:int endTurn(struct gameState *state) {
        -:  523:  int k;
        -:  524:  int i;
    #####:  525:  int currentPlayer = whoseTurn(state);
        -:  526:  
        -:  527:  //Discard hand
    #####:  528:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  529:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  530:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  531:  }
    #####:  532:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  533:    
        -:  534:  //Code for determining the player
    #####:  535:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  536:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  537:  }
        -:  538:  else{
    #####:  539:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  540:  }
        -:  541:
    #####:  542:  state->outpostPlayed = 0;
    #####:  543:  state->phase = 0;
    #####:  544:  state->numActions = 1;
    #####:  545:  state->coins = 0;
    #####:  546:  state->numBuys = 1;
    #####:  547:  state->playedCardCount = 0;
    #####:  548:  state->handCount[state->whoseTurn] = 0;
        -:  549:
        -:  550:  //int k; move to top
        -:  551:  //Next player draws hand
    #####:  552:  for (k = 0; k < 5; k++){
    #####:  553:    drawCard(state->whoseTurn, state);//Draw a card
        -:  554:  }
        -:  555:
        -:  556:  //Update money
    #####:  557:  updateCoins(state->whoseTurn, state , 0);
        -:  558:
    #####:  559:  return 0;
        -:  560:}
        -:  561:
        -:  562:/***** Use this function for Unit test 1 *****/
       90:  563:int isGameOver(struct gameState *state) {
        -:  564:  int i;
        -:  565:  int j;
        -:  566:	
        -:  567:  //if stack of Province cards is empty, the game ends
       90:  568:  if (state->supplyCount[province] == 0)
        -:  569:    {
       26:  570:      return 1;
        -:  571:    }
        -:  572:
        -:  573:  //if three supply pile are at 0, the game ends
       64:  574:  j = 0;
     1664:  575:  for (i = 0; i < 25; i++)
        -:  576:    {
     1600:  577:      if (state->supplyCount[i] == 0)
        -:  578:	{
       96:  579:	  j++;
        -:  580:	}
        -:  581:    }
       64:  582:  if ( j >= 3)
        -:  583:    {
       16:  584:      return 1;
        -:  585:    }
        -:  586:
       48:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int scoreFor (int player, struct gameState *state) {
        -:  591:
        -:  592:  int i;
    #####:  593:  int score = 0;
        -:  594:  //score from hand
    #####:  595:  for (i = 0; i < state->handCount[player]; i++)
        -:  596:    {
    #####:  597:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  598:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  599:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  600:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  601:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  602:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  603:    }
        -:  604:
        -:  605:  //score from discard
    #####:  606:  for (i = 0; i < state->discardCount[player]; i++)
        -:  607:    {
    #####:  608:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  609:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  610:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  611:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  612:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  613:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  614:    }
        -:  615:
        -:  616:  //score from deck
    #####:  617:  for (i = 0; i < state->discardCount[player]; i++)
        -:  618:    {
    #####:  619:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  620:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  621:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  622:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  623:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  624:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  625:    }
        -:  626:
    #####:  627:  return score;
        -:  628:}
        -:  629:
    #####:  630:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  631:  int i;	
        -:  632:  int j;
        -:  633:  int highScore;
        -:  634:  int currentPlayer;
        -:  635:
        -:  636:  //get score for each player
    #####:  637:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  638:    {
        -:  639:      //set unused player scores to -9999
    #####:  640:      if (i >= state->numPlayers)
        -:  641:	{
    #####:  642:	  players[i] = -9999;
        -:  643:	}
        -:  644:      else
        -:  645:	{
    #####:  646:	  players[i] = scoreFor (i, state);
        -:  647:	}
        -:  648:    }
        -:  649:
        -:  650:  //find highest score
    #####:  651:  j = 0;
    #####:  652:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  653:    {
    #####:  654:      if (players[i] > players[j])
        -:  655:	{
    #####:  656:	  j = i;
        -:  657:	}
        -:  658:    }
    #####:  659:  highScore = players[j];
        -:  660:
        -:  661:  //add 1 to players who had less turns
    #####:  662:  currentPlayer = whoseTurn(state);
    #####:  663:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  664:    {
    #####:  665:      if ( players[i] == highScore && i > currentPlayer )
        -:  666:	{
    #####:  667:	  players[i]++;
        -:  668:	}
        -:  669:    }
        -:  670:
        -:  671:  //find new highest score
    #####:  672:  j = 0;
    #####:  673:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  674:    {
    #####:  675:      if ( players[i] > players[j] )
        -:  676:	{
    #####:  677:	  j = i;
        -:  678:	}
        -:  679:    }
    #####:  680:  highScore = players[j];
        -:  681:
        -:  682:  //set winners in array to 1 and rest to 0
    #####:  683:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  684:    {
    #####:  685:      if ( players[i] == highScore )
        -:  686:	{
    #####:  687:	  players[i] = 1;
        -:  688:	}
        -:  689:      else
        -:  690:	{
    #####:  691:	  players[i] = 0;
        -:  692:	}
        -:  693:    }
        -:  694:
    #####:  695:  return 0;
        -:  696:}
        -:  697:
    43653:  698:int drawCard(int player, struct gameState *state)
        -:  699:{	int count;
        -:  700:  int deckCounter;
    43653:  701:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  702:    
        -:  703:    //Step 1 Shuffle the discard pile back into a deck
        -:  704:    int i;
        -:  705:    //Move discard to deck
      648:  706:    for (i = 0; i < state->discardCount[player];i++){
    #####:  707:      state->deck[player][i] = state->discard[player][i];
    #####:  708:      state->discard[player][i] = -1;
        -:  709:    }
        -:  710:
      648:  711:    state->deckCount[player] = state->discardCount[player];
      648:  712:    state->discardCount[player] = 0;//Reset discard
        -:  713:
        -:  714:    //Shufffle the deck
      648:  715:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  716:   
        -:  717:    if (DEBUG){//Debug statements
        -:  718:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  719:    }
        -:  720:    
      648:  721:    state->discardCount[player] = 0;
        -:  722:
        -:  723:    //Step 2 Draw Card
      648:  724:    count = state->handCount[player];//Get current player's hand count
        -:  725:    
        -:  726:    if (DEBUG){//Debug statements
        -:  727:      printf("Current hand count: %d\n", count);
        -:  728:    }
        -:  729:    
      648:  730:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  731:
      648:  732:    if (deckCounter == 0)
      648:  733:      return -1;
        -:  734:
    #####:  735:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  736:    state->deckCount[player]--;
    #####:  737:    state->handCount[player]++;//Increment hand count
        -:  738:  }
        -:  739:
        -:  740:  else{
    43005:  741:    int count = state->handCount[player];//Get current hand count for player
        -:  742:    int deckCounter;
        -:  743:    if (DEBUG){//Debug statements
        -:  744:      printf("Current hand count: %d\n", count);
        -:  745:    }
        -:  746:
    43005:  747:    deckCounter = state->deckCount[player];//Create holder for the deck count
    43005:  748:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    43005:  749:    state->deckCount[player]--;
    43005:  750:    state->handCount[player]++;//Increment hand count
        -:  751:  }
        -:  752:
    43005:  753:  return 0;
        -:  754:}
        -:  755:
    #####:  756:int getCost(int cardNumber)
        -:  757:{
    #####:  758:  switch( cardNumber ) 
        -:  759:    {
        -:  760:    case curse:
    #####:  761:      return 0;
        -:  762:    case estate:
    #####:  763:      return 2;
        -:  764:    case duchy:
    #####:  765:      return 5;
        -:  766:    case province:
    #####:  767:      return 8;
        -:  768:    case copper:
    #####:  769:      return 0;
        -:  770:    case silver:
    #####:  771:      return 3;
        -:  772:    case gold:
    #####:  773:      return 6;
        -:  774:    case adventurer:
    #####:  775:      return 6;
        -:  776:    case council_room:
    #####:  777:      return 5;
        -:  778:    case feast:
    #####:  779:      return 4;
        -:  780:    case gardens:
    #####:  781:      return 4;
        -:  782:    case mine:
    #####:  783:      return 5;
        -:  784:    case remodel:
    #####:  785:      return 4;
        -:  786:    case smithy:
    #####:  787:      return 4;
        -:  788:    case village:
    #####:  789:      return 3;
        -:  790:    case baron:
    #####:  791:      return 4;
        -:  792:    case great_hall:
    #####:  793:      return 3;
        -:  794:    case minion:
    #####:  795:      return 5;
        -:  796:    case steward:
    #####:  797:      return 3;
        -:  798:    case tribute:
    #####:  799:      return 5;
        -:  800:    case ambassador:
    #####:  801:      return 3;
        -:  802:    case cutpurse:
    #####:  803:      return 4;
        -:  804:    case embargo: 
    #####:  805:      return 2;
        -:  806:    case outpost:
    #####:  807:      return 5;
        -:  808:    case salvager:
    #####:  809:      return 4;
        -:  810:    case sea_hag:
    #####:  811:      return 4;
        -:  812:    case treasure_map:
    #####:  813:      return 4;
        -:  814:    }
        -:  815:	
    #####:  816:  return -1;
        -:  817:}
        -:  818:
        -:  819:/********** BEGINNING of cardEffct **********/
        -:  820:/* This is where the refactor and bug additions will be done for assignment-2 */
     3939:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
     3939:  828:  int currentPlayer = whoseTurn(state);
     3939:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
     3939:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND];// moved above the if statement
     3939:  833:  int drawntreasure=0;
        -:  834:  int cardDrawn;
     3939:  835:  int z = 0;// this is the counter for the temp hand
     3939:  836:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  837:    nextPlayer = 0;
        -:  838:  }
        -:  839:  
        -:  840:  /* Refactoring switch statement so cards are implemented in their own functions */
        -:  841:  //uses switch to select card and perform actions
     3939:  842:  switch( card ) 
        -:  843:    {
        -:  844:
        -:  845:    /***** Refactor adventurer *****/
        -:  846:    case adventurer:
    #####:  847:	    return play_adventurer(drawntreasure, state, currentPlayer, temphand, z);
        -:  848:      /*
        -:  849:      while(drawntreasure<2){
        -:  850:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  851:	  shuffle(currentPlayer, state);
        -:  852:	}
        -:  853:	drawCard(currentPlayer, state);
        -:  854:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  855:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  856:	  drawntreasure++;
        -:  857:	else{
        -:  858:	  temphand[z]=cardDrawn;
        -:  859:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  860:	  z++;
        -:  861:	}
        -:  862:      }
        -:  863:      while(z-1>=0){
        -:  864:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  865:	z=z-1;
        -:  866:      }
        -:  867:      return 0;
        -:  868:      */
        -:  869:			
        -:  870:    /***** Refactor council room*****/
        -:  871:    case council_room:
    #####:  872:       	return play_council_room(currentPlayer, state, handPos);
        -:  873:      /*
        -:  874:      //+4 Cards
        -:  875:      for (i = 0; i < 4; i++)
        -:  876:	{
        -:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
        -:  879:			
        -:  880:      //+1 Buy
        -:  881:      state->numBuys++;
        -:  882:			
        -:  883:      //Each other player draws a card
        -:  884:      for (i = 0; i < state->numPlayers; i++)
        -:  885:	{
        -:  886:	  if ( i != currentPlayer )
        -:  887:	    {
        -:  888:	      drawCard(i, state);
        -:  889:	    }
        -:  890:	}
        -:  891:			
        -:  892:      //put played card in played card pile
        -:  893:      discardCard(handPos, currentPlayer, state, 0);
        -:  894:			
        -:  895:      return 0;
        -:  896:      */
        -:  897:			
        -:  898:    case feast:
        -:  899:      //gain card with cost up to 5
        -:  900:      //Backup hand
    #####:  901:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  902:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  903:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  904:      }
        -:  905:      //Backup hand
        -:  906:
        -:  907:      //Update Coins for Buy
    #####:  908:      updateCoins(currentPlayer, state, 5);
    #####:  909:      x = 1;//Condition to loop on
    #####:  910:      while( x == 1) {//Buy one card
    #####:  911:	if (supplyCount(choice1, state) <= 0){
        -:  912:	  if (DEBUG)
        -:  913:	    printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:	  if (DEBUG){
        -:  916:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  917:	  }
        -:  918:	}
    #####:  919:	else if (state->coins < getCost(choice1)){
    #####:  920:	  printf("That card is too expensive!\n");
        -:  921:
        -:  922:	  if (DEBUG){
        -:  923:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  924:	  }
        -:  925:	}
        -:  926:	else{
        -:  927:
        -:  928:	  if (DEBUG){
        -:  929:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:	  }
        -:  931:
    #####:  932:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  933:	  x = 0;//No more buying cards
        -:  934:
        -:  935:	  if (DEBUG){
        -:  936:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:	  }
        -:  938:
        -:  939:	}
        -:  940:      }     
        -:  941:
        -:  942:      //Reset Hand
    #####:  943:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  944:	state->hand[currentPlayer][i] = temphand[i];
    #####:  945:	temphand[i] = -1;
        -:  946:      }
        -:  947:      //Reset Hand
        -:  948:      			
    #####:  949:      return 0;
        -:  950:			
        -:  951:    case gardens:
    #####:  952:      return -1;
        -:  953:			
        -:  954:    /***** Refactor mine*****/
        -:  955:    case mine:
    #####:  956:	return play_mine(state, choice1, choice2, currentPlayer, handPos);
        -:  957:      /*
        -:  958:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
        -:  960:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  961:	{
        -:  962:	  return -1;
        -:  963:	}
        -:  964:		
        -:  965:      if (choice2 > treasure_map || choice2 < curse)
        -:  966:	{
        -:  967:	  return -1;
        -:  968:	}
        -:  969:
        -:  970:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  971:	{
        -:  972:	  return -1;
        -:  973:	}
        -:  974:
        -:  975:      gainCard(choice2, state, 2, currentPlayer);
        -:  976:
        -:  977:      //discard card from hand
        -:  978:      discardCard(handPos, currentPlayer, state, 0);
        -:  979:
        -:  980:      //discard trashed card
        -:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:	{
        -:  983:	  if (state->hand[currentPlayer][i] == j)
        -:  984:	    {
        -:  985:	      discardCard(i, currentPlayer, state, 0);			
        -:  986:	      break;
        -:  987:	    }
        -:  988:	}
        -:  989:			
        -:  990:      return 0;
        -:  991:      */
        -:  992:			
        -:  993:    /***** Refactor remodel*****/
        -:  994:    case remodel:
    #####:  995:      return play_remodel(state, choice1, choice2, currentPlayer, handPos);
        -:  996:      /*
        -:  997:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  998:
        -:  999:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1000:	{
        -: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
        -: 1004:      gainCard(choice2, state, 0, currentPlayer);
        -: 1005:
        -: 1006:      //discard card from hand
        -: 1007:      discardCard(handPos, currentPlayer, state, 0);
        -: 1008:
        -: 1009:      //discard trashed card
        -: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1011:	{
        -: 1012:	  if (state->hand[currentPlayer][i] == j)
        -: 1013:	    {
        -: 1014:	      discardCard(i, currentPlayer, state, 0);			
        -: 1015:	      break;
        -: 1016:	    }
        -: 1017:	}
        -: 1018:
        -: 1019:
        -: 1020:      return 0;
        -: 1021:      */
        -: 1022:		
        -: 1023:    /***** Refactor smithy *****/
        -: 1024:    case smithy:
     1296: 1025:      return play_smithy(currentPlayer, state, handPos);
        -: 1026:      /* 
        -: 1027:      //+3 Cards
        -: 1028:      for (i = 0; i < 3; i++)
        -: 1029:	{
        -: 1030:	  drawCard(currentPlayer, state);
        -: 1031:	}
        -: 1032:			
        -: 1033:      //discard card from hand
        -: 1034:      discardCard(handPos, currentPlayer, state, 0);
        -: 1035:      return 0;
        -: 1036:      */
        -: 1037:		
        -: 1038:
        -: 1039:    /***** Refactored village for assignment-3 (no new bugs introduced) *****/
        -: 1040:    case village:
    #####: 1041:      return play_village(currentPlayer, state, handPos);
        -: 1042:      /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:      */
        -: 1053:		
        -: 1054:    case baron:
    #####: 1055:      state->numBuys++;//Increase buys by 1!
    #####: 1056:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1057:	int p = 0;//Iterator for hand!
    #####: 1058:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1059:	while(card_not_discarded){
    #####: 1060:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1061:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1062:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1063:	    state->discardCount[currentPlayer]++;
    #####: 1064:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1065:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1066:	    }
    #####: 1067:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1068:	    state->handCount[currentPlayer]--;
    #####: 1069:	    card_not_discarded = 0;//Exit the loop
        -: 1070:	  }
    #####: 1071:	  else if (p > state->handCount[currentPlayer]){
        -: 1072:	    if(DEBUG) {
        -: 1073:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1074:	      printf("Must gain an estate if there are any\n");
        -: 1075:	    }
    #####: 1076:	    if (supplyCount(estate, state) > 0){
    #####: 1077:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1078:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1079:	      if (supplyCount(estate, state) == 0){
    #####: 1080:		isGameOver(state);
        -: 1081:	      }
        -: 1082:	    }
    #####: 1083:	    card_not_discarded = 0;//Exit the loop
        -: 1084:	  }
        -: 1085:			    
        -: 1086:	  else{
    #####: 1087:	    p++;//Next card
        -: 1088:	  }
        -: 1089:	}
        -: 1090:      }
        -: 1091:			    
        -: 1092:      else{
    #####: 1093:	if (supplyCount(estate, state) > 0){
    #####: 1094:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1095:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1096:	  if (supplyCount(estate, state) == 0){
    #####: 1097:	    isGameOver(state);
        -: 1098:	  }
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
        -: 1102:      
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case great_hall:
        -: 1106:      //+1 Card
     2601: 1107:      drawCard(currentPlayer, state);
        -: 1108:			
        -: 1109:      //+1 Actions
     2601: 1110:      state->numActions++;
        -: 1111:			
        -: 1112:      //discard card from hand
     2601: 1113:      discardCard(handPos, currentPlayer, state, 0);
     2601: 1114:      return 0;
        -: 1115:		
        -: 1116:    case minion:
        -: 1117:      //+1 action
    #####: 1118:      state->numActions++;
        -: 1119:			
        -: 1120:      //discard card from hand
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
        -: 1122:			
    #####: 1123:      if (choice1)		//+2 coins
        -: 1124:	{
    #####: 1125:	  state->coins = state->coins + 2;
        -: 1126:	}
        -: 1127:			
    #####: 1128:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1129:	{
        -: 1130:	  //discard hand
    #####: 1131:	  while(numHandCards(state) > 0)
        -: 1132:	    {
    #####: 1133:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //draw 4
    #####: 1137:	  for (i = 0; i < 4; i++)
        -: 1138:	    {
    #####: 1139:	      drawCard(currentPlayer, state);
        -: 1140:	    }
        -: 1141:				
        -: 1142:	  //other players discard hand and redraw if hand size > 4
    #####: 1143:	  for (i = 0; i < state->numPlayers; i++)
        -: 1144:	    {
    #####: 1145:	      if (i != currentPlayer)
        -: 1146:		{
    #####: 1147:		  if ( state->handCount[i] > 4 )
        -: 1148:		    {
        -: 1149:		      //discard hand
    #####: 1150:		      while( state->handCount[i] > 0 )
        -: 1151:			{
    #####: 1152:			  discardCard(handPos, i, state, 0);
        -: 1153:			}
        -: 1154:							
        -: 1155:		      //draw 4
    #####: 1156:		      for (j = 0; j < 4; j++)
        -: 1157:			{
    #####: 1158:			  drawCard(i, state);
        -: 1159:			}
        -: 1160:		    }
        -: 1161:		}
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case steward:
    #####: 1168:      if (choice1 == 1)
        -: 1169:	{
        -: 1170:	  //+2 cards
    #####: 1171:	  drawCard(currentPlayer, state);
    #####: 1172:	  drawCard(currentPlayer, state);
        -: 1173:	}
    #####: 1174:      else if (choice1 == 2)
        -: 1175:	{
        -: 1176:	  //+2 coins
    #####: 1177:	  state->coins = state->coins + 2;
        -: 1178:	}
        -: 1179:      else
        -: 1180:	{
        -: 1181:	  //trash 2 cards in hand
    #####: 1182:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1183:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:			
        -: 1186:      //discard card from hand
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case tribute:
    #####: 1191:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1192:	if (state->deckCount[nextPlayer] > 0){
    #####: 1193:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1194:	  state->deckCount[nextPlayer]--;
        -: 1195:	}
    #####: 1196:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1197:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1198:	  state->discardCount[nextPlayer]--;
        -: 1199:	}
        -: 1200:	else{
        -: 1201:	  //No Card to Reveal
        -: 1202:	  if (DEBUG){
        -: 1203:	    printf("No cards to reveal\n");
        -: 1204:	  }
        -: 1205:	}
        -: 1206:      }
        -: 1207:	    
        -: 1208:      else{
    #####: 1209:	if (state->deckCount[nextPlayer] == 0){
    #####: 1210:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1211:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1212:	    state->deckCount[nextPlayer]++;
    #####: 1213:	    state->discard[nextPlayer][i] = -1;
    #####: 1214:	    state->discardCount[nextPlayer]--;
        -: 1215:	  }
        -: 1216:			    
    #####: 1217:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1218:	} 
    #####: 1219:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1220:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1221:	state->deckCount[nextPlayer]--;
    #####: 1222:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1223:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1224:	state->deckCount[nextPlayer]--;
        -: 1225:      }    
        -: 1226:		       
    #####: 1227:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1228:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1229:	state->playedCardCount++;
    #####: 1230:	tributeRevealedCards[1] = -1;
        -: 1231:      }
        -: 1232:
    #####: 1233:      for (i = 0; i <= 2; i ++){
    #####: 1234:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1235:	  state->coins += 2;
        -: 1236:	}
        -: 1237:		    
    #####: 1238:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1239:	  drawCard(currentPlayer, state);
    #####: 1240:	  drawCard(currentPlayer, state);
        -: 1241:	}
        -: 1242:	else{//Action Card
    #####: 1243:	  state->numActions = state->numActions + 2;
        -: 1244:	}
        -: 1245:      }
        -: 1246:	    
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case ambassador:
    #####: 1250:      j = 0;		//used to check if player has enough cards to discard
        -: 1251:
    #####: 1252:      if (choice2 > 2 || choice2 < 0)
        -: 1253:	{
    #####: 1254:	  return -1;				
        -: 1255:	}
        -: 1256:
    #####: 1257:      if (choice1 == handPos)
        -: 1258:	{
    #####: 1259:	  return -1;
        -: 1260:	}
        -: 1261:
    #####: 1262:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1263:	{
    #####: 1264:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1265:	    {
    #####: 1266:	      j++;
        -: 1267:	    }
        -: 1268:	}
    #####: 1269:      if (j < choice2)
        -: 1270:	{
    #####: 1271:	  return -1;				
        -: 1272:	}
        -: 1273:
        -: 1274:      if (DEBUG) 
        -: 1275:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1276:
        -: 1277:      //increase supply count for choosen card by amount being discarded
    #####: 1278:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1279:			
        -: 1280:      //each other player gains a copy of revealed card
    #####: 1281:      for (i = 0; i < state->numPlayers; i++)
        -: 1282:	{
    #####: 1283:	  if (i != currentPlayer)
        -: 1284:	    {
    #####: 1285:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1286:	    }
        -: 1287:	}
        -: 1288:
        -: 1289:      //discard played card from hand
    #####: 1290:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1291:
        -: 1292:      //trash copies of cards returned to supply
    #####: 1293:      for (j = 0; j < choice2; j++)
        -: 1294:	{
    #####: 1295:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1296:	    {
    #####: 1297:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1298:		{
    #####: 1299:		  discardCard(i, currentPlayer, state, 1);
    #####: 1300:		  break;
        -: 1301:		}
        -: 1302:	    }
        -: 1303:	}			
        -: 1304:
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case cutpurse:
        -: 1308:
    #####: 1309:      updateCoins(currentPlayer, state, 2);
    #####: 1310:      for (i = 0; i < state->numPlayers; i++)
        -: 1311:	{
    #####: 1312:	  if (i != currentPlayer)
        -: 1313:	    {
    #####: 1314:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1315:		{
    #####: 1316:		  if (state->hand[i][j] == copper)
        -: 1317:		    {
    #####: 1318:		      discardCard(j, i, state, 0);
    #####: 1319:		      break;
        -: 1320:		    }
    #####: 1321:		  if (j == state->handCount[i])
        -: 1322:		    {
    #####: 1323:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1324:			{
        -: 1325:			  if (DEBUG)
        -: 1326:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1327:			}	
    #####: 1328:		      break;
        -: 1329:		    }		
        -: 1330:		}
        -: 1331:					
        -: 1332:	    }
        -: 1333:				
        -: 1334:	}				
        -: 1335:
        -: 1336:      //discard played card from hand
    #####: 1337:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1338:
    #####: 1339:      return 0;
        -: 1340:
        -: 1341:		
        -: 1342:    case embargo: 
        -: 1343:      //+2 Coins
    #####: 1344:      state->coins = state->coins + 2;
        -: 1345:			
        -: 1346:      //see if selected pile is in play
    #####: 1347:      if ( state->supplyCount[choice1] == -1 )
        -: 1348:	{
    #####: 1349:	  return -1;
        -: 1350:	}
        -: 1351:			
        -: 1352:      //add embargo token to selected supply pile
    #####: 1353:      state->embargoTokens[choice1]++;
        -: 1354:			
        -: 1355:      //trash card
    #####: 1356:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1357:      return 0;
        -: 1358:		
        -: 1359:    case outpost:
        -: 1360:      //set outpost flag
       42: 1361:      state->outpostPlayed++;
        -: 1362:			
        -: 1363:      //discard card
       42: 1364:      discardCard(handPos, currentPlayer, state, 0);
       42: 1365:      return 0;
        -: 1366:		
        -: 1367:    case salvager:
        -: 1368:      //+1 buy
    #####: 1369:      state->numBuys++;
        -: 1370:			
    #####: 1371:      if (choice1)
        -: 1372:	{
        -: 1373:	  //gain coins equal to trashed card
    #####: 1374:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1375:	  //trash card
    #####: 1376:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1377:	}
        -: 1378:			
        -: 1379:      //discard card
    #####: 1380:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1381:      return 0;
        -: 1382:		
        -: 1383:    case sea_hag:
    #####: 1384:      for (i = 0; i < state->numPlayers; i++){
    #####: 1385:	if (i != currentPlayer){
    #####: 1386:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1387:	  state->discardCount[i]++;
    #####: 1388:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1389:	}
        -: 1390:      }
    #####: 1391:      return 0;
        -: 1392:		
        -: 1393:    case treasure_map:
        -: 1394:      //search hand for another treasure_map
    #####: 1395:      index = -1;
    #####: 1396:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1397:	{
    #####: 1398:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1399:	    {
    #####: 1400:	      index = i;
    #####: 1401:	      break;
        -: 1402:	    }
        -: 1403:	}
    #####: 1404:      if (index > -1)
        -: 1405:	{
        -: 1406:	  //trash both treasure cards
    #####: 1407:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1408:	  discardCard(index, currentPlayer, state, 1);
        -: 1409:
        -: 1410:	  //gain 4 Gold cards
    #####: 1411:	  for (i = 0; i < 4; i++)
        -: 1412:	    {
    #####: 1413:	      gainCard(gold, state, 1, currentPlayer);
        -: 1414:	    }
        -: 1415:				
        -: 1416:	  //return success
    #####: 1417:	  return 1;
        -: 1418:	}
        -: 1419:			
        -: 1420:      //no second treasure_map found in hand
    #####: 1421:      return -1;
        -: 1422:    }
        -: 1423:	
    #####: 1424:  return -1;
        -: 1425:}
        -: 1426:
        -: 1427:/********** END of cardEffct **********/
        -: 1428:
     3939: 1429:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1430:{
        -: 1431:	
        -: 1432:  //if card is not trashed, added to Played pile 
     3939: 1433:  if (trashFlag < 1)
        -: 1434:    {
        -: 1435:      //add card to played pile
     3939: 1436:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     3939: 1437:      state->playedCardCount++;
        -: 1438:    }
        -: 1439:	
        -: 1440:  //set played card to -1
     3939: 1441:  state->hand[currentPlayer][handPos] = -1;
        -: 1442:	
        -: 1443:  //remove card from player's hand
     3939: 1444:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1445:    {
        -: 1446:      //reduce number of cards in hand
      125: 1447:      state->handCount[currentPlayer]--;
        -: 1448:    }
     3814: 1449:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1450:    {
        -: 1451:      //reduce number of cards in hand
    #####: 1452:      state->handCount[currentPlayer]--;
        -: 1453:    }
        -: 1454:  else 	
        -: 1455:    {
        -: 1456:      //replace discarded card with last card in hand
     3814: 1457:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1458:      //set last card to -1
     3814: 1459:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1460:      //reduce number of cards in hand
     3814: 1461:      state->handCount[currentPlayer]--;
        -: 1462:    }
        -: 1463:	
     3939: 1464:  return 0;
        -: 1465:}
        -: 1466:
    #####: 1467:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1468:{
        -: 1469:  //Note: supplyPos is enum of choosen card
        -: 1470:	
        -: 1471:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1472:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1473:    {
    #####: 1474:      return -1;
        -: 1475:    }
        -: 1476:	
        -: 1477:  //added card for [whoseTurn] current player:
        -: 1478:  // toFlag = 0 : add to discard
        -: 1479:  // toFlag = 1 : add to deck
        -: 1480:  // toFlag = 2 : add to hand
        -: 1481:
    #####: 1482:  if (toFlag == 1)
        -: 1483:    {
    #####: 1484:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1485:      state->deckCount[player]++;
        -: 1486:    }
    #####: 1487:  else if (toFlag == 2)
        -: 1488:    {
    #####: 1489:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1490:      state->handCount[player]++;
        -: 1491:    }
        -: 1492:  else
        -: 1493:    {
    #####: 1494:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1495:      state->discardCount[player]++;
        -: 1496:    }
        -: 1497:	
        -: 1498:  //decrease number in supply pile
    #####: 1499:  state->supplyCount[supplyPos]--;
        -: 1500:	 
    #####: 1501:  return 0;
        -: 1502:}
        -: 1503:
        -: 1504:/***** Use this function for Unit test 2 *****/
     7692: 1505:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1506:{
        -: 1507:  int i;
        -: 1508:	
        -: 1509:  //reset coin count
     7692: 1510:  state->coins = 0;
        -: 1511:
        -: 1512:  //add coins for each Treasure card in player's hand
    46152: 1513:  for (i = 0; i < state->handCount[player]; i++)
        -: 1514:    {
    38460: 1515:      if (state->hand[player][i] == copper)
        -: 1516:	{
    30768: 1517:	  state->coins += 1;
        -: 1518:	}
     7692: 1519:      else if (state->hand[player][i] == silver)
        -: 1520:	{
    #####: 1521:	  state->coins += 2;
        -: 1522:	}
     7692: 1523:      else if (state->hand[player][i] == gold)
        -: 1524:	{
    #####: 1525:	  state->coins += 3;
        -: 1526:	}	
        -: 1527:    }	
        -: 1528:
        -: 1529:  //add bonus
     7692: 1530:  state->coins += bonus;
        -: 1531:
     7692: 1532:  return 0;
        -: 1533:}
        -: 1534:
        -: 1535:
        -: 1536://end of dominion.c
        -: 1537:
TESTING Adventuer_card():
Test: #1, Testing Player 1, with '0' cards in hand: 	Passed
Test: #2, Testing Player 1, with '1' cards in hand: 	Passed
Test: #3, Testing Player 1, with '2' cards in hand: 	Passed
Test: #4, Testing Player 1, with '3' cards in hand: 	Passed
Test: #5, Testing Player 1, with '4' cards in hand: 	Passed
Test: #6, Testing Player 1, with '5' cards in hand: 	Passed
Test: #7, Testing Player 1, with '6' cards in hand: 	Passed
Test: #8, Testing Player 1, with '7' cards in hand: 	Passed
Test: #9, Testing Player 1, with '8' cards in hand: 	Passed
Test: #10, Testing Player 1, with '9' cards in hand: 	Passed
Test: #11, Testing Player 1, with '10' cards in hand: 	Passed
Test: #12, Testing Player 1, with '11' cards in hand: 	Passed
Test: #13, Testing Player 1, with '12' cards in hand: 	Passed
Test: #14, Testing Player 1, with '13' cards in hand: 	Passed
Test: #15, Testing Player 1, with '14' cards in hand: 	Passed
Test: #16, Testing Player 1, with '15' cards in hand: 	Passed
Test: #17, Testing Player 1, with '16' cards in hand: 	Passed
Test: #18, Testing Player 1, with '17' cards in hand: 	Passed
Test: #19, Testing Player 1, with '18' cards in hand: 	Passed
Test: #20, Testing Player 1, with '19' cards in hand: 	Passed
Test: #21, Testing Player 1, with '20' cards in hand: 	Passed
Test: #22, Testing Player 1, with '21' cards in hand: 	Passed
Test: #23, Testing Player 1, with '22' cards in hand: 	Passed
Test: #24, Testing Player 1, with '23' cards in hand: 	Passed
Test: #25, Testing Player 1, with '24' cards in hand: 	Passed
Test: #26, Testing Player 1, with '25' cards in hand: 	Passed
Test: #27, Testing Player 1, with '26' cards in hand: 	Passed
Test: #28, Testing Player 1, with '27' cards in hand: 	Passed
Test: #29, Testing Player 1, with '28' cards in hand: 	Passed
Test: #30, Testing Player 1, with '29' cards in hand: 	Passed
Test: #31, Testing Player 1, with '30' cards in hand: 	Passed
Test: #32, Testing Player 1, with '31' cards in hand: 	Passed
Test: #33, Testing Player 1, with '32' cards in hand: 	Passed
Test: #34, Testing Player 1, with '33' cards in hand: 	Passed
Test: #35, Testing Player 1, with '34' cards in hand: 	Passed
Test: #36, Testing Player 1, with '35' cards in hand: 	Passed
Test: #37, Testing Player 1, with '36' cards in hand: 	Passed
Test: #38, Testing Player 1, with '37' cards in hand: 	Passed
Test: #39, Testing Player 1, with '38' cards in hand: 	Passed
Test: #40, Testing Player 1, with '39' cards in hand: 	Passed
Test: #41, Testing Player 1, with '40' cards in hand: 	Passed
Test: #42, Testing Player 1, with '41' cards in hand: 	Passed
Test: #43, Testing Player 1, with '42' cards in hand: 	Passed
Test: #44, Testing Player 1, with '43' cards in hand: 	Passed
Test: #45, Testing Player 1, with '44' cards in hand: 	Passed
Test: #46, Testing Player 1, with '45' cards in hand: 	Passed
Test: #47, Testing Player 1, with '46' cards in hand: 	Passed
Test: #48, Testing Player 1, with '47' cards in hand: 	Passed
Test: #49, Testing Player 1, with '48' cards in hand: 	Passed
Test: #50, Testing Player 1, with '49' cards in hand: 	Passed
Test: #51, Testing Player 1, with '50' cards in hand: 	Passed
Test: #52, Testing Player 1, with '51' cards in hand: 	Passed
Test: #53, Testing Player 1, with '52' cards in hand: 	Passed
Test: #54, Testing Player 1, with '53' cards in hand: 	Passed
Test: #55, Testing Player 1, with '54' cards in hand: 	Passed
Test: #56, Testing Player 1, with '55' cards in hand: 	Passed
Test: #57, Testing Player 1, with '56' cards in hand: 	Passed
Test: #58, Testing Player 1, with '57' cards in hand: 	Passed
Test: #59, Testing Player 1, with '58' cards in hand: 	Passed
Test: #60, Testing Player 1, with '59' cards in hand: 	Passed
Test: #61, Testing Player 1, with '60' cards in hand: 	Passed
Test: #62, Testing Player 1, with '61' cards in hand: 	Passed
Test: #63, Testing Player 1, with '62' cards in hand: 	Passed
Test: #64, Testing Player 1, with '63' cards in hand: 	Passed
Test: #65, Testing Player 1, with '64' cards in hand: 	Passed
Test: #66, Testing Player 1, with '65' cards in hand: 	Passed
Test: #67, Testing Player 1, with '66' cards in hand: 	Passed
Test: #68, Testing Player 1, with '67' cards in hand: 	Passed
Test: #69, Testing Player 1, with '68' cards in hand: 	Passed
Test: #70, Testing Player 1, with '69' cards in hand: 	Passed
Test: #71, Testing Player 1, with '70' cards in hand: 	Passed
Test: #72, Testing Player 1, with '71' cards in hand: 	Passed
Test: #73, Testing Player 1, with '72' cards in hand: 	Passed
Test: #74, Testing Player 1, with '73' cards in hand: 	Passed
Test: #75, Testing Player 1, with '74' cards in hand: 	Passed
Test: #76, Testing Player 1, with '75' cards in hand: 	Passed
Test: #77, Testing Player 1, with '76' cards in hand: 	Passed
Test: #78, Testing Player 1, with '77' cards in hand: 	Passed
Test: #79, Testing Player 1, with '78' cards in hand: 	Passed
Test: #80, Testing Player 1, with '79' cards in hand: 	Passed
Test: #81, Testing Player 1, with '80' cards in hand: 	Passed
Test: #82, Testing Player 1, with '81' cards in hand: 	Passed
Test: #83, Testing Player 1, with '82' cards in hand: 	Passed
Test: #84, Testing Player 1, with '83' cards in hand: 	Passed
Test: #85, Testing Player 1, with '84' cards in hand: 	Passed
Test: #86, Testing Player 1, with '85' cards in hand: 	Passed
Test: #87, Testing Player 1, with '86' cards in hand: 	Passed
Test: #88, Testing Player 1, with '87' cards in hand: 	Passed
Test: #89, Testing Player 1, with '88' cards in hand: 	Passed
Test: #90, Testing Player 1, with '89' cards in hand: 	Passed
Test: #91, Testing Player 1, with '90' cards in hand: 	Passed
Test: #92, Testing Player 1, with '91' cards in hand: 	Passed
Test: #93, Testing Player 1, with '92' cards in hand: 	Passed
Test: #94, Testing Player 1, with '93' cards in hand: 	Passed
Test: #95, Testing Player 1, with '94' cards in hand: 	Passed
Test: #96, Testing Player 1, with '95' cards in hand: 	Passed
Test: #97, Testing Player 1, with '96' cards in hand: 	Passed
Test: #98, Testing Player 1, with '97' cards in hand: 	Passed
Test: #99, Testing Player 1, with '98' cards in hand: 	Passed
Test: #100, Testing Player 1, with '99' cards in hand: 	Passed
Test: #101, Testing Player 1, with '100' cards in hand: 	Passed
Test: #102, Testing Player 1, with '101' cards in hand: 	Passed
Test: #103, Testing Player 1, with '102' cards in hand: 	Passed
Test: #104, Testing Player 1, with '103' cards in hand: 	Passed
Test: #105, Testing Player 1, with '104' cards in hand: 	Passed
Test: #106, Testing Player 1, with '105' cards in hand: 	Passed
Test: #107, Testing Player 1, with '106' cards in hand: 	Passed
Test: #108, Testing Player 1, with '107' cards in hand: 	Passed
Test: #109, Testing Player 1, with '108' cards in hand: 	Passed
Test: #110, Testing Player 1, with '109' cards in hand: 	Passed
Test: #111, Testing Player 1, with '110' cards in hand: 	Passed
Test: #112, Testing Player 1, with '111' cards in hand: 	Passed
Test: #113, Testing Player 1, with '112' cards in hand: 	Passed
Test: #114, Testing Player 1, with '113' cards in hand: 	Passed
Test: #115, Testing Player 1, with '114' cards in hand: 	Passed
Test: #116, Testing Player 1, with '115' cards in hand: 	Passed
Test: #117, Testing Player 1, with '116' cards in hand: 	Passed
Test: #118, Testing Player 1, with '117' cards in hand: 	Passed
Test: #119, Testing Player 1, with '118' cards in hand: 	Passed
Test: #120, Testing Player 1, with '119' cards in hand: 	Passed
Test: #121, Testing Player 1, with '120' cards in hand: 	Passed
Test: #122, Testing Player 1, with '121' cards in hand: 	Passed
Test: #123, Testing Player 1, with '122' cards in hand: 	Passed
Test: #124, Testing Player 1, with '123' cards in hand: 	Passed
Test: #125, Testing Player 1, with '124' cards in hand: 	Passed
Test: #126, Testing Player 1, with '125' cards in hand: 	Passed
Test: #127, Testing Player 1, with '126' cards in hand: 	Passed
Test: #128, Testing Player 1, with '127' cards in hand: 	Passed
Test: #129, Testing Player 1, with '128' cards in hand: 	Passed
Test: #130, Testing Player 1, with '129' cards in hand: 	Passed
Test: #131, Testing Player 1, with '130' cards in hand: 	Passed
Test: #132, Testing Player 1, with '131' cards in hand: 	Passed
Test: #133, Testing Player 1, with '132' cards in hand: 	Passed
Test: #134, Testing Player 1, with '133' cards in hand: 	Passed
Test: #135, Testing Player 1, with '134' cards in hand: 	Passed
Test: #136, Testing Player 1, with '135' cards in hand: 	Passed
Test: #137, Testing Player 1, with '136' cards in hand: 	Passed
Test: #138, Testing Player 1, with '137' cards in hand: 	Passed
Test: #139, Testing Player 1, with '138' cards in hand: 	Passed
Test: #140, Testing Player 1, with '139' cards in hand: 	Passed
Test: #141, Testing Player 1, with '140' cards in hand: 	Passed
Test: #142, Testing Player 1, with '141' cards in hand: 	Passed
Test: #143, Testing Player 1, with '142' cards in hand: 	Passed
Test: #144, Testing Player 1, with '143' cards in hand: 	Passed
Test: #145, Testing Player 1, with '144' cards in hand: 	Passed
Test: #146, Testing Player 1, with '145' cards in hand: 	Passed
Test: #147, Testing Player 1, with '146' cards in hand: 	Passed
Test: #148, Testing Player 1, with '147' cards in hand: 	Passed
Test: #149, Testing Player 1, with '148' cards in hand: 	Passed
Test: #150, Testing Player 1, with '149' cards in hand: 	Passed
Test: #151, Testing Player 1, with '150' cards in hand: 	Passed
Test: #152, Testing Player 1, with '151' cards in hand: 	Passed
Test: #153, Testing Player 1, with '152' cards in hand: 	Passed
Test: #154, Testing Player 1, with '153' cards in hand: 	Passed
Test: #155, Testing Player 1, with '154' cards in hand: 	Passed
Test: #156, Testing Player 1, with '155' cards in hand: 	Passed
Test: #157, Testing Player 1, with '156' cards in hand: 	Passed
Test: #158, Testing Player 1, with '157' cards in hand: 	Passed
Test: #159, Testing Player 1, with '158' cards in hand: 	Passed
Test: #160, Testing Player 1, with '159' cards in hand: 	Passed
Test: #161, Testing Player 1, with '160' cards in hand: 	Passed
Test: #162, Testing Player 1, with '161' cards in hand: 	Passed
Test: #163, Testing Player 1, with '162' cards in hand: 	Passed
Test: #164, Testing Player 1, with '163' cards in hand: 	Passed
Test: #165, Testing Player 1, with '164' cards in hand: 	Passed
Test: #166, Testing Player 1, with '165' cards in hand: 	Passed
Test: #167, Testing Player 1, with '166' cards in hand: 	Passed
Test: #168, Testing Player 1, with '167' cards in hand: 	Passed
Test: #169, Testing Player 1, with '168' cards in hand: 	Passed
Test: #170, Testing Player 1, with '169' cards in hand: 	Passed
Test: #171, Testing Player 1, with '170' cards in hand: 	Passed
Test: #172, Testing Player 1, with '171' cards in hand: 	Passed
Test: #173, Testing Player 1, with '172' cards in hand: 	Passed
Test: #174, Testing Player 1, with '173' cards in hand: 	Passed
Test: #175, Testing Player 1, with '174' cards in hand: 	Passed
Test: #176, Testing Player 1, with '175' cards in hand: 	Passed
Test: #177, Testing Player 1, with '176' cards in hand: 	Passed
Test: #178, Testing Player 1, with '177' cards in hand: 	Passed
Test: #179, Testing Player 1, with '178' cards in hand: 	Passed
Test: #180, Testing Player 1, with '179' cards in hand: 	Passed
Test: #181, Testing Player 1, with '180' cards in hand: 	Passed
Test: #182, Testing Player 1, with '181' cards in hand: 	Passed
Test: #183, Testing Player 1, with '182' cards in hand: 	Passed
Test: #184, Testing Player 1, with '183' cards in hand: 	Passed
Test: #185, Testing Player 1, with '184' cards in hand: 	Passed
Test: #186, Testing Player 1, with '185' cards in hand: 	Passed
Test: #187, Testing Player 1, with '186' cards in hand: 	Passed
Test: #188, Testing Player 1, with '187' cards in hand: 	Passed
Test: #189, Testing Player 1, with '188' cards in hand: 	Passed
Test: #190, Testing Player 1, with '189' cards in hand: 	Passed
Test: #191, Testing Player 1, with '190' cards in hand: 	Passed
Test: #192, Testing Player 1, with '191' cards in hand: 	Passed
Test: #193, Testing Player 1, with '192' cards in hand: 	Passed
Test: #194, Testing Player 1, with '193' cards in hand: 	Passed
Test: #195, Testing Player 1, with '194' cards in hand: 	Passed
Test: #196, Testing Player 1, with '195' cards in hand: 	Passed
Test: #197, Testing Player 1, with '196' cards in hand: 	Passed
Test: #198, Testing Player 1, with '197' cards in hand: 	Passed
Test: #199, Testing Player 1, with '198' cards in hand: 	Passed
Test: #200, Testing Player 1, with '199' cards in hand: 	Passed
Test: #201, Testing Player 1, with '200' cards in hand: 	Passed
Test: #202, Testing Player 1, with '201' cards in hand: 	Passed
Test: #203, Testing Player 1, with '202' cards in hand: 	Passed
Test: #204, Testing Player 1, with '203' cards in hand: 	Passed
Test: #205, Testing Player 1, with '204' cards in hand: 	Passed
Test: #206, Testing Player 1, with '205' cards in hand: 	Passed
Test: #207, Testing Player 1, with '206' cards in hand: 	Passed
Test: #208, Testing Player 1, with '207' cards in hand: 	Passed
Test: #209, Testing Player 1, with '208' cards in hand: 	Passed
Test: #210, Testing Player 1, with '209' cards in hand: 	Passed
Test: #211, Testing Player 1, with '210' cards in hand: 	Passed
Test: #212, Testing Player 1, with '211' cards in hand: 	Passed
Test: #213, Testing Player 1, with '212' cards in hand: 	Passed
Test: #214, Testing Player 1, with '213' cards in hand: 	Passed
Test: #215, Testing Player 1, with '214' cards in hand: 	Passed
Test: #216, Testing Player 1, with '215' cards in hand: 	Passed
Test: #217, Testing Player 1, with '216' cards in hand: 	Passed
Test: #218, Testing Player 1, with '217' cards in hand: 	Passed
Test: #219, Testing Player 1, with '218' cards in hand: 	Passed
Test: #220, Testing Player 1, with '219' cards in hand: 	Passed
Test: #221, Testing Player 1, with '220' cards in hand: 	Passed
Test: #222, Testing Player 1, with '221' cards in hand: 	Passed
Test: #223, Testing Player 1, with '222' cards in hand: 	Passed
Test: #224, Testing Player 1, with '223' cards in hand: 	Passed
Test: #225, Testing Player 1, with '224' cards in hand: 	Passed
Test: #226, Testing Player 1, with '225' cards in hand: 	Passed
Test: #227, Testing Player 1, with '226' cards in hand: 	Passed
Test: #228, Testing Player 1, with '227' cards in hand: 	Passed
Test: #229, Testing Player 1, with '228' cards in hand: 	Passed
Test: #230, Testing Player 1, with '229' cards in hand: 	Passed
Test: #231, Testing Player 1, with '230' cards in hand: 	Passed
Test: #232, Testing Player 1, with '231' cards in hand: 	Passed
Test: #233, Testing Player 1, with '232' cards in hand: 	Passed
Test: #234, Testing Player 1, with '233' cards in hand: 	Passed
Test: #235, Testing Player 1, with '234' cards in hand: 	Passed
Test: #236, Testing Player 1, with '235' cards in hand: 	Passed
Test: #237, Testing Player 1, with '236' cards in hand: 	Passed
Test: #238, Testing Player 1, with '237' cards in hand: 	Passed
Test: #239, Testing Player 1, with '238' cards in hand: 	Passed
Test: #240, Testing Player 1, with '239' cards in hand: 	Passed
Test: #241, Testing Player 1, with '240' cards in hand: 	Passed
Test: #242, Testing Player 1, with '241' cards in hand: 	Passed
Test: #243, Testing Player 1, with '242' cards in hand: 	Passed
Test: #244, Testing Player 1, with '243' cards in hand: 	Passed
Test: #245, Testing Player 1, with '244' cards in hand: 	Passed
Test: #246, Testing Player 1, with '245' cards in hand: 	Passed
Test: #247, Testing Player 1, with '246' cards in hand: 	Passed
Test: #248, Testing Player 1, with '247' cards in hand: 	Passed
Test: #249, Testing Player 1, with '248' cards in hand: 	Passed
Test: #250, Testing Player 1, with '249' cards in hand: 	Passed
Test: #251, Testing Player 1, with '250' cards in hand: 	Passed
Test: #252, Testing Player 1, with '251' cards in hand: 	Passed
Test: #253, Testing Player 1, with '252' cards in hand: 	Passed
Test: #254, Testing Player 1, with '253' cards in hand: 	Passed
Test: #255, Testing Player 1, with '254' cards in hand: 	Passed
Test: #256, Testing Player 1, with '255' cards in hand: 	Passed
Test: #257, Testing Player 1, with '256' cards in hand: 	Passed
Test: #258, Testing Player 1, with '257' cards in hand: 	Passed
Test: #259, Testing Player 1, with '258' cards in hand: 	Passed
Test: #260, Testing Player 1, with '259' cards in hand: 	Passed
Test: #261, Testing Player 1, with '260' cards in hand: 	Passed
Test: #262, Testing Player 1, with '261' cards in hand: 	Passed
Test: #263, Testing Player 1, with '262' cards in hand: 	Passed
Test: #264, Testing Player 1, with '263' cards in hand: 	Passed
Test: #265, Testing Player 1, with '264' cards in hand: 	Passed
Test: #266, Testing Player 1, with '265' cards in hand: 	Passed
Test: #267, Testing Player 1, with '266' cards in hand: 	Passed
Test: #268, Testing Player 1, with '267' cards in hand: 	Passed
Test: #269, Testing Player 1, with '268' cards in hand: 	Passed
Test: #270, Testing Player 1, with '269' cards in hand: 	Passed
Test: #271, Testing Player 1, with '270' cards in hand: 	Passed
Test: #272, Testing Player 1, with '271' cards in hand: 	Passed
Test: #273, Testing Player 1, with '272' cards in hand: 	Passed
Test: #274, Testing Player 1, with '273' cards in hand: 	Passed
Test: #275, Testing Player 1, with '274' cards in hand: 	Passed
Test: #276, Testing Player 1, with '275' cards in hand: 	Passed
Test: #277, Testing Player 1, with '276' cards in hand: 	Passed
Test: #278, Testing Player 1, with '277' cards in hand: 	Passed
Test: #279, Testing Player 1, with '278' cards in hand: 	Passed
Test: #280, Testing Player 1, with '279' cards in hand: 	Passed
Test: #281, Testing Player 1, with '280' cards in hand: 	Passed
Test: #282, Testing Player 1, with '281' cards in hand: 	Passed
Test: #283, Testing Player 1, with '282' cards in hand: 	Passed
Test: #284, Testing Player 1, with '283' cards in hand: 	Passed
Test: #285, Testing Player 1, with '284' cards in hand: 	Passed
Test: #286, Testing Player 1, with '285' cards in hand: 	Passed
Test: #287, Testing Player 1, with '286' cards in hand: 	Passed
Test: #288, Testing Player 1, with '287' cards in hand: 	Passed
Test: #289, Testing Player 1, with '288' cards in hand: 	Passed
Test: #290, Testing Player 1, with '289' cards in hand: 	Passed
Test: #291, Testing Player 1, with '290' cards in hand: 	Passed
Test: #292, Testing Player 1, with '291' cards in hand: 	Passed
Test: #293, Testing Player 1, with '292' cards in hand: 	Passed
Test: #294, Testing Player 1, with '293' cards in hand: 	Passed
Test: #295, Testing Player 1, with '294' cards in hand: 	Passed
Test: #296, Testing Player 1, with '295' cards in hand: 	Passed
Test: #297, Testing Player 1, with '296' cards in hand: 	Passed
Test: #298, Testing Player 1, with '297' cards in hand: 	Passed
Test: #299, Testing Player 1, with '298' cards in hand: 	Passed
Test: #300, Testing Player 1, with '299' cards in hand: 	Passed
Test: #301, Testing Player 1, with '300' cards in hand: 	Passed
Test: #302, Testing Player 1, with '301' cards in hand: 	Passed
Test: #303, Testing Player 1, with '302' cards in hand: 	Passed
Test: #304, Testing Player 1, with '303' cards in hand: 	Passed
Test: #305, Testing Player 1, with '304' cards in hand: 	Passed
Test: #306, Testing Player 1, with '305' cards in hand: 	Passed
Test: #307, Testing Player 1, with '306' cards in hand: 	Passed
Test: #308, Testing Player 1, with '307' cards in hand: 	Passed
Test: #309, Testing Player 1, with '308' cards in hand: 	Passed
Test: #310, Testing Player 1, with '309' cards in hand: 	Passed
Test: #311, Testing Player 1, with '310' cards in hand: 	Passed
Test: #312, Testing Player 1, with '311' cards in hand: 	Passed
Test: #313, Testing Player 1, with '312' cards in hand: 	Passed
Test: #314, Testing Player 1, with '313' cards in hand: 	Passed
Test: #315, Testing Player 1, with '314' cards in hand: 	Passed
Test: #316, Testing Player 1, with '315' cards in hand: 	Passed
Test: #317, Testing Player 1, with '316' cards in hand: 	Passed
Test: #318, Testing Player 1, with '317' cards in hand: 	Passed
Test: #319, Testing Player 1, with '318' cards in hand: 	Passed
Test: #320, Testing Player 1, with '319' cards in hand: 	Passed
Test: #321, Testing Player 1, with '320' cards in hand: 	Passed
Test: #322, Testing Player 1, with '321' cards in hand: 	Passed
Test: #323, Testing Player 1, with '322' cards in hand: 	Passed
Test: #324, Testing Player 1, with '323' cards in hand: 	Passed
Test: #325, Testing Player 1, with '324' cards in hand: 	Passed
Test: #326, Testing Player 1, with '325' cards in hand: 	Passed
Test: #327, Testing Player 1, with '326' cards in hand: 	Passed
Test: #328, Testing Player 1, with '327' cards in hand: 	Passed
Test: #329, Testing Player 1, with '328' cards in hand: 	Passed
Test: #330, Testing Player 1, with '329' cards in hand: 	Passed
Test: #331, Testing Player 1, with '330' cards in hand: 	Passed
Test: #332, Testing Player 1, with '331' cards in hand: 	Passed
Test: #333, Testing Player 1, with '332' cards in hand: 	Passed
Test: #334, Testing Player 1, with '333' cards in hand: 	Passed
Test: #335, Testing Player 1, with '334' cards in hand: 	Passed
Test: #336, Testing Player 1, with '335' cards in hand: 	Passed
Test: #337, Testing Player 1, with '336' cards in hand: 	Passed
Test: #338, Testing Player 1, with '337' cards in hand: 	Passed
Test: #339, Testing Player 1, with '338' cards in hand: 	Passed
Test: #340, Testing Player 1, with '339' cards in hand: 	Passed
Test: #341, Testing Player 1, with '340' cards in hand: 	Passed
Test: #342, Testing Player 1, with '341' cards in hand: 	Passed
Test: #343, Testing Player 1, with '342' cards in hand: 	Passed
Test: #344, Testing Player 1, with '343' cards in hand: 	Passed
Test: #345, Testing Player 1, with '344' cards in hand: 	Passed
Test: #346, Testing Player 1, with '345' cards in hand: 	Passed
Test: #347, Testing Player 1, with '346' cards in hand: 	Passed
Test: #348, Testing Player 1, with '347' cards in hand: 	Passed
Test: #349, Testing Player 1, with '348' cards in hand: 	Passed
Test: #350, Testing Player 1, with '349' cards in hand: 	Passed
Test: #351, Testing Player 1, with '350' cards in hand: 	Passed
Test: #352, Testing Player 1, with '351' cards in hand: 	Passed
Test: #353, Testing Player 1, with '352' cards in hand: 	Passed
Test: #354, Testing Player 1, with '353' cards in hand: 	Passed
Test: #355, Testing Player 1, with '354' cards in hand: 	Passed
Test: #356, Testing Player 1, with '355' cards in hand: 	Passed
Test: #357, Testing Player 1, with '356' cards in hand: 	Passed
Test: #358, Testing Player 1, with '357' cards in hand: 	Passed
Test: #359, Testing Player 1, with '358' cards in hand: 	Passed
Test: #360, Testing Player 1, with '359' cards in hand: 	Passed
Test: #361, Testing Player 1, with '360' cards in hand: 	Passed
Test: #362, Testing Player 1, with '361' cards in hand: 	Passed
Test: #363, Testing Player 1, with '362' cards in hand: 	Passed
Test: #364, Testing Player 1, with '363' cards in hand: 	Passed
Test: #365, Testing Player 1, with '364' cards in hand: 	Passed
Test: #366, Testing Player 1, with '365' cards in hand: 	Passed
Test: #367, Testing Player 1, with '366' cards in hand: 	Passed
Test: #368, Testing Player 1, with '367' cards in hand: 	Passed
Test: #369, Testing Player 1, with '368' cards in hand: 	Passed
Test: #370, Testing Player 1, with '369' cards in hand: 	Passed
Test: #371, Testing Player 1, with '370' cards in hand: 	Passed
Test: #372, Testing Player 1, with '371' cards in hand: 	Passed
Test: #373, Testing Player 1, with '372' cards in hand: 	Passed
Test: #374, Testing Player 1, with '373' cards in hand: 	Passed
Test: #375, Testing Player 1, with '374' cards in hand: 	Passed
Test: #376, Testing Player 1, with '375' cards in hand: 	Passed
Test: #377, Testing Player 1, with '376' cards in hand: 	Passed
Test: #378, Testing Player 1, with '377' cards in hand: 	Passed
Test: #379, Testing Player 1, with '378' cards in hand: 	Passed
Test: #380, Testing Player 1, with '379' cards in hand: 	Passed
Test: #381, Testing Player 1, with '380' cards in hand: 	Passed
Test: #382, Testing Player 1, with '381' cards in hand: 	Passed
Test: #383, Testing Player 1, with '382' cards in hand: 	Passed
Test: #384, Testing Player 1, with '383' cards in hand: 	Passed
Test: #385, Testing Player 1, with '384' cards in hand: 	Passed
Test: #386, Testing Player 1, with '385' cards in hand: 	Passed
Test: #387, Testing Player 1, with '386' cards in hand: 	Passed
Test: #388, Testing Player 1, with '387' cards in hand: 	Passed
Test: #389, Testing Player 1, with '388' cards in hand: 	Passed
Test: #390, Testing Player 1, with '389' cards in hand: 	Passed
Test: #391, Testing Player 1, with '390' cards in hand: 	Passed
Test: #392, Testing Player 1, with '391' cards in hand: 	Passed
Test: #393, Testing Player 1, with '392' cards in hand: 	Passed
Test: #394, Testing Player 1, with '393' cards in hand: 	Passed
Test: #395, Testing Player 1, with '394' cards in hand: 	Passed
Test: #396, Testing Player 1, with '395' cards in hand: 	Passed
Test: #397, Testing Player 1, with '396' cards in hand: 	Passed
Test: #398, Testing Player 1, with '397' cards in hand: 	Passed
Test: #399, Testing Player 1, with '398' cards in hand: 	Passed
Test: #400, Testing Player 1, with '399' cards in hand: 	Passed
Test: #401, Testing Player 1, with '400' cards in hand: 	Passed
Test: #402, Testing Player 1, with '401' cards in hand: 	Passed
Test: #403, Testing Player 1, with '402' cards in hand: 	Passed
Test: #404, Testing Player 1, with '403' cards in hand: 	Passed
Test: #405, Testing Player 1, with '404' cards in hand: 	Passed
Test: #406, Testing Player 1, with '405' cards in hand: 	Passed
Test: #407, Testing Player 1, with '406' cards in hand: 	Passed
Test: #408, Testing Player 1, with '407' cards in hand: 	Passed
Test: #409, Testing Player 1, with '408' cards in hand: 	Passed
Test: #410, Testing Player 1, with '409' cards in hand: 	Passed
Test: #411, Testing Player 1, with '410' cards in hand: 	Passed
Test: #412, Testing Player 1, with '411' cards in hand: 	Passed
Test: #413, Testing Player 1, with '412' cards in hand: 	Passed
Test: #414, Testing Player 1, with '413' cards in hand: 	Passed
Test: #415, Testing Player 1, with '414' cards in hand: 	Passed
Test: #416, Testing Player 1, with '415' cards in hand: 	Passed
Test: #417, Testing Player 1, with '416' cards in hand: 	Passed
Test: #418, Testing Player 1, with '417' cards in hand: 	Passed
Test: #419, Testing Player 1, with '418' cards in hand: 	Passed
Test: #420, Testing Player 1, with '419' cards in hand: 	Passed
Test: #421, Testing Player 1, with '420' cards in hand: 	Passed
Test: #422, Testing Player 1, with '421' cards in hand: 	Passed
Test: #423, Testing Player 1, with '422' cards in hand: 	Passed
Test: #424, Testing Player 1, with '423' cards in hand: 	Passed
Test: #425, Testing Player 1, with '424' cards in hand: 	Passed
Test: #426, Testing Player 1, with '425' cards in hand: 	Passed
Test: #427, Testing Player 1, with '426' cards in hand: 	Passed
Test: #428, Testing Player 1, with '427' cards in hand: 	Passed
Test: #429, Testing Player 1, with '428' cards in hand: 	Passed
Test: #430, Testing Player 1, with '429' cards in hand: 	Passed
Test: #431, Testing Player 1, with '430' cards in hand: 	Passed
Test: #432, Testing Player 1, with '431' cards in hand: 	Passed
Test: #433, Testing Player 1, with '432' cards in hand: 	Passed
Test: #434, Testing Player 1, with '433' cards in hand: 	Passed
Test: #435, Testing Player 1, with '434' cards in hand: 	Passed
Test: #436, Testing Player 1, with '435' cards in hand: 	Passed
Test: #437, Testing Player 1, with '436' cards in hand: 	Passed
Test: #438, Testing Player 1, with '437' cards in hand: 	Passed
Test: #439, Testing Player 1, with '438' cards in hand: 	Passed
Test: #440, Testing Player 1, with '439' cards in hand: 	Passed
Test: #441, Testing Player 1, with '440' cards in hand: 	Passed
Test: #442, Testing Player 1, with '441' cards in hand: 	Passed
Test: #443, Testing Player 1, with '442' cards in hand: 	Passed
Test: #444, Testing Player 1, with '443' cards in hand: 	Passed
Test: #445, Testing Player 1, with '444' cards in hand: 	Passed
Test: #446, Testing Player 1, with '445' cards in hand: 	Passed
Test: #447, Testing Player 1, with '446' cards in hand: 	Passed
Test: #448, Testing Player 1, with '447' cards in hand: 	Passed
Test: #449, Testing Player 1, with '448' cards in hand: 	Passed
Test: #450, Testing Player 1, with '449' cards in hand: 	Passed
Test: #451, Testing Player 1, with '450' cards in hand: 	Passed
Test: #452, Testing Player 1, with '451' cards in hand: 	Passed
Test: #453, Testing Player 1, with '452' cards in hand: 	Passed
Test: #454, Testing Player 1, with '453' cards in hand: 	Passed
Test: #455, Testing Player 1, with '454' cards in hand: 	Passed
Test: #456, Testing Player 1, with '455' cards in hand: 	Passed
Test: #457, Testing Player 1, with '456' cards in hand: 	Passed
Test: #458, Testing Player 1, with '457' cards in hand: 	Passed
Test: #459, Testing Player 1, with '458' cards in hand: 	Passed
Test: #460, Testing Player 1, with '459' cards in hand: 	Passed
Test: #461, Testing Player 1, with '460' cards in hand: 	Passed
Test: #462, Testing Player 1, with '461' cards in hand: 	Passed
Test: #463, Testing Player 1, with '462' cards in hand: 	Passed
Test: #464, Testing Player 1, with '463' cards in hand: 	Passed
Test: #465, Testing Player 1, with '464' cards in hand: 	Passed
Test: #466, Testing Player 1, with '465' cards in hand: 	Passed
Test: #467, Testing Player 1, with '466' cards in hand: 	Passed
Test: #468, Testing Player 1, with '467' cards in hand: 	Passed
Test: #469, Testing Player 1, with '468' cards in hand: 	Passed
Test: #470, Testing Player 1, with '469' cards in hand: 	Passed
Test: #471, Testing Player 1, with '470' cards in hand: 	Passed
Test: #472, Testing Player 1, with '471' cards in hand: 	Passed
Test: #473, Testing Player 1, with '472' cards in hand: 	Passed
Test: #474, Testing Player 1, with '473' cards in hand: 	Passed
Test: #475, Testing Player 1, with '474' cards in hand: 	Passed
Test: #476, Testing Player 1, with '475' cards in hand: 	Passed
Test: #477, Testing Player 1, with '476' cards in hand: 	Passed
Test: #478, Testing Player 1, with '477' cards in hand: 	Passed
Test: #479, Testing Player 1, with '478' cards in hand: 	Passed
Test: #480, Testing Player 1, with '479' cards in hand: 	Passed
Test: #481, Testing Player 1, with '480' cards in hand: 	Passed
Test: #482, Testing Player 1, with '481' cards in hand: 	Passed
Test: #483, Testing Player 1, with '482' cards in hand: 	Passed
Test: #484, Testing Player 1, with '483' cards in hand: 	Passed
Test: #485, Testing Player 1, with '484' cards in hand: 	Passed
Test: #486, Testing Player 1, with '485' cards in hand: 	Passed
Test: #487, Testing Player 1, with '486' cards in hand: 	Passed
Test: #488, Testing Player 1, with '487' cards in hand: 	Passed
Test: #489, Testing Player 1, with '488' cards in hand: 	Passed
Test: #490, Testing Player 1, with '489' cards in hand: 	Passed
Test: #491, Testing Player 1, with '490' cards in hand: 	Passed
Test: #492, Testing Player 1, with '491' cards in hand: 	Passed
Test: #493, Testing Player 1, with '492' cards in hand: 	Passed
Test: #494, Testing Player 1, with '493' cards in hand: 	Passed
Test: #495, Testing Player 1, with '494' cards in hand: 	Passed
Test: #496, Testing Player 1, with '495' cards in hand: 	Passed
Test: #497, Testing Player 1, with '496' cards in hand: 	Passed
Test: #498, Testing Player 1, with '497' cards in hand: 	Passed
Test: #499, Testing Player 1, with '498' cards in hand: 	Passed
Test: #500, Testing Player 1, with '499' cards in hand: 	Passed
Test: #501, Testing Player 1, with '500' cards in hand: 	Passed
Test: #502, Testing Player 2, with '0' cards in hand: 	Passed
Test: #503, Testing Player 2, with '1' cards in hand: 	Passed
Test: #504, Testing Player 2, with '2' cards in hand: 	Passed
Test: #505, Testing Player 2, with '3' cards in hand: 	Passed
Test: #506, Testing Player 2, with '4' cards in hand: 	Passed
Test: #507, Testing Player 2, with '5' cards in hand: 	Passed
Test: #508, Testing Player 2, with '6' cards in hand: 	Passed
Test: #509, Testing Player 2, with '7' cards in hand: 	Passed
Test: #510, Testing Player 2, with '8' cards in hand: 	Passed
Test: #511, Testing Player 2, with '9' cards in hand: 	Passed
Test: #512, Testing Player 2, with '10' cards in hand: 	Passed
Test: #513, Testing Player 2, with '11' cards in hand: 	Passed
Test: #514, Testing Player 2, with '12' cards in hand: 	Passed
Test: #515, Testing Player 2, with '13' cards in hand: 	Passed
Test: #516, Testing Player 2, with '14' cards in hand: 	Passed
Test: #517, Testing Player 2, with '15' cards in hand: 	Passed
Test: #518, Testing Player 2, with '16' cards in hand: 	Passed
Test: #519, Testing Player 2, with '17' cards in hand: 	Passed
Test: #520, Testing Player 2, with '18' cards in hand: 	Passed
Test: #521, Testing Player 2, with '19' cards in hand: 	Passed
Test: #522, Testing Player 2, with '20' cards in hand: 	Passed
Test: #523, Testing Player 2, with '21' cards in hand: 	Passed
Test: #524, Testing Player 2, with '22' cards in hand: 	Passed
Test: #525, Testing Player 2, with '23' cards in hand: 	Passed
Test: #526, Testing Player 2, with '24' cards in hand: 	Passed
Test: #527, Testing Player 2, with '25' cards in hand: 	Passed
Test: #528, Testing Player 2, with '26' cards in hand: 	Passed
Test: #529, Testing Player 2, with '27' cards in hand: 	Passed
Test: #530, Testing Player 2, with '28' cards in hand: 	Passed
Test: #531, Testing Player 2, with '29' cards in hand: 	Passed
Test: #532, Testing Player 2, with '30' cards in hand: 	Passed
Test: #533, Testing Player 2, with '31' cards in hand: 	Passed
Test: #534, Testing Player 2, with '32' cards in hand: 	Passed
Test: #535, Testing Player 2, with '33' cards in hand: 	Passed
Test: #536, Testing Player 2, with '34' cards in hand: 	Passed
Test: #537, Testing Player 2, with '35' cards in hand: 	Passed
Test: #538, Testing Player 2, with '36' cards in hand: 	Passed
Test: #539, Testing Player 2, with '37' cards in hand: 	Passed
Test: #540, Testing Player 2, with '38' cards in hand: 	Passed
Test: #541, Testing Player 2, with '39' cards in hand: 	Passed
Test: #542, Testing Player 2, with '40' cards in hand: 	Passed
Test: #543, Testing Player 2, with '41' cards in hand: 	Passed
Test: #544, Testing Player 2, with '42' cards in hand: 	Passed
Test: #545, Testing Player 2, with '43' cards in hand: 	Passed
Test: #546, Testing Player 2, with '44' cards in hand: 	Passed
Test: #547, Testing Player 2, with '45' cards in hand: 	Passed
Test: #548, Testing Player 2, with '46' cards in hand: 	Passed
Test: #549, Testing Player 2, with '47' cards in hand: 	Passed
Test: #550, Testing Player 2, with '48' cards in hand: 	Passed
Test: #551, Testing Player 2, with '49' cards in hand: 	Passed
Test: #552, Testing Player 2, with '50' cards in hand: 	Passed
Test: #553, Testing Player 2, with '51' cards in hand: 	Passed
Test: #554, Testing Player 2, with '52' cards in hand: 	Passed
Test: #555, Testing Player 2, with '53' cards in hand: 	Passed
Test: #556, Testing Player 2, with '54' cards in hand: 	Passed
Test: #557, Testing Player 2, with '55' cards in hand: 	Passed
Test: #558, Testing Player 2, with '56' cards in hand: 	Passed
Test: #559, Testing Player 2, with '57' cards in hand: 	Passed
Test: #560, Testing Player 2, with '58' cards in hand: 	Passed
Test: #561, Testing Player 2, with '59' cards in hand: 	Passed
Test: #562, Testing Player 2, with '60' cards in hand: 	Passed
Test: #563, Testing Player 2, with '61' cards in hand: 	Passed
Test: #564, Testing Player 2, with '62' cards in hand: 	Passed
Test: #565, Testing Player 2, with '63' cards in hand: 	Passed
Test: #566, Testing Player 2, with '64' cards in hand: 	Passed
Test: #567, Testing Player 2, with '65' cards in hand: 	Passed
Test: #568, Testing Player 2, with '66' cards in hand: 	Passed
Test: #569, Testing Player 2, with '67' cards in hand: 	Passed
Test: #570, Testing Player 2, with '68' cards in hand: 	Passed
Test: #571, Testing Player 2, with '69' cards in hand: 	Passed
Test: #572, Testing Player 2, with '70' cards in hand: 	Passed
Test: #573, Testing Player 2, with '71' cards in hand: 	Passed
Test: #574, Testing Player 2, with '72' cards in hand: 	Passed
Test: #575, Testing Player 2, with '73' cards in hand: 	Passed
Test: #576, Testing Player 2, with '74' cards in hand: 	Passed
Test: #577, Testing Player 2, with '75' cards in hand: 	Passed
Test: #578, Testing Player 2, with '76' cards in hand: 	Passed
Test: #579, Testing Player 2, with '77' cards in hand: 	Passed
Test: #580, Testing Player 2, with '78' cards in hand: 	Passed
Test: #581, Testing Player 2, with '79' cards in hand: 	Passed
Test: #582, Testing Player 2, with '80' cards in hand: 	Passed
Test: #583, Testing Player 2, with '81' cards in hand: 	Passed
Test: #584, Testing Player 2, with '82' cards in hand: 	Passed
Test: #585, Testing Player 2, with '83' cards in hand: 	Passed
Test: #586, Testing Player 2, with '84' cards in hand: 	Passed
Test: #587, Testing Player 2, with '85' cards in hand: 	Passed
Test: #588, Testing Player 2, with '86' cards in hand: 	Passed
Test: #589, Testing Player 2, with '87' cards in hand: 	Passed
Test: #590, Testing Player 2, with '88' cards in hand: 	Passed
Test: #591, Testing Player 2, with '89' cards in hand: 	Passed
Test: #592, Testing Player 2, with '90' cards in hand: 	Passed
Test: #593, Testing Player 2, with '91' cards in hand: 	Passed
Test: #594, Testing Player 2, with '92' cards in hand: 	Passed
Test: #595, Testing Player 2, with '93' cards in hand: 	Passed
Test: #596, Testing Player 2, with '94' cards in hand: 	Passed
Test: #597, Testing Player 2, with '95' cards in hand: 	Passed
Test: #598, Testing Player 2, with '96' cards in hand: 	Passed
Test: #599, Testing Player 2, with '97' cards in hand: 	Passed
Test: #600, Testing Player 2, with '98' cards in hand: 	Passed
Test: #601, Testing Player 2, with '99' cards in hand: 	Passed
Test: #602, Testing Player 2, with '100' cards in hand: 	Passed
Test: #603, Testing Player 2, with '101' cards in hand: 	Passed
Test: #604, Testing Player 2, with '102' cards in hand: 	Passed
Test: #605, Testing Player 2, with '103' cards in hand: 	Passed
Test: #606, Testing Player 2, with '104' cards in hand: 	Passed
Test: #607, Testing Player 2, with '105' cards in hand: 	Passed
Test: #608, Testing Player 2, with '106' cards in hand: 	Passed
Test: #609, Testing Player 2, with '107' cards in hand: 	Passed
Test: #610, Testing Player 2, with '108' cards in hand: 	Passed
Test: #611, Testing Player 2, with '109' cards in hand: 	Passed
Test: #612, Testing Player 2, with '110' cards in hand: 	Passed
Test: #613, Testing Player 2, with '111' cards in hand: 	Passed
Test: #614, Testing Player 2, with '112' cards in hand: 	Passed
Test: #615, Testing Player 2, with '113' cards in hand: 	Passed
Test: #616, Testing Player 2, with '114' cards in hand: 	Passed
Test: #617, Testing Player 2, with '115' cards in hand: 	Passed
Test: #618, Testing Player 2, with '116' cards in hand: 	Passed
Test: #619, Testing Player 2, with '117' cards in hand: 	Passed
Test: #620, Testing Player 2, with '118' cards in hand: 	Passed
Test: #621, Testing Player 2, with '119' cards in hand: 	Passed
Test: #622, Testing Player 2, with '120' cards in hand: 	Passed
Test: #623, Testing Player 2, with '121' cards in hand: 	Passed
Test: #624, Testing Player 2, with '122' cards in hand: 	Passed
Test: #625, Testing Player 2, with '123' cards in hand: 	Passed
Test: #626, Testing Player 2, with '124' cards in hand: 	Passed
Test: #627, Testing Player 2, with '125' cards in hand: 	Passed
Test: #628, Testing Player 2, with '126' cards in hand: 	Passed
Test: #629, Testing Player 2, with '127' cards in hand: 	Passed
Test: #630, Testing Player 2, with '128' cards in hand: 	Passed
Test: #631, Testing Player 2, with '129' cards in hand: 	Passed
Test: #632, Testing Player 2, with '130' cards in hand: 	Passed
Test: #633, Testing Player 2, with '131' cards in hand: 	Passed
Test: #634, Testing Player 2, with '132' cards in hand: 	Passed
Test: #635, Testing Player 2, with '133' cards in hand: 	Passed
Test: #636, Testing Player 2, with '134' cards in hand: 	Passed
Test: #637, Testing Player 2, with '135' cards in hand: 	Passed
Test: #638, Testing Player 2, with '136' cards in hand: 	Passed
Test: #639, Testing Player 2, with '137' cards in hand: 	Passed
Test: #640, Testing Player 2, with '138' cards in hand: 	Passed
Test: #641, Testing Player 2, with '139' cards in hand: 	Passed
Test: #642, Testing Player 2, with '140' cards in hand: 	Passed
Test: #643, Testing Player 2, with '141' cards in hand: 	Passed
Test: #644, Testing Player 2, with '142' cards in hand: 	Passed
Test: #645, Testing Player 2, with '143' cards in hand: 	Passed
Test: #646, Testing Player 2, with '144' cards in hand: 	Passed
Test: #647, Testing Player 2, with '145' cards in hand: 	Passed
Test: #648, Testing Player 2, with '146' cards in hand: 	Passed
Test: #649, Testing Player 2, with '147' cards in hand: 	Passed
Test: #650, Testing Player 2, with '148' cards in hand: 	Passed
Test: #651, Testing Player 2, with '149' cards in hand: 	Passed
Test: #652, Testing Player 2, with '150' cards in hand: 	Passed
Test: #653, Testing Player 2, with '151' cards in hand: 	Passed
Test: #654, Testing Player 2, with '152' cards in hand: 	Passed
Test: #655, Testing Player 2, with '153' cards in hand: 	Passed
Test: #656, Testing Player 2, with '154' cards in hand: 	Passed
Test: #657, Testing Player 2, with '155' cards in hand: 	Passed
Test: #658, Testing Player 2, with '156' cards in hand: 	Passed
Test: #659, Testing Player 2, with '157' cards in hand: 	Passed
Test: #660, Testing Player 2, with '158' cards in hand: 	Passed
Test: #661, Testing Player 2, with '159' cards in hand: 	Passed
Test: #662, Testing Player 2, with '160' cards in hand: 	Passed
Test: #663, Testing Player 2, with '161' cards in hand: 	Passed
Test: #664, Testing Player 2, with '162' cards in hand: 	Passed
Test: #665, Testing Player 2, with '163' cards in hand: 	Passed
Test: #666, Testing Player 2, with '164' cards in hand: 	Passed
Test: #667, Testing Player 2, with '165' cards in hand: 	Passed
Test: #668, Testing Player 2, with '166' cards in hand: 	Passed
Test: #669, Testing Player 2, with '167' cards in hand: 	Passed
Test: #670, Testing Player 2, with '168' cards in hand: 	Passed
Test: #671, Testing Player 2, with '169' cards in hand: 	Passed
Test: #672, Testing Player 2, with '170' cards in hand: 	Passed
Test: #673, Testing Player 2, with '171' cards in hand: 	Passed
Test: #674, Testing Player 2, with '172' cards in hand: 	Passed
Test: #675, Testing Player 2, with '173' cards in hand: 	Passed
Test: #676, Testing Player 2, with '174' cards in hand: 	Passed
Test: #677, Testing Player 2, with '175' cards in hand: 	Passed
Test: #678, Testing Player 2, with '176' cards in hand: 	Passed
Test: #679, Testing Player 2, with '177' cards in hand: 	Passed
Test: #680, Testing Player 2, with '178' cards in hand: 	Passed
Test: #681, Testing Player 2, with '179' cards in hand: 	Passed
Test: #682, Testing Player 2, with '180' cards in hand: 	Passed
Test: #683, Testing Player 2, with '181' cards in hand: 	Passed
Test: #684, Testing Player 2, with '182' cards in hand: 	Passed
Test: #685, Testing Player 2, with '183' cards in hand: 	Passed
Test: #686, Testing Player 2, with '184' cards in hand: 	Passed
Test: #687, Testing Player 2, with '185' cards in hand: 	Passed
Test: #688, Testing Player 2, with '186' cards in hand: 	Passed
Test: #689, Testing Player 2, with '187' cards in hand: 	Passed
Test: #690, Testing Player 2, with '188' cards in hand: 	Passed
Test: #691, Testing Player 2, with '189' cards in hand: 	Passed
Test: #692, Testing Player 2, with '190' cards in hand: 	Passed
Test: #693, Testing Player 2, with '191' cards in hand: 	Passed
Test: #694, Testing Player 2, with '192' cards in hand: 	Passed
Test: #695, Testing Player 2, with '193' cards in hand: 	Passed
Test: #696, Testing Player 2, with '194' cards in hand: 	Passed
Test: #697, Testing Player 2, with '195' cards in hand: 	Passed
Test: #698, Testing Player 2, with '196' cards in hand: 	Passed
Test: #699, Testing Player 2, with '197' cards in hand: 	Passed
Test: #700, Testing Player 2, with '198' cards in hand: 	Passed
Test: #701, Testing Player 2, with '199' cards in hand: 	Passed
Test: #702, Testing Player 2, with '200' cards in hand: 	Passed
Test: #703, Testing Player 2, with '201' cards in hand: 	Passed
Test: #704, Testing Player 2, with '202' cards in hand: 	Passed
Test: #705, Testing Player 2, with '203' cards in hand: 	Passed
Test: #706, Testing Player 2, with '204' cards in hand: 	Passed
Test: #707, Testing Player 2, with '205' cards in hand: 	Passed
Test: #708, Testing Player 2, with '206' cards in hand: 	Passed
Test: #709, Testing Player 2, with '207' cards in hand: 	Passed
Test: #710, Testing Player 2, with '208' cards in hand: 	Passed
Test: #711, Testing Player 2, with '209' cards in hand: 	Passed
Test: #712, Testing Player 2, with '210' cards in hand: 	Passed
Test: #713, Testing Player 2, with '211' cards in hand: 	Passed
Test: #714, Testing Player 2, with '212' cards in hand: 	Passed
Test: #715, Testing Player 2, with '213' cards in hand: 	Passed
Test: #716, Testing Player 2, with '214' cards in hand: 	Passed
Test: #717, Testing Player 2, with '215' cards in hand: 	Passed
Test: #718, Testing Player 2, with '216' cards in hand: 	Passed
Test: #719, Testing Player 2, with '217' cards in hand: 	Passed
Test: #720, Testing Player 2, with '218' cards in hand: 	Passed
Test: #721, Testing Player 2, with '219' cards in hand: 	Passed
Test: #722, Testing Player 2, with '220' cards in hand: 	Passed
Test: #723, Testing Player 2, with '221' cards in hand: 	Passed
Test: #724, Testing Player 2, with '222' cards in hand: 	Passed
Test: #725, Testing Player 2, with '223' cards in hand: 	Passed
Test: #726, Testing Player 2, with '224' cards in hand: 	Passed
Test: #727, Testing Player 2, with '225' cards in hand: 	Passed
Test: #728, Testing Player 2, with '226' cards in hand: 	Passed
Test: #729, Testing Player 2, with '227' cards in hand: 	Passed
Test: #730, Testing Player 2, with '228' cards in hand: 	Passed
Test: #731, Testing Player 2, with '229' cards in hand: 	Passed
Test: #732, Testing Player 2, with '230' cards in hand: 	Passed
Test: #733, Testing Player 2, with '231' cards in hand: 	Passed
Test: #734, Testing Player 2, with '232' cards in hand: 	Passed
Test: #735, Testing Player 2, with '233' cards in hand: 	Passed
Test: #736, Testing Player 2, with '234' cards in hand: 	Passed
Test: #737, Testing Player 2, with '235' cards in hand: 	Passed
Test: #738, Testing Player 2, with '236' cards in hand: 	Passed
Test: #739, Testing Player 2, with '237' cards in hand: 	Passed
Test: #740, Testing Player 2, with '238' cards in hand: 	Passed
Test: #741, Testing Player 2, with '239' cards in hand: 	Passed
Test: #742, Testing Player 2, with '240' cards in hand: 	Passed
Test: #743, Testing Player 2, with '241' cards in hand: 	Passed
Test: #744, Testing Player 2, with '242' cards in hand: 	Passed
Test: #745, Testing Player 2, with '243' cards in hand: 	Passed
Test: #746, Testing Player 2, with '244' cards in hand: 	Passed
Test: #747, Testing Player 2, with '245' cards in hand: 	Passed
Test: #748, Testing Player 2, with '246' cards in hand: 	Passed
Test: #749, Testing Player 2, with '247' cards in hand: 	Passed
Test: #750, Testing Player 2, with '248' cards in hand: 	Passed
Test: #751, Testing Player 2, with '249' cards in hand: 	Passed
Test: #752, Testing Player 2, with '250' cards in hand: 	Passed
Test: #753, Testing Player 2, with '251' cards in hand: 	Passed
Test: #754, Testing Player 2, with '252' cards in hand: 	Passed
Test: #755, Testing Player 2, with '253' cards in hand: 	Passed
Test: #756, Testing Player 2, with '254' cards in hand: 	Passed
Test: #757, Testing Player 2, with '255' cards in hand: 	Passed
Test: #758, Testing Player 2, with '256' cards in hand: 	Passed
Test: #759, Testing Player 2, with '257' cards in hand: 	Passed
Test: #760, Testing Player 2, with '258' cards in hand: 	Passed
Test: #761, Testing Player 2, with '259' cards in hand: 	Passed
Test: #762, Testing Player 2, with '260' cards in hand: 	Passed
Test: #763, Testing Player 2, with '261' cards in hand: 	Passed
Test: #764, Testing Player 2, with '262' cards in hand: 	Passed
Test: #765, Testing Player 2, with '263' cards in hand: 	Passed
Test: #766, Testing Player 2, with '264' cards in hand: 	Passed
Test: #767, Testing Player 2, with '265' cards in hand: 	Passed
Test: #768, Testing Player 2, with '266' cards in hand: 	Passed
Test: #769, Testing Player 2, with '267' cards in hand: 	Passed
Test: #770, Testing Player 2, with '268' cards in hand: 	Passed
Test: #771, Testing Player 2, with '269' cards in hand: 	Passed
Test: #772, Testing Player 2, with '270' cards in hand: 	Passed
Test: #773, Testing Player 2, with '271' cards in hand: 	Passed
Test: #774, Testing Player 2, with '272' cards in hand: 	Passed
Test: #775, Testing Player 2, with '273' cards in hand: 	Passed
Test: #776, Testing Player 2, with '274' cards in hand: 	Passed
Test: #777, Testing Player 2, with '275' cards in hand: 	Passed
Test: #778, Testing Player 2, with '276' cards in hand: 	Passed
Test: #779, Testing Player 2, with '277' cards in hand: 	Passed
Test: #780, Testing Player 2, with '278' cards in hand: 	Passed
Test: #781, Testing Player 2, with '279' cards in hand: 	Passed
Test: #782, Testing Player 2, with '280' cards in hand: 	Passed
Test: #783, Testing Player 2, with '281' cards in hand: 	Passed
Test: #784, Testing Player 2, with '282' cards in hand: 	Passed
Test: #785, Testing Player 2, with '283' cards in hand: 	Passed
Test: #786, Testing Player 2, with '284' cards in hand: 	Passed
Test: #787, Testing Player 2, with '285' cards in hand: 	Passed
Test: #788, Testing Player 2, with '286' cards in hand: 	Passed
Test: #789, Testing Player 2, with '287' cards in hand: 	Passed
Test: #790, Testing Player 2, with '288' cards in hand: 	Passed
Test: #791, Testing Player 2, with '289' cards in hand: 	Passed
Test: #792, Testing Player 2, with '290' cards in hand: 	Passed
Test: #793, Testing Player 2, with '291' cards in hand: 	Passed
Test: #794, Testing Player 2, with '292' cards in hand: 	Passed
Test: #795, Testing Player 2, with '293' cards in hand: 	Passed
Test: #796, Testing Player 2, with '294' cards in hand: 	Passed
Test: #797, Testing Player 2, with '295' cards in hand: 	Passed
Test: #798, Testing Player 2, with '296' cards in hand: 	Passed
Test: #799, Testing Player 2, with '297' cards in hand: 	Passed
Test: #800, Testing Player 2, with '298' cards in hand: 	Passed
Test: #801, Testing Player 2, with '299' cards in hand: 	Passed
Test: #802, Testing Player 2, with '300' cards in hand: 	Passed
Test: #803, Testing Player 2, with '301' cards in hand: 	Passed
Test: #804, Testing Player 2, with '302' cards in hand: 	Passed
Test: #805, Testing Player 2, with '303' cards in hand: 	Passed
Test: #806, Testing Player 2, with '304' cards in hand: 	Passed
Test: #807, Testing Player 2, with '305' cards in hand: 	Passed
Test: #808, Testing Player 2, with '306' cards in hand: 	Passed
Test: #809, Testing Player 2, with '307' cards in hand: 	Passed
Test: #810, Testing Player 2, with '308' cards in hand: 	Passed
Test: #811, Testing Player 2, with '309' cards in hand: 	Passed
Test: #812, Testing Player 2, with '310' cards in hand: 	Passed
Test: #813, Testing Player 2, with '311' cards in hand: 	Passed
Test: #814, Testing Player 2, with '312' cards in hand: 	Passed
Test: #815, Testing Player 2, with '313' cards in hand: 	Passed
Test: #816, Testing Player 2, with '314' cards in hand: 	Passed
Test: #817, Testing Player 2, with '315' cards in hand: 	Passed
Test: #818, Testing Player 2, with '316' cards in hand: 	Passed
Test: #819, Testing Player 2, with '317' cards in hand: 	Passed
Test: #820, Testing Player 2, with '318' cards in hand: 	Passed
Test: #821, Testing Player 2, with '319' cards in hand: 	Passed
Test: #822, Testing Player 2, with '320' cards in hand: 	Passed
Test: #823, Testing Player 2, with '321' cards in hand: 	Passed
Test: #824, Testing Player 2, with '322' cards in hand: 	Passed
Test: #825, Testing Player 2, with '323' cards in hand: 	Passed
Test: #826, Testing Player 2, with '324' cards in hand: 	Passed
Test: #827, Testing Player 2, with '325' cards in hand: 	Passed
Test: #828, Testing Player 2, with '326' cards in hand: 	Passed
Test: #829, Testing Player 2, with '327' cards in hand: 	Passed
Test: #830, Testing Player 2, with '328' cards in hand: 	Passed
Test: #831, Testing Player 2, with '329' cards in hand: 	Passed
Test: #832, Testing Player 2, with '330' cards in hand: 	Passed
Test: #833, Testing Player 2, with '331' cards in hand: 	Passed
Test: #834, Testing Player 2, with '332' cards in hand: 	Passed
Test: #835, Testing Player 2, with '333' cards in hand: 	Passed
Test: #836, Testing Player 2, with '334' cards in hand: 	Passed
Test: #837, Testing Player 2, with '335' cards in hand: 	Passed
Test: #838, Testing Player 2, with '336' cards in hand: 	Passed
Test: #839, Testing Player 2, with '337' cards in hand: 	Passed
Test: #840, Testing Player 2, with '338' cards in hand: 	Passed
Test: #841, Testing Player 2, with '339' cards in hand: 	Passed
Test: #842, Testing Player 2, with '340' cards in hand: 	Passed
Test: #843, Testing Player 2, with '341' cards in hand: 	Passed
Test: #844, Testing Player 2, with '342' cards in hand: 	Passed
Test: #845, Testing Player 2, with '343' cards in hand: 	Passed
Test: #846, Testing Player 2, with '344' cards in hand: 	Passed
Test: #847, Testing Player 2, with '345' cards in hand: 	Passed
Test: #848, Testing Player 2, with '346' cards in hand: 	Passed
Test: #849, Testing Player 2, with '347' cards in hand: 	Passed
Test: #850, Testing Player 2, with '348' cards in hand: 	Passed
Test: #851, Testing Player 2, with '349' cards in hand: 	Passed
Test: #852, Testing Player 2, with '350' cards in hand: 	Passed
Test: #853, Testing Player 2, with '351' cards in hand: 	Passed
Test: #854, Testing Player 2, with '352' cards in hand: 	Passed
Test: #855, Testing Player 2, with '353' cards in hand: 	Passed
Test: #856, Testing Player 2, with '354' cards in hand: 	Passed
Test: #857, Testing Player 2, with '355' cards in hand: 	Passed
Test: #858, Testing Player 2, with '356' cards in hand: 	Passed
Test: #859, Testing Player 2, with '357' cards in hand: 	Passed
Test: #860, Testing Player 2, with '358' cards in hand: 	Passed
Test: #861, Testing Player 2, with '359' cards in hand: 	Passed
Test: #862, Testing Player 2, with '360' cards in hand: 	Passed
Test: #863, Testing Player 2, with '361' cards in hand: 	Passed
Test: #864, Testing Player 2, with '362' cards in hand: 	Passed
Test: #865, Testing Player 2, with '363' cards in hand: 	Passed
Test: #866, Testing Player 2, with '364' cards in hand: 	Passed
Test: #867, Testing Player 2, with '365' cards in hand: 	Passed
Test: #868, Testing Player 2, with '366' cards in hand: 	Passed
Test: #869, Testing Player 2, with '367' cards in hand: 	Passed
Test: #870, Testing Player 2, with '368' cards in hand: 	Passed
Test: #871, Testing Player 2, with '369' cards in hand: 	Passed
Test: #872, Testing Player 2, with '370' cards in hand: 	Passed
Test: #873, Testing Player 2, with '371' cards in hand: 	Passed
Test: #874, Testing Player 2, with '372' cards in hand: 	Passed
Test: #875, Testing Player 2, with '373' cards in hand: 	Passed
Test: #876, Testing Player 2, with '374' cards in hand: 	Passed
Test: #877, Testing Player 2, with '375' cards in hand: 	Passed
Test: #878, Testing Player 2, with '376' cards in hand: 	Passed
Test: #879, Testing Player 2, with '377' cards in hand: 	Passed
Test: #880, Testing Player 2, with '378' cards in hand: 	Passed
Test: #881, Testing Player 2, with '379' cards in hand: 	Passed
Test: #882, Testing Player 2, with '380' cards in hand: 	Passed
Test: #883, Testing Player 2, with '381' cards in hand: 	Passed
Test: #884, Testing Player 2, with '382' cards in hand: 	Passed
Test: #885, Testing Player 2, with '383' cards in hand: 	Passed
Test: #886, Testing Player 2, with '384' cards in hand: 	Passed
Test: #887, Testing Player 2, with '385' cards in hand: 	Passed
Test: #888, Testing Player 2, with '386' cards in hand: 	Passed
Test: #889, Testing Player 2, with '387' cards in hand: 	Passed
Test: #890, Testing Player 2, with '388' cards in hand: 	Passed
Test: #891, Testing Player 2, with '389' cards in hand: 	Passed
Test: #892, Testing Player 2, with '390' cards in hand: 	Passed
Test: #893, Testing Player 2, with '391' cards in hand: 	Passed
Test: #894, Testing Player 2, with '392' cards in hand: 	Passed
Test: #895, Testing Player 2, with '393' cards in hand: 	Passed
Test: #896, Testing Player 2, with '394' cards in hand: 	Passed
Test: #897, Testing Player 2, with '395' cards in hand: 	Passed
Test: #898, Testing Player 2, with '396' cards in hand: 	Passed
Test: #899, Testing Player 2, with '397' cards in hand: 	Passed
Test: #900, Testing Player 2, with '398' cards in hand: 	Passed
Test: #901, Testing Player 2, with '399' cards in hand: 	Passed
Test: #902, Testing Player 2, with '400' cards in hand: 	Passed
Test: #903, Testing Player 2, with '401' cards in hand: 	Passed
Test: #904, Testing Player 2, with '402' cards in hand: 	Passed
Test: #905, Testing Player 2, with '403' cards in hand: 	Passed
Test: #906, Testing Player 2, with '404' cards in hand: 	Passed
Test: #907, Testing Player 2, with '405' cards in hand: 	Passed
Test: #908, Testing Player 2, with '406' cards in hand: 	Passed
Test: #909, Testing Player 2, with '407' cards in hand: 	Passed
Test: #910, Testing Player 2, with '408' cards in hand: 	Passed
Test: #911, Testing Player 2, with '409' cards in hand: 	Passed
Test: #912, Testing Player 2, with '410' cards in hand: 	Passed
Test: #913, Testing Player 2, with '411' cards in hand: 	Passed
Test: #914, Testing Player 2, with '412' cards in hand: 	Passed
Test: #915, Testing Player 2, with '413' cards in hand: 	Passed
Test: #916, Testing Player 2, with '414' cards in hand: 	Passed
Test: #917, Testing Player 2, with '415' cards in hand: 	Passed
Test: #918, Testing Player 2, with '416' cards in hand: 	Passed
Test: #919, Testing Player 2, with '417' cards in hand: 	Passed
Test: #920, Testing Player 2, with '418' cards in hand: 	Passed
Test: #921, Testing Player 2, with '419' cards in hand: 	Passed
Test: #922, Testing Player 2, with '420' cards in hand: 	Passed
Test: #923, Testing Player 2, with '421' cards in hand: 	Passed
Test: #924, Testing Player 2, with '422' cards in hand: 	Passed
Test: #925, Testing Player 2, with '423' cards in hand: 	Passed
Test: #926, Testing Player 2, with '424' cards in hand: 	Passed
Test: #927, Testing Player 2, with '425' cards in hand: 	Passed
Test: #928, Testing Player 2, with '426' cards in hand: 	Passed
Test: #929, Testing Player 2, with '427' cards in hand: 	Passed
Test: #930, Testing Player 2, with '428' cards in hand: 	Passed
Test: #931, Testing Player 2, with '429' cards in hand: 	Passed
Test: #932, Testing Player 2, with '430' cards in hand: 	Passed
Test: #933, Testing Player 2, with '431' cards in hand: 	Passed
Test: #934, Testing Player 2, with '432' cards in hand: 	Passed
Test: #935, Testing Player 2, with '433' cards in hand: 	Passed
Test: #936, Testing Player 2, with '434' cards in hand: 	Passed
Test: #937, Testing Player 2, with '435' cards in hand: 	Passed
Test: #938, Testing Player 2, with '436' cards in hand: 	Passed
Test: #939, Testing Player 2, with '437' cards in hand: 	Passed
Test: #940, Testing Player 2, with '438' cards in hand: 	Passed
Test: #941, Testing Player 2, with '439' cards in hand: 	Passed
Test: #942, Testing Player 2, with '440' cards in hand: 	Passed
Test: #943, Testing Player 2, with '441' cards in hand: 	Passed
Test: #944, Testing Player 2, with '442' cards in hand: 	Passed
Test: #945, Testing Player 2, with '443' cards in hand: 	Passed
Test: #946, Testing Player 2, with '444' cards in hand: 	Passed
Test: #947, Testing Player 2, with '445' cards in hand: 	Passed
Test: #948, Testing Player 2, with '446' cards in hand: 	Passed
Test: #949, Testing Player 2, with '447' cards in hand: 	Passed
Test: #950, Testing Player 2, with '448' cards in hand: 	Passed
Test: #951, Testing Player 2, with '449' cards in hand: 	Passed
Test: #952, Testing Player 2, with '450' cards in hand: 	Passed
Test: #953, Testing Player 2, with '451' cards in hand: 	Passed
Test: #954, Testing Player 2, with '452' cards in hand: 	Passed
Test: #955, Testing Player 2, with '453' cards in hand: 	Passed
Test: #956, Testing Player 2, with '454' cards in hand: 	Passed
Test: #957, Testing Player 2, with '455' cards in hand: 	Passed
Test: #958, Testing Player 2, with '456' cards in hand: 	Passed
Test: #959, Testing Player 2, with '457' cards in hand: 	Passed
Test: #960, Testing Player 2, with '458' cards in hand: 	Passed
Test: #961, Testing Player 2, with '459' cards in hand: 	Passed
Test: #962, Testing Player 2, with '460' cards in hand: 	Passed
Test: #963, Testing Player 2, with '461' cards in hand: 	Passed
Test: #964, Testing Player 2, with '462' cards in hand: 	Passed
Test: #965, Testing Player 2, with '463' cards in hand: 	Passed
Test: #966, Testing Player 2, with '464' cards in hand: 	Passed
Test: #967, Testing Player 2, with '465' cards in hand: 	Passed
Test: #968, Testing Player 2, with '466' cards in hand: 	Passed
Test: #969, Testing Player 2, with '467' cards in hand: 	Passed
Test: #970, Testing Player 2, with '468' cards in hand: 	Passed
Test: #971, Testing Player 2, with '469' cards in hand: 	Passed
Test: #972, Testing Player 2, with '470' cards in hand: 	Passed
Test: #973, Testing Player 2, with '471' cards in hand: 	Passed
Test: #974, Testing Player 2, with '472' cards in hand: 	Passed
Test: #975, Testing Player 2, with '473' cards in hand: 	Passed
Test: #976, Testing Player 2, with '474' cards in hand: 	Passed
Test: #977, Testing Player 2, with '475' cards in hand: 	Passed
Test: #978, Testing Player 2, with '476' cards in hand: 	Passed
Test: #979, Testing Player 2, with '477' cards in hand: 	Passed
Test: #980, Testing Player 2, with '478' cards in hand: 	Passed
Test: #981, Testing Player 2, with '479' cards in hand: 	Passed
Test: #982, Testing Player 2, with '480' cards in hand: 	Passed
Test: #983, Testing Player 2, with '481' cards in hand: 	Passed
Test: #984, Testing Player 2, with '482' cards in hand: 	Passed
Test: #985, Testing Player 2, with '483' cards in hand: 	Passed
Test: #986, Testing Player 2, with '484' cards in hand: 	Passed
Test: #987, Testing Player 2, with '485' cards in hand: 	Passed
Test: #988, Testing Player 2, with '486' cards in hand: 	Passed
Test: #989, Testing Player 2, with '487' cards in hand: 	Passed
Test: #990, Testing Player 2, with '488' cards in hand: 	Passed
Test: #991, Testing Player 2, with '489' cards in hand: 	Passed
Test: #992, Testing Player 2, with '490' cards in hand: 	Passed
Test: #993, Testing Player 2, with '491' cards in hand: 	Passed
Test: #994, Testing Player 2, with '492' cards in hand: 	Passed
Test: #995, Testing Player 2, with '493' cards in hand: 	Passed
Test: #996, Testing Player 2, with '494' cards in hand: 	Passed
Test: #997, Testing Player 2, with '495' cards in hand: 	Passed
Test: #998, Testing Player 2, with '496' cards in hand: 	Passed
Test: #999, Testing Player 2, with '497' cards in hand: 	Passed
Test: #1000, Testing Player 2, with '498' cards in hand: 	Passed
Test: #1001, Testing Player 2, with '499' cards in hand: 	Passed
Test: #1002, Testing Player 2, with '500' cards in hand: 	Passed
All tests passed!

Times ran: 1002 | Tests Failed: 0
File 'dominion.c'
Lines executed:30.71% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/***** Refactored cards - now with bugs!*****/
        -:    9:
        -:   10:/* Smithy */
        -:   11:/* Card Test 1 */
        -:   12:/* Random tester card1 */
     1296:   13:int play_smithy(int currentPlayer, struct gameState *state, int handPos)
        -:   14:{
        -:   15:	int i;
        -:   16:
        -:   17:      //+3 Cards
     3888:   18:        for (i = 1; i < 3; i++) /* BUG: i = 1 instead of i = 0 */
        -:   19:	{
     2592:   20:	  drawCard(currentPlayer, state);
        -:   21:	}
        -:   22:			
        -:   23:      //discard card from hand
     1296:   24:      discardCard(handPos, currentPlayer, state, 0);
     1296:   25:      return 0;
        -:   26:}
        -:   27:
        -:   28:/* Adventurer */
        -:   29:/* Card Test 2 */
        -:   30:/* Random tester */
     1002:   31:int play_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:   32:{
        -:   33:	int cardDrawn;
        -:   34:
     5010:   35:	while(drawntreasure<2){
     3006:   36:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   37:		  shuffle(currentPlayer, state);
        -:   38:		}
     3006:   39:		drawCard(currentPlayer, state);
     3006:   40:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     3006:   41:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     2004:   42:		  drawntreasure++;
        -:   43:		else{
     1002:   44:		  temphand[z]=cardDrawn;
     1002:   45:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1002:   46:		  z++;
        -:   47:		}
        -:   48:	      }
     2505:   49:	      while(z-1>0){ /* BUG: '>' instead of '>=' */
      501:   50:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      501:   51:		z=z-1;
        -:   52:	      }
     1002:   53:	      return 0;
        -:   54:}
        -:   55:
        -:   56:/* Council Room */
        -:   57:/* Card Test 3 */
    #####:   58:int play_council_room(int currentPlayer, struct gameState *state, int handPos)
        -:   59:{
        -:   60:	int i;
        -:   61:
        -:   62:      //+4 Cards
    #####:   63:      for (i = 0; i < 3; i++) /* BUG: draw 3 cards instead of 4 */
        -:   64:	{
    #####:   65:	  drawCard(currentPlayer, state);
        -:   66:	}
        -:   67:			
        -:   68:      //+1 Buy
    #####:   69:      state->numBuys++;
        -:   70:			
        -:   71:      //Each other player draws a card
    #####:   72:      for (i = 0; i < state->numPlayers; i++)
        -:   73:	{
    #####:   74:	  if ( i != currentPlayer )
        -:   75:	    {
    #####:   76:	      drawCard(i, state);
        -:   77:	    }
        -:   78:	}
        -:   79:			
        -:   80:      //put played card in played card pile
    #####:   81:      discardCard(handPos, currentPlayer, state, 0);
        -:   82:			
    #####:   83:      return 0;
        -:   84:}
        -:   85:
        -:   86:/* Mine */
    #####:   87:int play_mine(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:   88:{
        -:   89:	int i;
        -:   90:	int j;
        -:   91:
    #####:   92:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:   93:
    #####:   94:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:   95:	  {
    #####:   96:	    return -1;
        -:   97:	  }
        -:   98:		  
    #####:   99:	if (choice2 > treasure_map || choice2 < curse)
        -:  100:	  {
    #####:  101:	    return -1;
        -:  102:	  }
        -:  103:
    #####:  104:	if ( (getCost(state->hand[currentPlayer][choice1]) + 4) > getCost(choice2) ) /* BUG: Gain treasure costing up to 4 more instead of 3 */
        -:  105:	  {
    #####:  106:	    return -1;
        -:  107:	  }
        -:  108:
    #####:  109:	gainCard(choice2, state, 2, currentPlayer);
        -:  110:
        -:  111:	//discard card from hand
    #####:  112:	discardCard(handPos, currentPlayer, state, 0);
        -:  113:
        -:  114:	//discard trashed card
    #####:  115:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  116:	  {
    #####:  117:	    if (state->hand[currentPlayer][i] == j)
        -:  118:	      {
    #####:  119:		discardCard(i, currentPlayer, state, 0);			
    #####:  120:		break;
        -:  121:	      }
        -:  122:	  }
        -:  123:			  
    #####:  124:	return 0;
        -:  125:}
        -:  126:
        -:  127:/* Remodel */
    #####:  128:int play_remodel(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  129:{
        -:  130:	int i;
        -:  131:	int j;
        -:  132:
    #####:  133:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  134:
    #####:  135:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  136:	{
    #####:  137:	  return -1;
        -:  138:	}
        -:  139:
    #####:  140:      gainCard(choice2, state, 0, currentPlayer);
        -:  141:
        -:  142:      //discard card from hand
    #####:  143:      discardCard(handPos, currentPlayer, state, 0);
        -:  144:
        -:  145:      //discard trashed card
    #####:  146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  147:	{
    #####:  148:	  if (state->hand[currentPlayer][i] == j)
        -:  149:	    {
    #####:  150:	      discardCard(i, currentPlayer, state, 0);			
    #####:  151:	      break;
        -:  152:	    }
        -:  153:	}
        -:  154:
        -:  155:
    #####:  156:      return 0;
        -:  157:}
        -:  158:
        -:  159:/* Village */
        -:  160:/* Card Test 4 */
        -:  161:/* Random tester card 2 */
    #####:  162:int play_village(int currentPlayer, struct gameState *state, int handPos)
        -:  163:{
        -:  164:      //+1 Card
    #####:  165:      drawCard(currentPlayer, state);
        -:  166:			
        -:  167:      //+2 Actions
    #####:  168:      state->numActions = state->numActions + 2;
        -:  169:			
        -:  170:      //discard played card from hand
    #####:  171:      discardCard(handPos, currentPlayer, state, 0);
    #####:  172:      return 0;
        -:  173:}
        -:  174:
        -:  175:/***** End refactoring *****/
        -:  176:
        -:  177:
   270820:  178:int compare(const void* a, const void* b) {
   270820:  179:  if (*(int*)a > *(int*)b)
     4950:  180:    return 1;
   265870:  181:  if (*(int*)a < *(int*)b)
    74502:  182:    return -1;
   191368:  183:  return 0;
        -:  184:}
        -:  185:
    #####:  186:struct gameState* newGame() {
    #####:  187:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  188:  return g;
        -:  189:}
        -:  190:
    #####:  191:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  192:		  int k8, int k9, int k10) {
    #####:  193:  int* k = malloc(10 * sizeof(int));
    #####:  194:  k[0] = k1;
    #####:  195:  k[1] = k2;
    #####:  196:  k[2] = k3;
    #####:  197:  k[3] = k4;
    #####:  198:  k[4] = k5;
    #####:  199:  k[5] = k6;
    #####:  200:  k[6] = k7;
    #####:  201:  k[7] = k8;
    #####:  202:  k[8] = k9;
    #####:  203:  k[9] = k10;
    #####:  204:  return k;
        -:  205:}
        -:  206:
     8694:  207:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  208:		   struct gameState *state) {
        -:  209:
        -:  210:  int i;
        -:  211:  int j;
        -:  212:  int it;			
        -:  213:  //set up random number generator
     8694:  214:  SelectStream(1);
     8694:  215:  PutSeed((long)randomSeed);
        -:  216:  
        -:  217:  //check number of players
     8694:  218:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  219:    {
    #####:  220:      return -1;
        -:  221:    }
        -:  222:
        -:  223:  //set number of players
     8694:  224:  state->numPlayers = numPlayers;
        -:  225:
        -:  226:  //check selected kingdom cards are different
    95634:  227:  for (i = 0; i < 10; i++)
        -:  228:    {
   956340:  229:      for (j = 0; j < 10; j++)
        -:  230:        {
   869400:  231:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  232:	    {
    #####:  233:	      return -1;
        -:  234:	    }
        -:  235:        }
        -:  236:    }
        -:  237:
        -:  238:
        -:  239:  //initialize supply
        -:  240:  ///////////////////////////////
        -:  241:
        -:  242:  //set number of Curse cards
     8694:  243:  if (numPlayers == 2)
        -:  244:    {
     8694:  245:      state->supplyCount[curse] = 10;
        -:  246:    }
    #####:  247:  else if (numPlayers == 3)
        -:  248:    {
    #####:  249:      state->supplyCount[curse] = 20;
        -:  250:    }
        -:  251:  else
        -:  252:    {
    #####:  253:      state->supplyCount[curse] = 30;
        -:  254:    }
        -:  255:
        -:  256:  //set number of Victory cards
     8694:  257:  if (numPlayers == 2)
        -:  258:    {
     8694:  259:      state->supplyCount[estate] = 8;
     8694:  260:      state->supplyCount[duchy] = 8;
     8694:  261:      state->supplyCount[province] = 8;
        -:  262:    }
        -:  263:  else
        -:  264:    {
    #####:  265:      state->supplyCount[estate] = 12;
    #####:  266:      state->supplyCount[duchy] = 12;
    #####:  267:      state->supplyCount[province] = 12;
        -:  268:    }
        -:  269:
        -:  270:  //set number of Treasure cards
     8694:  271:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     8694:  272:  state->supplyCount[silver] = 40;
     8694:  273:  state->supplyCount[gold] = 30;
        -:  274:
        -:  275:  //set number of Kingdom cards
   182574:  276:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  277:    {
  1434510:  278:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  279:	{
  1347570:  280:	  if (kingdomCards[j] == i)
        -:  281:	    {
        -:  282:	      //check if card is a 'Victory' Kingdom card
    86940:  283:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  284:		{
    34776:  285:		  if (numPlayers == 2){ 
    17388:  286:		    state->supplyCount[i] = 8; 
        -:  287:		  }
    #####:  288:		  else{ state->supplyCount[i] = 12; }
        -:  289:		}
        -:  290:	      else
        -:  291:		{
    69552:  292:		  state->supplyCount[i] = 10;
        -:  293:		}
    86940:  294:	      break;
        -:  295:	    }
        -:  296:	  else    //card is not in the set choosen for the game
        -:  297:	    {
  1260630:  298:	      state->supplyCount[i] = -1;
        -:  299:	    }
        -:  300:	}
        -:  301:
        -:  302:    }
        -:  303:
        -:  304:  ////////////////////////
        -:  305:  //supply intilization complete
        -:  306:
        -:  307:  //set player decks
    26082:  308:  for (i = 0; i < numPlayers; i++)
        -:  309:    {
    17388:  310:      state->deckCount[i] = 0;
    69552:  311:      for (j = 0; j < 3; j++)
        -:  312:	{
    52164:  313:	  state->deck[i][j] = estate;
    52164:  314:	  state->deckCount[i]++;
        -:  315:	}
   139104:  316:      for (j = 3; j < 10; j++)
        -:  317:	{
   121716:  318:	  state->deck[i][j] = copper;
   121716:  319:	  state->deckCount[i]++;		
        -:  320:	}
        -:  321:    }
        -:  322:
        -:  323:  //shuffle player decks
    26082:  324:  for (i = 0; i < numPlayers; i++)
        -:  325:    {
    17388:  326:      if ( shuffle(i, state) < 0 )
        -:  327:	{
    #####:  328:	  return -1;
        -:  329:	}
        -:  330:    }
        -:  331:
        -:  332:  //draw player hands
    26082:  333:  for (i = 0; i < numPlayers; i++)
        -:  334:    {  
        -:  335:      //initialize hand size to zero
    17388:  336:      state->handCount[i] = 0;
    17388:  337:      state->discardCount[i] = 0;
        -:  338:      //draw 5 cards
        -:  339:      // for (j = 0; j < 5; j++)
        -:  340:      //	{
        -:  341:      //	  drawCard(i, state);
        -:  342:      //	}
        -:  343:    }
        -:  344:  
        -:  345:  //set embargo tokens to 0 for all supply piles
   243432:  346:  for (i = 0; i <= treasure_map; i++)
        -:  347:    {
   234738:  348:      state->embargoTokens[i] = 0;
        -:  349:    }
        -:  350:
        -:  351:  //initialize first player's turn
     8694:  352:  state->outpostPlayed = 0;
     8694:  353:  state->phase = 0;
     8694:  354:  state->numActions = 1;
     8694:  355:  state->numBuys = 1;
     8694:  356:  state->playedCardCount = 0;
     8694:  357:  state->whoseTurn = 0;
     8694:  358:  state->handCount[state->whoseTurn] = 0;
        -:  359:  //int it; move to top
        -:  360:
        -:  361:  //Moved draw cards to here, only drawing at the start of a turn
    52164:  362:  for (it = 0; it < 5; it++){
    43470:  363:    drawCard(state->whoseTurn, state);
        -:  364:  }
        -:  365:
     8694:  366:  updateCoins(state->whoseTurn, state, 0);
        -:  367:
     8694:  368:  return 0;
        -:  369:}
        -:  370:
    18036:  371:int shuffle(int player, struct gameState *state) {
        -:  372: 
        -:  373:
        -:  374:  int newDeck[MAX_DECK];
    18036:  375:  int newDeckPos = 0;
        -:  376:  int card;
        -:  377:  int i;
        -:  378:
    18036:  379:  if (state->deckCount[player] < 1)
      648:  380:    return -1;
    17388:  381:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  382:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  383:
   208656:  384:  while (state->deckCount[player] > 0) {
   173880:  385:    card = floor(Random() * state->deckCount[player]);
   173880:  386:    newDeck[newDeckPos] = state->deck[player][card];
   173880:  387:    newDeckPos++;
   608580:  388:    for (i = card; i < state->deckCount[player]-1; i++) {
   434700:  389:      state->deck[player][i] = state->deck[player][i+1];
        -:  390:    }
   173880:  391:    state->deckCount[player]--;
        -:  392:  }
   191268:  393:  for (i = 0; i < newDeckPos; i++) {
   173880:  394:    state->deck[player][i] = newDeck[i];
   173880:  395:    state->deckCount[player]++;
        -:  396:  }
        -:  397:
    17388:  398:  return 0;
        -:  399:}
        -:  400:
    #####:  401:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  402:{	
        -:  403:  int card;
    #####:  404:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  405:
        -:  406:  //check if it is the right phase
    #####:  407:  if (state->phase != 0)
        -:  408:    {
    #####:  409:      return -1;
        -:  410:    }
        -:  411:	
        -:  412:  //check if player has enough actions
    #####:  413:  if ( state->numActions < 1 )
        -:  414:    {
    #####:  415:      return -1;
        -:  416:    }
        -:  417:	
        -:  418:  //get card played
    #####:  419:  card = handCard(handPos, state);
        -:  420:	
        -:  421:  //check if selected card is an action
    #####:  422:  if ( card < adventurer || card > treasure_map )
        -:  423:    {
    #####:  424:      return -1;
        -:  425:    }
        -:  426:	
        -:  427:  //play card
    #####:  428:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  429:    {
    #####:  430:      return -1;
        -:  431:    }
        -:  432:	
        -:  433:  //reduce number of actions
    #####:  434:  state->numActions--;
        -:  435:
        -:  436:  //update coins (Treasure cards may be added with card draws)
    #####:  437:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  438:	
    #####:  439:  return 0;
        -:  440:}
        -:  441:
    #####:  442:int buyCard(int supplyPos, struct gameState *state) {
        -:  443:  int who;
        -:  444:  if (DEBUG){
        -:  445:    printf("Entering buyCard...\n");
        -:  446:  }
        -:  447:
        -:  448:  // I don't know what to do about the phase thing.
        -:  449:
    #####:  450:  who = state->whoseTurn;
        -:  451:
    #####:  452:  if (state->numBuys < 1){
        -:  453:    if (DEBUG)
        -:  454:      printf("You do not have any buys left\n");
    #####:  455:    return -1;
    #####:  456:  } else if (supplyCount(supplyPos, state) <1){
        -:  457:    if (DEBUG)
        -:  458:      printf("There are not any of that type of card left\n");
    #####:  459:    return -1;
    #####:  460:  } else if (state->coins < getCost(supplyPos)){
        -:  461:    if (DEBUG) 
        -:  462:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  463:    return -1;
        -:  464:  } else {
    #####:  465:    state->phase=1;
        -:  466:    //state->supplyCount[supplyPos]--;
    #####:  467:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  468:  
    #####:  469:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  470:    state->numBuys--;
        -:  471:    if (DEBUG)
        -:  472:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  473:  }
        -:  474:
        -:  475:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  476:  //state->discardCount[who]++;
        -:  477:    
    #####:  478:  return 0;
        -:  479:}
        -:  480:
        -:  481:/***** Use this function for Unit test 4 *****/
     1002:  482:int numHandCards(struct gameState *state) {
     1002:  483:  return state->handCount[ whoseTurn(state) ];
        -:  484:}
        -:  485:
    #####:  486:int handCard(int handPos, struct gameState *state) {
    #####:  487:  int currentPlayer = whoseTurn(state);
    #####:  488:  return state->hand[currentPlayer][handPos];
        -:  489:}
        -:  490:
        -:  491:/***** Use this function for Unit test 3 *****/
    #####:  492:int supplyCount(int card, struct gameState *state) {
    #####:  493:  return state->supplyCount[card];
        -:  494:}
        -:  495:
     2662:  496:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  497:  int i;
     2662:  498:  int count = 0;
        -:  499:
    15972:  500:  for (i = 0; i < state->deckCount[player]; i++)
        -:  501:    {
    13310:  502:      if (state->deck[player][i] == card) count++;
        -:  503:    }
        -:  504:
    15972:  505:  for (i = 0; i < state->handCount[player]; i++)
        -:  506:    {
    13310:  507:      if (state->hand[player][i] == card) count++;
        -:  508:    }
        -:  509:
    15972:  510:  for (i = 0; i < state->discardCount[player]; i++)
        -:  511:    {
    13310:  512:      if (state->discard[player][i] == card) count++;
        -:  513:    }
        -:  514:
     2662:  515:  return count;
        -:  516:}
        -:  517:
     5943:  518:int whoseTurn(struct gameState *state) {
     5943:  519:  return state->whoseTurn;
        -:  520:}
        -:  521:
    #####:  522:int endTurn(struct gameState *state) {
        -:  523:  int k;
        -:  524:  int i;
    #####:  525:  int currentPlayer = whoseTurn(state);
        -:  526:  
        -:  527:  //Discard hand
    #####:  528:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  529:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  530:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  531:  }
    #####:  532:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  533:    
        -:  534:  //Code for determining the player
    #####:  535:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  536:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  537:  }
        -:  538:  else{
    #####:  539:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  540:  }
        -:  541:
    #####:  542:  state->outpostPlayed = 0;
    #####:  543:  state->phase = 0;
    #####:  544:  state->numActions = 1;
    #####:  545:  state->coins = 0;
    #####:  546:  state->numBuys = 1;
    #####:  547:  state->playedCardCount = 0;
    #####:  548:  state->handCount[state->whoseTurn] = 0;
        -:  549:
        -:  550:  //int k; move to top
        -:  551:  //Next player draws hand
    #####:  552:  for (k = 0; k < 5; k++){
    #####:  553:    drawCard(state->whoseTurn, state);//Draw a card
        -:  554:  }
        -:  555:
        -:  556:  //Update money
    #####:  557:  updateCoins(state->whoseTurn, state , 0);
        -:  558:
    #####:  559:  return 0;
        -:  560:}
        -:  561:
        -:  562:/***** Use this function for Unit test 1 *****/
       90:  563:int isGameOver(struct gameState *state) {
        -:  564:  int i;
        -:  565:  int j;
        -:  566:	
        -:  567:  //if stack of Province cards is empty, the game ends
       90:  568:  if (state->supplyCount[province] == 0)
        -:  569:    {
       26:  570:      return 1;
        -:  571:    }
        -:  572:
        -:  573:  //if three supply pile are at 0, the game ends
       64:  574:  j = 0;
     1664:  575:  for (i = 0; i < 25; i++)
        -:  576:    {
     1600:  577:      if (state->supplyCount[i] == 0)
        -:  578:	{
       96:  579:	  j++;
        -:  580:	}
        -:  581:    }
       64:  582:  if ( j >= 3)
        -:  583:    {
       16:  584:      return 1;
        -:  585:    }
        -:  586:
       48:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int scoreFor (int player, struct gameState *state) {
        -:  591:
        -:  592:  int i;
    #####:  593:  int score = 0;
        -:  594:  //score from hand
    #####:  595:  for (i = 0; i < state->handCount[player]; i++)
        -:  596:    {
    #####:  597:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  598:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  599:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  600:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  601:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  602:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  603:    }
        -:  604:
        -:  605:  //score from discard
    #####:  606:  for (i = 0; i < state->discardCount[player]; i++)
        -:  607:    {
    #####:  608:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  609:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  610:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  611:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  612:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  613:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  614:    }
        -:  615:
        -:  616:  //score from deck
    #####:  617:  for (i = 0; i < state->discardCount[player]; i++)
        -:  618:    {
    #####:  619:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  620:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  621:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  622:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  623:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  624:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  625:    }
        -:  626:
    #####:  627:  return score;
        -:  628:}
        -:  629:
    #####:  630:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  631:  int i;	
        -:  632:  int j;
        -:  633:  int highScore;
        -:  634:  int currentPlayer;
        -:  635:
        -:  636:  //get score for each player
    #####:  637:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  638:    {
        -:  639:      //set unused player scores to -9999
    #####:  640:      if (i >= state->numPlayers)
        -:  641:	{
    #####:  642:	  players[i] = -9999;
        -:  643:	}
        -:  644:      else
        -:  645:	{
    #####:  646:	  players[i] = scoreFor (i, state);
        -:  647:	}
        -:  648:    }
        -:  649:
        -:  650:  //find highest score
    #####:  651:  j = 0;
    #####:  652:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  653:    {
    #####:  654:      if (players[i] > players[j])
        -:  655:	{
    #####:  656:	  j = i;
        -:  657:	}
        -:  658:    }
    #####:  659:  highScore = players[j];
        -:  660:
        -:  661:  //add 1 to players who had less turns
    #####:  662:  currentPlayer = whoseTurn(state);
    #####:  663:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  664:    {
    #####:  665:      if ( players[i] == highScore && i > currentPlayer )
        -:  666:	{
    #####:  667:	  players[i]++;
        -:  668:	}
        -:  669:    }
        -:  670:
        -:  671:  //find new highest score
    #####:  672:  j = 0;
    #####:  673:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  674:    {
    #####:  675:      if ( players[i] > players[j] )
        -:  676:	{
    #####:  677:	  j = i;
        -:  678:	}
        -:  679:    }
    #####:  680:  highScore = players[j];
        -:  681:
        -:  682:  //set winners in array to 1 and rest to 0
    #####:  683:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  684:    {
    #####:  685:      if ( players[i] == highScore )
        -:  686:	{
    #####:  687:	  players[i] = 1;
        -:  688:	}
        -:  689:      else
        -:  690:	{
    #####:  691:	  players[i] = 0;
        -:  692:	}
        -:  693:    }
        -:  694:
    #####:  695:  return 0;
        -:  696:}
        -:  697:
    51669:  698:int drawCard(int player, struct gameState *state)
        -:  699:{	int count;
        -:  700:  int deckCounter;
    51669:  701:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  702:    
        -:  703:    //Step 1 Shuffle the discard pile back into a deck
        -:  704:    int i;
        -:  705:    //Move discard to deck
      648:  706:    for (i = 0; i < state->discardCount[player];i++){
    #####:  707:      state->deck[player][i] = state->discard[player][i];
    #####:  708:      state->discard[player][i] = -1;
        -:  709:    }
        -:  710:
      648:  711:    state->deckCount[player] = state->discardCount[player];
      648:  712:    state->discardCount[player] = 0;//Reset discard
        -:  713:
        -:  714:    //Shufffle the deck
      648:  715:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  716:   
        -:  717:    if (DEBUG){//Debug statements
        -:  718:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  719:    }
        -:  720:    
      648:  721:    state->discardCount[player] = 0;
        -:  722:
        -:  723:    //Step 2 Draw Card
      648:  724:    count = state->handCount[player];//Get current player's hand count
        -:  725:    
        -:  726:    if (DEBUG){//Debug statements
        -:  727:      printf("Current hand count: %d\n", count);
        -:  728:    }
        -:  729:    
      648:  730:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  731:
      648:  732:    if (deckCounter == 0)
      648:  733:      return -1;
        -:  734:
    #####:  735:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  736:    state->deckCount[player]--;
    #####:  737:    state->handCount[player]++;//Increment hand count
        -:  738:  }
        -:  739:
        -:  740:  else{
    51021:  741:    int count = state->handCount[player];//Get current hand count for player
        -:  742:    int deckCounter;
        -:  743:    if (DEBUG){//Debug statements
        -:  744:      printf("Current hand count: %d\n", count);
        -:  745:    }
        -:  746:
    51021:  747:    deckCounter = state->deckCount[player];//Create holder for the deck count
    51021:  748:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    51021:  749:    state->deckCount[player]--;
    51021:  750:    state->handCount[player]++;//Increment hand count
        -:  751:  }
        -:  752:
    51021:  753:  return 0;
        -:  754:}
        -:  755:
    #####:  756:int getCost(int cardNumber)
        -:  757:{
    #####:  758:  switch( cardNumber ) 
        -:  759:    {
        -:  760:    case curse:
    #####:  761:      return 0;
        -:  762:    case estate:
    #####:  763:      return 2;
        -:  764:    case duchy:
    #####:  765:      return 5;
        -:  766:    case province:
    #####:  767:      return 8;
        -:  768:    case copper:
    #####:  769:      return 0;
        -:  770:    case silver:
    #####:  771:      return 3;
        -:  772:    case gold:
    #####:  773:      return 6;
        -:  774:    case adventurer:
    #####:  775:      return 6;
        -:  776:    case council_room:
    #####:  777:      return 5;
        -:  778:    case feast:
    #####:  779:      return 4;
        -:  780:    case gardens:
    #####:  781:      return 4;
        -:  782:    case mine:
    #####:  783:      return 5;
        -:  784:    case remodel:
    #####:  785:      return 4;
        -:  786:    case smithy:
    #####:  787:      return 4;
        -:  788:    case village:
    #####:  789:      return 3;
        -:  790:    case baron:
    #####:  791:      return 4;
        -:  792:    case great_hall:
    #####:  793:      return 3;
        -:  794:    case minion:
    #####:  795:      return 5;
        -:  796:    case steward:
    #####:  797:      return 3;
        -:  798:    case tribute:
    #####:  799:      return 5;
        -:  800:    case ambassador:
    #####:  801:      return 3;
        -:  802:    case cutpurse:
    #####:  803:      return 4;
        -:  804:    case embargo: 
    #####:  805:      return 2;
        -:  806:    case outpost:
    #####:  807:      return 5;
        -:  808:    case salvager:
    #####:  809:      return 4;
        -:  810:    case sea_hag:
    #####:  811:      return 4;
        -:  812:    case treasure_map:
    #####:  813:      return 4;
        -:  814:    }
        -:  815:	
    #####:  816:  return -1;
        -:  817:}
        -:  818:
        -:  819:/********** BEGINNING of cardEffct **********/
        -:  820:/* This is where the refactor and bug additions will be done for assignment-2 */
     4941:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
     4941:  828:  int currentPlayer = whoseTurn(state);
     4941:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
     4941:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND];// moved above the if statement
     4941:  833:  int drawntreasure=0;
        -:  834:  int cardDrawn;
     4941:  835:  int z = 0;// this is the counter for the temp hand
     4941:  836:  if (nextPlayer > (state->numPlayers - 1)){
      501:  837:    nextPlayer = 0;
        -:  838:  }
        -:  839:  
        -:  840:  /* Refactoring switch statement so cards are implemented in their own functions */
        -:  841:  //uses switch to select card and perform actions
     4941:  842:  switch( card ) 
        -:  843:    {
        -:  844:
        -:  845:    /***** Refactor adventurer *****/
        -:  846:    case adventurer:
     1002:  847:	    return play_adventurer(drawntreasure, state, currentPlayer, temphand, z);
        -:  848:      /*
        -:  849:      while(drawntreasure<2){
        -:  850:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  851:	  shuffle(currentPlayer, state);
        -:  852:	}
        -:  853:	drawCard(currentPlayer, state);
        -:  854:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  855:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  856:	  drawntreasure++;
        -:  857:	else{
        -:  858:	  temphand[z]=cardDrawn;
        -:  859:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  860:	  z++;
        -:  861:	}
        -:  862:      }
        -:  863:      while(z-1>=0){
        -:  864:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  865:	z=z-1;
        -:  866:      }
        -:  867:      return 0;
        -:  868:      */
        -:  869:			
        -:  870:    /***** Refactor council room*****/
        -:  871:    case council_room:
    #####:  872:       	return play_council_room(currentPlayer, state, handPos);
        -:  873:      /*
        -:  874:      //+4 Cards
        -:  875:      for (i = 0; i < 4; i++)
        -:  876:	{
        -:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
        -:  879:			
        -:  880:      //+1 Buy
        -:  881:      state->numBuys++;
        -:  882:			
        -:  883:      //Each other player draws a card
        -:  884:      for (i = 0; i < state->numPlayers; i++)
        -:  885:	{
        -:  886:	  if ( i != currentPlayer )
        -:  887:	    {
        -:  888:	      drawCard(i, state);
        -:  889:	    }
        -:  890:	}
        -:  891:			
        -:  892:      //put played card in played card pile
        -:  893:      discardCard(handPos, currentPlayer, state, 0);
        -:  894:			
        -:  895:      return 0;
        -:  896:      */
        -:  897:			
        -:  898:    case feast:
        -:  899:      //gain card with cost up to 5
        -:  900:      //Backup hand
    #####:  901:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  902:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  903:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  904:      }
        -:  905:      //Backup hand
        -:  906:
        -:  907:      //Update Coins for Buy
    #####:  908:      updateCoins(currentPlayer, state, 5);
    #####:  909:      x = 1;//Condition to loop on
    #####:  910:      while( x == 1) {//Buy one card
    #####:  911:	if (supplyCount(choice1, state) <= 0){
        -:  912:	  if (DEBUG)
        -:  913:	    printf("None of that card left, sorry!\n");
        -:  914:
        -:  915:	  if (DEBUG){
        -:  916:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  917:	  }
        -:  918:	}
    #####:  919:	else if (state->coins < getCost(choice1)){
    #####:  920:	  printf("That card is too expensive!\n");
        -:  921:
        -:  922:	  if (DEBUG){
        -:  923:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  924:	  }
        -:  925:	}
        -:  926:	else{
        -:  927:
        -:  928:	  if (DEBUG){
        -:  929:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:	  }
        -:  931:
    #####:  932:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  933:	  x = 0;//No more buying cards
        -:  934:
        -:  935:	  if (DEBUG){
        -:  936:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:	  }
        -:  938:
        -:  939:	}
        -:  940:      }     
        -:  941:
        -:  942:      //Reset Hand
    #####:  943:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  944:	state->hand[currentPlayer][i] = temphand[i];
    #####:  945:	temphand[i] = -1;
        -:  946:      }
        -:  947:      //Reset Hand
        -:  948:      			
    #####:  949:      return 0;
        -:  950:			
        -:  951:    case gardens:
    #####:  952:      return -1;
        -:  953:			
        -:  954:    /***** Refactor mine*****/
        -:  955:    case mine:
    #####:  956:	return play_mine(state, choice1, choice2, currentPlayer, handPos);
        -:  957:      /*
        -:  958:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
        -:  960:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  961:	{
        -:  962:	  return -1;
        -:  963:	}
        -:  964:		
        -:  965:      if (choice2 > treasure_map || choice2 < curse)
        -:  966:	{
        -:  967:	  return -1;
        -:  968:	}
        -:  969:
        -:  970:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  971:	{
        -:  972:	  return -1;
        -:  973:	}
        -:  974:
        -:  975:      gainCard(choice2, state, 2, currentPlayer);
        -:  976:
        -:  977:      //discard card from hand
        -:  978:      discardCard(handPos, currentPlayer, state, 0);
        -:  979:
        -:  980:      //discard trashed card
        -:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  982:	{
        -:  983:	  if (state->hand[currentPlayer][i] == j)
        -:  984:	    {
        -:  985:	      discardCard(i, currentPlayer, state, 0);			
        -:  986:	      break;
        -:  987:	    }
        -:  988:	}
        -:  989:			
        -:  990:      return 0;
        -:  991:      */
        -:  992:			
        -:  993:    /***** Refactor remodel*****/
        -:  994:    case remodel:
    #####:  995:      return play_remodel(state, choice1, choice2, currentPlayer, handPos);
        -:  996:      /*
        -:  997:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  998:
        -:  999:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1000:	{
        -: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
        -: 1004:      gainCard(choice2, state, 0, currentPlayer);
        -: 1005:
        -: 1006:      //discard card from hand
        -: 1007:      discardCard(handPos, currentPlayer, state, 0);
        -: 1008:
        -: 1009:      //discard trashed card
        -: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1011:	{
        -: 1012:	  if (state->hand[currentPlayer][i] == j)
        -: 1013:	    {
        -: 1014:	      discardCard(i, currentPlayer, state, 0);			
        -: 1015:	      break;
        -: 1016:	    }
        -: 1017:	}
        -: 1018:
        -: 1019:
        -: 1020:      return 0;
        -: 1021:      */
        -: 1022:		
        -: 1023:    /***** Refactor smithy *****/
        -: 1024:    case smithy:
     1296: 1025:      return play_smithy(currentPlayer, state, handPos);
        -: 1026:      /* 
        -: 1027:      //+3 Cards
        -: 1028:      for (i = 0; i < 3; i++)
        -: 1029:	{
        -: 1030:	  drawCard(currentPlayer, state);
        -: 1031:	}
        -: 1032:			
        -: 1033:      //discard card from hand
        -: 1034:      discardCard(handPos, currentPlayer, state, 0);
        -: 1035:      return 0;
        -: 1036:      */
        -: 1037:		
        -: 1038:
        -: 1039:    /***** Refactored village for assignment-3 (no new bugs introduced) *****/
        -: 1040:    case village:
    #####: 1041:      return play_village(currentPlayer, state, handPos);
        -: 1042:      /*
        -: 1043:      //+1 Card
        -: 1044:      drawCard(currentPlayer, state);
        -: 1045:			
        -: 1046:      //+2 Actions
        -: 1047:      state->numActions = state->numActions + 2;
        -: 1048:			
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:      return 0;
        -: 1052:      */
        -: 1053:		
        -: 1054:    case baron:
    #####: 1055:      state->numBuys++;//Increase buys by 1!
    #####: 1056:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1057:	int p = 0;//Iterator for hand!
    #####: 1058:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1059:	while(card_not_discarded){
    #####: 1060:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1061:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1062:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1063:	    state->discardCount[currentPlayer]++;
    #####: 1064:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1065:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1066:	    }
    #####: 1067:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1068:	    state->handCount[currentPlayer]--;
    #####: 1069:	    card_not_discarded = 0;//Exit the loop
        -: 1070:	  }
    #####: 1071:	  else if (p > state->handCount[currentPlayer]){
        -: 1072:	    if(DEBUG) {
        -: 1073:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1074:	      printf("Must gain an estate if there are any\n");
        -: 1075:	    }
    #####: 1076:	    if (supplyCount(estate, state) > 0){
    #####: 1077:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1078:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1079:	      if (supplyCount(estate, state) == 0){
    #####: 1080:		isGameOver(state);
        -: 1081:	      }
        -: 1082:	    }
    #####: 1083:	    card_not_discarded = 0;//Exit the loop
        -: 1084:	  }
        -: 1085:			    
        -: 1086:	  else{
    #####: 1087:	    p++;//Next card
        -: 1088:	  }
        -: 1089:	}
        -: 1090:      }
        -: 1091:			    
        -: 1092:      else{
    #####: 1093:	if (supplyCount(estate, state) > 0){
    #####: 1094:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1095:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1096:	  if (supplyCount(estate, state) == 0){
    #####: 1097:	    isGameOver(state);
        -: 1098:	  }
        -: 1099:	}
        -: 1100:      }
        -: 1101:	    
        -: 1102:      
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case great_hall:
        -: 1106:      //+1 Card
     2601: 1107:      drawCard(currentPlayer, state);
        -: 1108:			
        -: 1109:      //+1 Actions
     2601: 1110:      state->numActions++;
        -: 1111:			
        -: 1112:      //discard card from hand
     2601: 1113:      discardCard(handPos, currentPlayer, state, 0);
     2601: 1114:      return 0;
        -: 1115:		
        -: 1116:    case minion:
        -: 1117:      //+1 action
    #####: 1118:      state->numActions++;
        -: 1119:			
        -: 1120:      //discard card from hand
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
        -: 1122:			
    #####: 1123:      if (choice1)		//+2 coins
        -: 1124:	{
    #####: 1125:	  state->coins = state->coins + 2;
        -: 1126:	}
        -: 1127:			
    #####: 1128:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1129:	{
        -: 1130:	  //discard hand
    #####: 1131:	  while(numHandCards(state) > 0)
        -: 1132:	    {
    #####: 1133:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //draw 4
    #####: 1137:	  for (i = 0; i < 4; i++)
        -: 1138:	    {
    #####: 1139:	      drawCard(currentPlayer, state);
        -: 1140:	    }
        -: 1141:				
        -: 1142:	  //other players discard hand and redraw if hand size > 4
    #####: 1143:	  for (i = 0; i < state->numPlayers; i++)
        -: 1144:	    {
    #####: 1145:	      if (i != currentPlayer)
        -: 1146:		{
    #####: 1147:		  if ( state->handCount[i] > 4 )
        -: 1148:		    {
        -: 1149:		      //discard hand
    #####: 1150:		      while( state->handCount[i] > 0 )
        -: 1151:			{
    #####: 1152:			  discardCard(handPos, i, state, 0);
        -: 1153:			}
        -: 1154:							
        -: 1155:		      //draw 4
    #####: 1156:		      for (j = 0; j < 4; j++)
        -: 1157:			{
    #####: 1158:			  drawCard(i, state);
        -: 1159:			}
        -: 1160:		    }
        -: 1161:		}
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case steward:
    #####: 1168:      if (choice1 == 1)
        -: 1169:	{
        -: 1170:	  //+2 cards
    #####: 1171:	  drawCard(currentPlayer, state);
    #####: 1172:	  drawCard(currentPlayer, state);
        -: 1173:	}
    #####: 1174:      else if (choice1 == 2)
        -: 1175:	{
        -: 1176:	  //+2 coins
    #####: 1177:	  state->coins = state->coins + 2;
        -: 1178:	}
        -: 1179:      else
        -: 1180:	{
        -: 1181:	  //trash 2 cards in hand
    #####: 1182:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1183:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:			
        -: 1186:      //discard card from hand
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case tribute:
    #####: 1191:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1192:	if (state->deckCount[nextPlayer] > 0){
    #####: 1193:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1194:	  state->deckCount[nextPlayer]--;
        -: 1195:	}
    #####: 1196:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1197:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1198:	  state->discardCount[nextPlayer]--;
        -: 1199:	}
        -: 1200:	else{
        -: 1201:	  //No Card to Reveal
        -: 1202:	  if (DEBUG){
        -: 1203:	    printf("No cards to reveal\n");
        -: 1204:	  }
        -: 1205:	}
        -: 1206:      }
        -: 1207:	    
        -: 1208:      else{
    #####: 1209:	if (state->deckCount[nextPlayer] == 0){
    #####: 1210:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1211:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1212:	    state->deckCount[nextPlayer]++;
    #####: 1213:	    state->discard[nextPlayer][i] = -1;
    #####: 1214:	    state->discardCount[nextPlayer]--;
        -: 1215:	  }
        -: 1216:			    
    #####: 1217:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1218:	} 
    #####: 1219:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1220:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1221:	state->deckCount[nextPlayer]--;
    #####: 1222:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1223:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1224:	state->deckCount[nextPlayer]--;
        -: 1225:      }    
        -: 1226:		       
    #####: 1227:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1228:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1229:	state->playedCardCount++;
    #####: 1230:	tributeRevealedCards[1] = -1;
        -: 1231:      }
        -: 1232:
    #####: 1233:      for (i = 0; i <= 2; i ++){
    #####: 1234:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1235:	  state->coins += 2;
        -: 1236:	}
        -: 1237:		    
    #####: 1238:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1239:	  drawCard(currentPlayer, state);
    #####: 1240:	  drawCard(currentPlayer, state);
        -: 1241:	}
        -: 1242:	else{//Action Card
    #####: 1243:	  state->numActions = state->numActions + 2;
        -: 1244:	}
        -: 1245:      }
        -: 1246:	    
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case ambassador:
    #####: 1250:      j = 0;		//used to check if player has enough cards to discard
        -: 1251:
    #####: 1252:      if (choice2 > 2 || choice2 < 0)
        -: 1253:	{
    #####: 1254:	  return -1;				
        -: 1255:	}
        -: 1256:
    #####: 1257:      if (choice1 == handPos)
        -: 1258:	{
    #####: 1259:	  return -1;
        -: 1260:	}
        -: 1261:
    #####: 1262:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1263:	{
    #####: 1264:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1265:	    {
    #####: 1266:	      j++;
        -: 1267:	    }
        -: 1268:	}
    #####: 1269:      if (j < choice2)
        -: 1270:	{
    #####: 1271:	  return -1;				
        -: 1272:	}
        -: 1273:
        -: 1274:      if (DEBUG) 
        -: 1275:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1276:
        -: 1277:      //increase supply count for choosen card by amount being discarded
    #####: 1278:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1279:			
        -: 1280:      //each other player gains a copy of revealed card
    #####: 1281:      for (i = 0; i < state->numPlayers; i++)
        -: 1282:	{
    #####: 1283:	  if (i != currentPlayer)
        -: 1284:	    {
    #####: 1285:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1286:	    }
        -: 1287:	}
        -: 1288:
        -: 1289:      //discard played card from hand
    #####: 1290:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1291:
        -: 1292:      //trash copies of cards returned to supply
    #####: 1293:      for (j = 0; j < choice2; j++)
        -: 1294:	{
    #####: 1295:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1296:	    {
    #####: 1297:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1298:		{
    #####: 1299:		  discardCard(i, currentPlayer, state, 1);
    #####: 1300:		  break;
        -: 1301:		}
        -: 1302:	    }
        -: 1303:	}			
        -: 1304:
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case cutpurse:
        -: 1308:
    #####: 1309:      updateCoins(currentPlayer, state, 2);
    #####: 1310:      for (i = 0; i < state->numPlayers; i++)
        -: 1311:	{
    #####: 1312:	  if (i != currentPlayer)
        -: 1313:	    {
    #####: 1314:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1315:		{
    #####: 1316:		  if (state->hand[i][j] == copper)
        -: 1317:		    {
    #####: 1318:		      discardCard(j, i, state, 0);
    #####: 1319:		      break;
        -: 1320:		    }
    #####: 1321:		  if (j == state->handCount[i])
        -: 1322:		    {
    #####: 1323:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1324:			{
        -: 1325:			  if (DEBUG)
        -: 1326:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1327:			}	
    #####: 1328:		      break;
        -: 1329:		    }		
        -: 1330:		}
        -: 1331:					
        -: 1332:	    }
        -: 1333:				
        -: 1334:	}				
        -: 1335:
        -: 1336:      //discard played card from hand
    #####: 1337:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1338:
    #####: 1339:      return 0;
        -: 1340:
        -: 1341:		
        -: 1342:    case embargo: 
        -: 1343:      //+2 Coins
    #####: 1344:      state->coins = state->coins + 2;
        -: 1345:			
        -: 1346:      //see if selected pile is in play
    #####: 1347:      if ( state->supplyCount[choice1] == -1 )
        -: 1348:	{
    #####: 1349:	  return -1;
        -: 1350:	}
        -: 1351:			
        -: 1352:      //add embargo token to selected supply pile
    #####: 1353:      state->embargoTokens[choice1]++;
        -: 1354:			
        -: 1355:      //trash card
    #####: 1356:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1357:      return 0;
        -: 1358:		
        -: 1359:    case outpost:
        -: 1360:      //set outpost flag
       42: 1361:      state->outpostPlayed++;
        -: 1362:			
        -: 1363:      //discard card
       42: 1364:      discardCard(handPos, currentPlayer, state, 0);
       42: 1365:      return 0;
        -: 1366:		
        -: 1367:    case salvager:
        -: 1368:      //+1 buy
    #####: 1369:      state->numBuys++;
        -: 1370:			
    #####: 1371:      if (choice1)
        -: 1372:	{
        -: 1373:	  //gain coins equal to trashed card
    #####: 1374:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1375:	  //trash card
    #####: 1376:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1377:	}
        -: 1378:			
        -: 1379:      //discard card
    #####: 1380:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1381:      return 0;
        -: 1382:		
        -: 1383:    case sea_hag:
    #####: 1384:      for (i = 0; i < state->numPlayers; i++){
    #####: 1385:	if (i != currentPlayer){
    #####: 1386:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1387:	  state->discardCount[i]++;
    #####: 1388:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1389:	}
        -: 1390:      }
    #####: 1391:      return 0;
        -: 1392:		
        -: 1393:    case treasure_map:
        -: 1394:      //search hand for another treasure_map
    #####: 1395:      index = -1;
    #####: 1396:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1397:	{
    #####: 1398:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1399:	    {
    #####: 1400:	      index = i;
    #####: 1401:	      break;
        -: 1402:	    }
        -: 1403:	}
    #####: 1404:      if (index > -1)
        -: 1405:	{
        -: 1406:	  //trash both treasure cards
    #####: 1407:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1408:	  discardCard(index, currentPlayer, state, 1);
        -: 1409:
        -: 1410:	  //gain 4 Gold cards
    #####: 1411:	  for (i = 0; i < 4; i++)
        -: 1412:	    {
    #####: 1413:	      gainCard(gold, state, 1, currentPlayer);
        -: 1414:	    }
        -: 1415:				
        -: 1416:	  //return success
    #####: 1417:	  return 1;
        -: 1418:	}
        -: 1419:			
        -: 1420:      //no second treasure_map found in hand
    #####: 1421:      return -1;
        -: 1422:    }
        -: 1423:	
    #####: 1424:  return -1;
        -: 1425:}
        -: 1426:
        -: 1427:/********** END of cardEffct **********/
        -: 1428:
     3939: 1429:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1430:{
        -: 1431:	
        -: 1432:  //if card is not trashed, added to Played pile 
     3939: 1433:  if (trashFlag < 1)
        -: 1434:    {
        -: 1435:      //add card to played pile
     3939: 1436:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     3939: 1437:      state->playedCardCount++;
        -: 1438:    }
        -: 1439:	
        -: 1440:  //set played card to -1
     3939: 1441:  state->hand[currentPlayer][handPos] = -1;
        -: 1442:	
        -: 1443:  //remove card from player's hand
     3939: 1444:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1445:    {
        -: 1446:      //reduce number of cards in hand
      125: 1447:      state->handCount[currentPlayer]--;
        -: 1448:    }
     3814: 1449:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1450:    {
        -: 1451:      //reduce number of cards in hand
    #####: 1452:      state->handCount[currentPlayer]--;
        -: 1453:    }
        -: 1454:  else 	
        -: 1455:    {
        -: 1456:      //replace discarded card with last card in hand
     3814: 1457:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1458:      //set last card to -1
     3814: 1459:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1460:      //reduce number of cards in hand
     3814: 1461:      state->handCount[currentPlayer]--;
        -: 1462:    }
        -: 1463:	
     3939: 1464:  return 0;
        -: 1465:}
        -: 1466:
    #####: 1467:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1468:{
        -: 1469:  //Note: supplyPos is enum of choosen card
        -: 1470:	
        -: 1471:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1472:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1473:    {
    #####: 1474:      return -1;
        -: 1475:    }
        -: 1476:	
        -: 1477:  //added card for [whoseTurn] current player:
        -: 1478:  // toFlag = 0 : add to discard
        -: 1479:  // toFlag = 1 : add to deck
        -: 1480:  // toFlag = 2 : add to hand
        -: 1481:
    #####: 1482:  if (toFlag == 1)
        -: 1483:    {
    #####: 1484:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1485:      state->deckCount[player]++;
        -: 1486:    }
    #####: 1487:  else if (toFlag == 2)
        -: 1488:    {
    #####: 1489:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1490:      state->handCount[player]++;
        -: 1491:    }
        -: 1492:  else
        -: 1493:    {
    #####: 1494:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1495:      state->discardCount[player]++;
        -: 1496:    }
        -: 1497:	
        -: 1498:  //decrease number in supply pile
    #####: 1499:  state->supplyCount[supplyPos]--;
        -: 1500:	 
    #####: 1501:  return 0;
        -: 1502:}
        -: 1503:
        -: 1504:/***** Use this function for Unit test 2 *****/
     8694: 1505:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1506:{
        -: 1507:  int i;
        -: 1508:	
        -: 1509:  //reset coin count
     8694: 1510:  state->coins = 0;
        -: 1511:
        -: 1512:  //add coins for each Treasure card in player's hand
    52164: 1513:  for (i = 0; i < state->handCount[player]; i++)
        -: 1514:    {
    43470: 1515:      if (state->hand[player][i] == copper)
        -: 1516:	{
    34776: 1517:	  state->coins += 1;
        -: 1518:	}
     8694: 1519:      else if (state->hand[player][i] == silver)
        -: 1520:	{
    #####: 1521:	  state->coins += 2;
        -: 1522:	}
     8694: 1523:      else if (state->hand[player][i] == gold)
        -: 1524:	{
    #####: 1525:	  state->coins += 3;
        -: 1526:	}	
        -: 1527:    }	
        -: 1528:
        -: 1529:  //add bonus
     8694: 1530:  state->coins += bonus;
        -: 1531:
     8694: 1532:  return 0;
        -: 1533:}
        -: 1534:
        -: 1535:
        -: 1536://end of dominion.c
        -: 1537:
